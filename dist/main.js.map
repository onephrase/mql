{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../commons/src/Obj.js","webpack:///../commons/src/Js.js","webpack:///../commons/src/Arr.js","webpack:///../jsen/src/ExprInterface.js","webpack:///../jsen/src/Expr/AssignmentInterface.js","webpack:///../jsen/src/Expr/ReferenceInterface.js","webpack:///../jsen/src/Expr/DeletionInterface.js","webpack:///../jsen/src/Expr/CallInterface.js","webpack:///../jsen/src/Jsen.js","webpack:///../jsen/src/Lexer.js","webpack:///../jsen/src/Contexts.js","webpack:///../commons/src/Str.js","webpack:///../jsen/src/Expr/AbstractionInterface.js","webpack:///../jsen/src/Expr/Abstraction.js","webpack:///../jsen/src/Expr/ArrInterface.js","webpack:///../jsen/src/Expr/Arr.js","webpack:///../jsen/src/Expr/ArgumentsInterface.js","webpack:///../jsen/src/Expr/Arguments.js","webpack:///../jsen/src/Expr/AssertionInterface.js","webpack:///../jsen/src/Expr/Assertion.js","webpack:///../jsen/src/Expr/Assignment.js","webpack:///../jsen/src/Expr/BoolInterface.js","webpack:///../jsen/src/Expr/Bool.js","webpack:///../jsen/src/Expr/Call.js","webpack:///../jsen/src/Expr/CommentsInterface.js","webpack:///../jsen/src/Expr/Comments.js","webpack:///../jsen/src/Expr/ComparisonInterface.js","webpack:///../jsen/src/Expr/Comparison.js","webpack:///../jsen/src/Expr/ConditionInterface.js","webpack:///../jsen/src/Expr/Condition.js","webpack:///../jsen/src/Expr/Deletion.js","webpack:///../jsen/src/Expr/FuncInterface.js","webpack:///../jsen/src/Expr/Func.js","webpack:///../jsen/src/Expr/MathInterface.js","webpack:///../jsen/src/Expr/Math.js","webpack:///../jsen/src/Expr/NumInterface.js","webpack:///../jsen/src/Expr/Num.js","webpack:///../jsen/src/Expr/ObjInterface.js","webpack:///../jsen/src/Expr/Obj.js","webpack:///../jsen/src/Expr/Reference.js","webpack:///../jsen/src/Expr/ReturnInterface.js","webpack:///../jsen/src/Expr/Return.js","webpack:///../jsen/src/Expr/StatementsInterface.js","webpack:///../jsen/src/Expr/Statements.js","webpack:///../jsen/src/Expr/StrInterface.js","webpack:///../jsen/src/Expr/Str.js","webpack:///../commons/src/Num.js","webpack:///../commons/src/index.js","webpack:///../jsen/src/index.js","webpack:///./src/Mql.js","webpack:///./src/ExprInterface.js","webpack:///./src/Expr/Assertion.js","webpack:///./src/Expr/Reference.js","webpack:///./src/Expr/Assignment.js","webpack:///./src/Expr/Call.js","webpack:///./src/Expr/Comparison.js","webpack:///./src/Expr/Condition.js","webpack:///./src/Expr/AggrInterface.js","webpack:///./src/Expr/WindowInterface.js","webpack:///./src/Expr/OrderByInterface.js","webpack:///./src/Expr/OrderBy.js","webpack:///./src/Expr/Window.js","webpack:///./src/Expr/Aggr.js","webpack:///./src/Expr/SelectInterface.js","webpack:///./src/Expr/TableInterface.js","webpack:///./src/Expr/UnionInterface.js","webpack:///./src/Base/Table.js","webpack:///./src/Base/FetchInterface.js","webpack:///./src/Base/DerivedTable.js","webpack:///./src/Expr/Table.js","webpack:///./src/Expr/Stmt.js","webpack:///./src/Expr/DeleteInterface.js","webpack:///./src/Base/Row.js","webpack:///./src/Base/Base.js","webpack:///./src/Expr/Delete.js","webpack:///./src/Expr/FieldInterface.js","webpack:///./src/Expr/Field.js","webpack:///./src/Expr/GroupByInterface.js","webpack:///./src/Expr/GroupBy.js","webpack:///./src/Expr/InsertInterface.js","webpack:///./src/Expr/Val.js","webpack:///./src/Expr/Insert.js","webpack:///./src/Expr/JoinInterface.js","webpack:///./src/Expr/Join.js","webpack:///./src/Expr/Select.js","webpack:///./src/Expr/Union.js","webpack:///./src/Expr/UpdateInterface.js","webpack:///./src/Expr/Update.js","webpack:///./src/index.js","webpack:///./src/browser-entry.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_from","val","obj","arguments","length","_isString","_isArray","forEach","k","_with","entriesOrKey","_merge","_isObject","_each","callback","returnValue","undefined","_isTypeObject","keys","_isNumeric","parseFloat","_get","ctxt","path","reciever","detectObservables","slice","_ctxt","_isUndefined","_isNull","_key","shift","isObsvble","_isObservable","has","exists","_set","buildTree","target","_isFunction","_unset","reduceTree","success","lastKey","pop","_obj","_isset","_first","_last","_sample","amount","_rand","_copy","_find","deep","values","subKey","reduce","prev","curr","indexOf","concat","_getAllPropertyNames","until","keysAll","_getPrototypeChain","_pushUnique","getOwnPropertyNames","prototypalChain","push","getPrototypeOf","_copyPlain","filter","_mergeCallback","obj1","obj2","depth","objs","_inherit","_replace","replaceIntoEmptyObj","assertion","result","_compareCallback","v1","v2","_match","netMatch","_diff","netDiff","_percentageMatch","a","b","_percentageDiff","deepProps","isReplace","withSymbols","Error","valAtObj1","valAtObj2","getOwnPropertyDescriptor","netComparison","contrast","returnOnFirstFalse","contn","testPass","_isBoolean","_isNumber","isNaN","Array","isArray","_isTypeArray","_isTypeFunction","toString","_isClass","test","Function","_isEmpty","_getType","input","_all","method","_proxy","trap","trapByCommons","prop","Proxy","_isProxy","__proxyTargetByCommons","_getProxyTarget","instance","_getProxyTrap","__proxyTrapByCommons","_mixin","classes","Traps","Base","supersMap","Mixin","args","super","prototypes","_class","supers","this","supersReturnValues","supr","_instanceof","classB","mixinTest","classA","prevAns","constructor","arr","count","itm","firsts","reverse","_avg","_sum","_max","Math","max","_min","min","rand","floor","random","total","v","_slice","offset","lengthOrOffset2","_preceding","reference","rotate","lastReference","from","lastIndexOf","before","_following","after","_precedingLast","_followingLast","_between","reference2","rtl","to","_intersect","arr2","val1","val2","_difference","_filter","_divide","passes","failures","_flatten","withObjects","acc","_sort","order","_arr","index","sort","localeCompare","trim","toLowerCase","map","_unique","self","items","_concatUnique","arrs","_remove","limit","splice","_exclude","itms","replacements","_concatBefore","secondHalf","_concatAfter","_concatBeforeLast","_concatAfterLast","prevTest","_any","_inSequence","timing","sync","delay","delayAlways","Promise","resolve","reject","advance","setTimeout","ret","then","catch","Expr","jsenType","Super","comments","meta","vars","Interface","ExprInterface","Jsen","expr","Parsers","params","Static","parsers","grammars","varsScope","parsed","parse","_expr","_Parsers","ReferenceInterface","CallInterface","context","explain","console","log","AssignmentInterface","DeletionInterface","mutates","assert","Lexer","str","delims","options","$cache","lex","tokens","matches","$str","$options","blocks","$blocks","quotes","$quotes","$comments","runtime","nesting","maxDepth","matchesi","cache","_evalCharsAt","join","charWidth","commentTest","quoteTest","nestingTest","openComment","_testQuotes","openQuote","_testComments","ending","_push","chars","starting","preserveComments","_testNesting","stopChar","_testChars","stopChars","stopCharForward","substr","matchedDelim","preserveDelims","quote","block","match","RegExp","testList","useRegex","ci","splitSeries","regParse","_wrapped","subject","openingTag","closingTag","startsWith","endsWith","_unwrap","_after","_before","search","beforeLast","pos","afterLast","_afterLast","_toTitle","strict","replace","txt","charAt","toUpperCase","_toCamel","fromStart","_fromCamel","delimiter","split","_matches","lllll","Abstraction","AbstractionInterface","eval","parseCallback","ArrInterface","exprs","newExprs","exprA","uniqueSoFar","exprB","even","Arguments","ArgumentsInterface","list","arg","Assertion","AssertionInterface","logic","operators","isOr","or","isNor","nor","isAnd","and","isNand","nand","lastResult","trues","Assignment","operator","getEval","Contexts","Bool","BoolInterface","state","Call","_contexts","__contexts","cntxt","utils","handler","Num","Str","Arr","Obj","unshift","Comments","CommentsInterface","type","_comments","commentPlacement","splits","_beforeLast","line","commenta","Comparison","ComparisonInterface","operand1","operand2","compare","oper","allItemsMatch","entry1Keys","entry2Keys","allEntriesMatch","exact","is","isNull","equalsTo","notEqualsTo","relative","lesserThan","greaterThan","lesserThanOrEqualsTo","greaterThanOrEqualsTo","between","partial","contains","any","in","Condition","ConditionInterface","onTrue","onFalse","Deletion","red","del","Func","FuncInterface","paramters","statements","wrappings","parentParams","ownParams","nameInParent","nameInSelf","defaultValInParent","defaultValInSelf","sup","localContext","defaultVal","multipleContexts","headNoWrap","head","bodyNoWrap","body","funcHead","funcBody","param","paramSplit","MathInterface","currentTotal","sub","NumInterface","int","dec","parseInt","ObjInterface","entries","_entriesSplit","entry","Reference","backticks","sourceContext","parts","subjectContext","separator","nameSplit","isContext","Return","ReturnInterface","exprLc","Statements","StatementsInterface","stmts","delim","StrInterface","_closest","num","byKey","closest","abs","_fromWords","text","strtr","zero","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen","twenty","thirty","forty","fourty","fifty","sixty","seventy","eighty","ninety","hundred","thousand","million","billion","tmp","sum","last","part","standardize","prefix","funcName","rename","Js","Mql","opts","isPath","tempRow","searchWithoutContext","contexts","findContexts","_c","tableName","fields","row","evalWith","like","OrderBy","OrderByInterface","columns","withRollup","tempRows","rows","by","grouping","_for","ordering","e","message","Window","WindowInterface","dfn","definitions","uuid","exec","partitionBy","partitioning","partition","orderBy","WINDOWS","clauseType","Aggr","AggrInterface","window","AGGR","aggrMatch","aggrMatchRegex","funcs","funcCategory","normal","explicitOver","support","alias","iterateOnce","schema","uniqueKeys","_onfinish","cursor","next","rowObj","schemaColumns","unknownFields","col","schemaColumnName","keyColumnPosition","default","database","query","derivative","eof","fetch","TableInterface","claused","tableData","tableParse","SelectInterface","UnionInterface","strArray","clause","clauses","table","stmtClauses","_exprParse","tables","column","vals","COLUMN","onColumns","isRollup","cum","byStr","columnStr","where","joins","schemas","onfinish","initialized","rowBase","joinTable","conditionClause","condition","shouldJoin","remove","prevSuccess","delete","Delete","DeleteInterface","base","rowCount","getToString","stmtParse","getParse","Field","FieldInterface","getAlias","exprParse","GroupBy","GroupByInterface","having","groupBy","group","summaryRow","$","Insert","InsertInterface","insertType","onDuplicateKeyUpdate","tableBase","assignment","rowArr","duplicateKeyUpdateCount","comparisons","columnName","valueExpr","nameExpr","insert","tableColumnSplit","update","Join","JoinInterface","TableBase","Select","distinct","references","aggrExprs","aggr","win","pathExprs","x","applyFields","collectAggrs","field","aggrs","mainTable","aggrFields","windows","completed","_tempRow","_even","functions","func","paramsObject","Relationist","paramsObject_immediateTarget","getImmediateTarget","actingKey","postTarget","uniqueTargetID","PathLexer","getSignature","smartJoins","apply","select","Expression","_array","blueprint","defaultFields","splitAlias","withUac","windowName","windowsByName","windowSplit","Union","queries","q","onDuplicate","paramsRegex","selects","lastStmtSplit","Update","UpdateInterface","assignments","OnePhrase"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_isArray,\r\n\t_isBoolean,\r\n\t_isFunction,\r\n\t_isNumeric,\r\n\t_isObject,\r\n\t_isString,\r\n\t_isNull,\r\n\t_isTypeObject,\r\n\t_isObservable,\r\n\t_isUndefined,\r\n} from './Js.js';\r\nimport {\r\n\t_from as _arr_from,\r\n\t_first as _arr_first,\r\n\t_last as _arr_last,\r\n\t_pushUnique,\r\n\t_rand,\r\n} from './Arr.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Object utils\r\n * ---------------------------\r\n */\t\t\t\t\r\n \r\n/**\r\n * Return an object for the given pair(s) of input.\r\n *\r\n * @param string|array \t\t\tkey\r\n * @param mixed|array\t\t\tval \r\n *\r\n * @return object\r\n */\r\nconst _from = function(key, val = null) {\r\n\tvar obj = {};\r\n\tif (arguments.length === 2) {\r\n\t\tif (_isString(key)) {\r\n\t\t\tobj[key] = val;\r\n\t\t} else if (_isArray(key) && _isArray(val)) {\r\n\t\t\tkey.forEach((k, i) => obj[k] = val[i]);\r\n\t\t}\r\n\t}\r\n\treturn obj;\r\n};\r\n \r\n/**\r\n * Return the input object with additional entries.\r\n *\r\n * @param object\t \t\t\tobj\r\n * @param string|array \t\t\tentriesOrKey\r\n * @param mixed|array\t\t\tval \r\n *\r\n * @return object\r\n */\r\nconst _with = function(obj, entriesOrKey, val = null) {\r\n\treturn _merge(obj, _isObject(entriesOrKey) ? entriesOrKey : _from(entriesOrKey, val));\r\n};\r\n \r\n/**\r\n * Loops thru obj flatly with a callback function.\r\n * Stops when callback returns a non-undefined value.\r\n *\r\n * @param array|object \t\t\tobj \t\t\tThe array or object to iterate.\r\n * @param function \t\t\t\tcallback \t\tThe callback function.\r\n *\r\n * @return mixed|null\t\t\tAny non-null return from callback\r\n */\r\nconst _each = function(obj, callback) {\r\n\tvar returnValue = undefined;\r\n\tif (_isTypeObject(obj)) {\r\n\t\tObject.keys(obj).forEach(k => {\r\n\t\t\tif (returnValue !== false) {\r\n\t\t\t\treturnValue = callback(_isNumeric(k) ? parseFloat(k) : k, obj[k]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn returnValue;\r\n};\r\n\t\r\n/**\r\n * Retrieves the value at the given path.\r\n *\r\n * A return value of undefined is ambiguous, and can mean either that the\r\n * path does not exist, or that the path actually exists but with a value of undefined. If it is required to\r\n * know whether the path actually exists, pass an object as a third argument.\r\n * This object will have an \"exists\" key set to true/false\r\n *\r\n * @param object \t\t\t\tctxt\r\n * @param array \t\t\t\tpath\r\n * @param object \t\t\t\treciever\r\n * @param object \t\t\t\tdetectObservables\r\n *\r\n * @return mixed\r\n */\r\nconst _get = function(ctxt, path, reciever = {}, detectObservables = true) {\r\n\tpath = _arr_from(path).slice();\r\n\tvar _ctxt = ctxt;\r\n\twhile(!_isUndefined(_ctxt) && !_isNull(_ctxt) && path.length) {\r\n\t\tvar _key = path.shift();\r\n\t\tvar isObsvble = detectObservables && _isObservable(_ctxt);\r\n\t\tif (!(isObsvble ? _ctxt.has(_key) : (_key in _ctxt))) {\r\n\t\t\treciever.exists = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t_ctxt = isObsvble ? _ctxt.get(_key) : _ctxt[_key];\r\n\t}\r\n\treciever.exists = true;\r\n\treturn _ctxt;\r\n};\r\n\t\r\n/**\r\n * Sets a value to the given path.\r\n *\r\n * @param object \t\t\t\tobj\r\n * @param array \t\t\t\tpath\r\n * @param mixed \t\t\t\tval\r\n * @param object|function \t\tbuildTree\r\n *\r\n * @return bool\r\n */\r\nconst _set = function(obj, path, val, buildTree = {}) {\r\n\tpath = _arr_from(path);\r\n\tvar target = obj;\r\n\tfor(var i = 0; i < path.length; i ++) {\r\n\t\tif (i < path.length - 1) {\r\n\t\t\tif (!_isTypeObject(target) && !_isFunction(target)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!_isTypeObject(target[path[i]])) {\r\n\t\t\t\tif (!buildTree) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\ttarget[path[i]] = _isFunction(buildTree) ? buildTree(i) : buildTree;\r\n\t\t\t}\r\n\t\t\ttarget = target[path[i]];\r\n\t\t} else {\r\n\t\t\ttarget[path[i]] = val;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n};\r\n\t\r\n/**\r\n * Unsets a value from the given path.\r\n *\r\n * @param object \t\t\t\tobj\r\n * @param array \t\t\t\tpath\r\n * @param bool|function \t\treduceTree\r\n *\r\n * @return bool\r\n */\r\nconst _unset = function(obj, path, reduceTree = false) {\r\n\tpath = _arr_from(path);\r\n\tvar success = false;\r\n\tdo {\r\n\t\tvar lastKey = path.pop();\r\n\t\tvar lastKey = lastKey === ''/*null*/ ? 0 : lastKey;\r\n\t\tvar _obj = obj;\r\n\t\tif (path.length) {\r\n\t\t\t_obj = _get(obj, path);\r\n\t\t}\r\n\t\tif ((_isTypeObject(_obj) || _isFunction(_obj)) && lastKey in _obj) {\r\n\t\t\tdelete _obj[lastKey];\r\n\t\t\tsuccess = true;\r\n\t\t}\r\n\t} while (success && reduceTree && path.length && (_isTypeObject(_obj) || _isFunction(_obj)) && !Object.keys(_obj).length);\r\n\treturn success;\r\n};\r\n\t\r\n/**\r\n * Tells if the given path exists.\r\n *\r\n * @param object \t\t\t\tobj\r\n * @param array \t\t\t\tpath\r\n *\r\n * @return bool\r\n */\r\nconst _isset = function(obj, path) {\r\n\tvar reciever = {};\r\n\t_get(obj, path, reciever);\r\n\treturn reciever.exists;\r\n};\r\n\r\n/**\r\n * Returns the FIRST ENTRY.\r\n *\r\n * @param array|object \tobj\r\n *\r\n * @return mixed\r\n */\r\nconst _first = function(obj) {\r\n\treturn _isArray(obj) ? _arr_first(obj) : obj[Object.keys(obj)[0]];\r\n};\r\n\r\n/**\r\n * Returns the LAST ENTRY.\r\n *\r\n * @param array|object \tobj\r\n *\r\n * @return mixed\r\n */\r\nconst _last = function(obj) {\r\n\treturn _isArray(obj) ? _arr_last(obj) : obj[_arr_last(Object.keys(obj))];\r\n};\r\n\r\n/**\r\n * Returns a random subset of object.\r\n *\r\n * @param array|object \tobj\r\n * @param int\t\t \tamount\r\n *\r\n * @return array|object\r\n */\r\nconst _sample = function(obj, amount = 1) {\r\n\treturn _isArray(obj) ? _rand(obj) : _copy(obj, _rand(Object.keys(obj), amount));\r\n};\r\n\r\n/**\r\n * Finds a value in an array/object and returns the key (or path when found deep).\r\n *\r\n * @param array}object \tobj\r\n * @param function\t\tcallback\r\n * @param bool\t\t\tdeep\r\n *\r\n * @return number|string|array\r\n */\r\nconst _find = function(obj, callback, deep = false) {\r\n\tvar keys = null;\r\n\tvar values = obj;\r\n\tif (!_isArray(obj)) {\r\n\t\tkeys = Object.keys(obj);\r\n\t\tvalues = Object.values(obj);\r\n\t}\r\n\tvar subKey = undefined;\r\n\tvar value = values.reduce((prev, curr) => {\r\n\t\tif (subKey === undefined) {\r\n\t\t\tif (callback(curr, prev)) {\r\n\t\t\t\treturn curr;\r\n\t\t\t}\r\n\t\t\tif (deep && (_isTypeObject(curr) || _isFunction(curr)) && (subKey = _find(curr, callback, deep)) !== undefined) {\r\n\t\t\t\treturn curr;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn prev;\r\n\t}, undefined);\r\n\tif (value !== undefined) {\r\n\t\tvar key = keys ? keys[values.indexOf(value)] : values.indexOf(value);\r\n\t\treturn subKey !== undefined ? [key].concat(_arr_from(subKey)) : key;\r\n\t}\r\n};\r\n\r\n/**\r\n * Eagerly retrieves object members all down the prototype chain.\r\n *\r\n * @param object\t \tobj\r\n * @param object\t \tuntil\r\n *\r\n * @return array\r\n */\r\nconst _getAllPropertyNames = function(obj, until) {\r\n\tvar keysAll = [];\r\n\t_getPrototypeChain(obj, until).forEach(obj => {\r\n\t\t_pushUnique(keysAll, ...Object.getOwnPropertyNames(obj));\r\n\t});\r\n\treturn keysAll;\r\n};\r\n\r\n/**\r\n * Returns the prototype chain.\r\n *\r\n * @param object \t\tobj\r\n * @param object\t \tuntil\r\n *\r\n * @return bool\r\n */\r\nconst _getPrototypeChain = function(obj, until) {\r\n\tuntil = until || Object.prototype;\r\n\tuntil = until && !_isArray(until) ? [until] : until;\r\n\t// We get the chain of inheritance\r\n\tvar prototypalChain = [];\r\n\tvar obj = obj;\r\n\twhile((obj && (!until || until.indexOf(obj) < 0) && obj.name !== 'default')) {\r\n\t\tprototypalChain.push(obj);\r\n\t\tobj = obj ? Object.getPrototypeOf(obj) : null;\r\n\t}\r\n\treturn prototypalChain;\r\n};\r\n\r\n/**\r\n * Copies only properties of an object.\r\n *\r\n * @param object\t \tobj\r\n * @param array\t\t \tonly\r\n * @param array\t\t \texcept\r\n *\r\n * @return object\r\n */\r\nconst _copyPlain = function(obj, filter = []) {\r\n\treturn _mergeCallback([{}, obj], (key, obj1, obj2) => {\r\n\t\tif (!_isFunction(obj2[key])) {\r\n\t\t\treturn _isFunction(filter) ? filter(key) \r\n\t\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\r\n\t\t}\r\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\r\n};\r\n\r\n/**\r\n * Copies an object.\r\n *\r\n * @param object\t \tobj\r\n * @param array\t\t \tfilter\r\n *\r\n * @return object\r\n */\r\nconst _copy = function(obj, filter = []) {\r\n\tvar depth = 0;\r\n\tif (_isNumeric(arguments[0]) && _isTypeObject(arguments[1])) {\r\n\t\tdepth = arguments[0];\r\n\t\tobj = arguments[1];\r\n\t\tfilter = arguments[2] || [];\r\n\t}\r\n\treturn _mergeCallback([depth, {}, obj], (key, obj1, obj2) => {\r\n\t\treturn _isFunction(filter) ? filter(key) \r\n\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\r\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\r\n};\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects first array/object;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nconst _merge = function(...objs) {\r\n\treturn _mergeCallback(objs, (k, obj1, obj2) => {\r\n\t\treturn true;\r\n\t});\r\n};\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects into first array/object but only when not set;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nconst _inherit = function(...objs) {\r\n\treturn _mergeCallback(objs, (key, obj1, obj2) => {\r\n\t\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\t\tif (obj1.indexOf(obj2[key]) === -1) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} else if (!(key in obj1)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/**\r\n  * Replaces properties of first array/object with values from subsequent arrays/objects;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nconst _replace = function(...objs) {\r\n\tvar replaceIntoEmptyObj = Object.keys(objs[0]).length === 0;\r\n\treturn _mergeCallback(objs, (key, obj1, obj2, i) => {\r\n\t\tif ((key in obj1) || (replaceIntoEmptyObj && i === 0)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}, false/*deepProps*/, true/*isReplace*/);\r\n};\r\n\r\n/**\r\n * Asserts (members of) the first value against (members of) subsequent values.\r\n * Assertion could be TRUE, FALSE, or custom.\r\n *\r\n * @param mixed \t\t\tobj1\r\n * @param mixed \t\t\tobj2\r\n * @param bool|function\t\tassertion\r\n * @param int\t\t\t\tdepth\r\n *\r\n * @return bool\r\n */\r\nconst _even = function(obj1, obj2, assertion = true, depth = 1) {\r\n\tif ((_isArray(obj1) && _isArray(obj2) && obj1.length !== obj2.length)\r\n\t|| (_isObject(obj1) && _isObject(obj2) && Object.keys(obj1).length !== Object.keys(obj2).length)) {\r\n\t\treturn false;\r\n\t}\r\n\tvar result = _compareCallback(obj1, obj2, (v1, v2) => {\r\n\t\tif (depth > 0 && ((_isArray(v1) && _isArray(v2)) || (_isObject(v1) && _isObject(v2)))) {\r\n\t\t\treturn _even(v1, v2, assertion, depth - 1);\r\n\t\t}\r\n\t\treturn _isFunction(assertion) ? assertion(v1, v2) : (v1 === v2) === assertion;\r\n\t}, false/*netComparison*/, false/*contrast*/, true/*returnOnFirstFalse*/);\r\n\treturn _isArray(result) ? result.length === obj1.length\r\n\t\t: (_isObject(result) ? Object.keys(result).length === Object.keys(obj1).length : result);\r\n};\r\n\r\n/**\r\n * Gets the match(es) between (members of) two objects;\r\n * optionally with custom assertion.\r\n *\r\n * @param mixed \t\t\tob1\r\n * @param mixed \t\t\tobj2\r\n * @param string|function\tassertion\r\n * @param bool\t\t\t\tnetMatch\r\n *\r\n * @return object|undefined\r\n */\r\nconst _match = function(obj1, obj2, assertion = true, netMatch = true) {\r\n\treturn _compareCallback(obj1, obj2, (v1, v2) => {\r\n\t\tif ((_isArray(v1) && _isArray(v2)) || (_isObject(v1) && _isObject(v2))) {\r\n\t\t\treturn _match(v1, v2, assertion, netMatch);\r\n\t\t}\r\n\t\treturn _isFunction(assertion) ? assertion(v1, v2) : (v1 === v2) === assertion;\r\n\t}, netMatch/*netComparison*/);\r\n};\r\n\r\n/**\r\n * Gets the difference(s) between (members of) two objects;\r\n * optionally with custom assertion.\r\n *\r\n * @param mixed \t\t\tob1\r\n * @param mixed \t\t\tobj2\r\n * @param string|function\tassertion\r\n * @param bool\t\t\t\tnetDiff\r\n *\r\n * @return object|undefined\r\n */\r\nconst _diff = function(obj1, obj2, assertion = true, netDiff = true) {\r\n\treturn _compareCallback(obj1, obj2, (v1, v2) => {\r\n\t\tif ((_isArray(v1) && _isArray(v2)) || (_isObject(v1) && _isObject(v2))) {\r\n\t\t\treturn _diff(v1, v2, assertion, netDiff);\r\n\t\t}\r\n\t\treturn _isFunction(assertion) ? assertion(v1, v2) : (v1 === v2) === assertion;\r\n\t}, netDiff/*netComparison*/, true/*contrast*/);\r\n};\r\n\r\n/**\r\n * Asserts (members of) the first value against (members of) subsequent values.\r\n * Assertion could be TRUE, FALSE, or custom.\r\n *\r\n * @param mixed \t\t\tobj1\r\n * @param mixed \t\t\tobj2\r\n * @param bool|function\t\tassertion\r\n *\r\n * @return bool\r\n */\r\nconst _percentageMatch = function(obj1, obj2, assertion = true) {\r\n\tvar result = _compareCallback(obj1, obj2, (v1, v2) => {\r\n\t\tif ((_isArray(v1) && _isArray(v2)) || (_isObject(v1) && _isObject(v2))) {\r\n\t\t\treturn _percentageMatch(v1, v2, assertion);\r\n\t\t}\r\n\t\treturn (_isFunction(assertion) ? assertion(v1, v2) : (v1 === v2) === assertion) ? 1 : 0;\r\n\t}, false/*netComparison*/, false/*contrast*/, true/*returnOnFirstFalse*/);\r\n\tvar values = _isObject(result) ? Object.values(result) : result;\r\n\treturn values.reduce((a, b) => a + b, 0) / values.length;\r\n};\r\n\r\n/**\r\n * Asserts (members of) the first value against (members of) subsequent values.\r\n * Assertion could be TRUE, FALSE, or custom.\r\n *\r\n * @param mixed \t\t\tobj1\r\n * @param mixed \t\t\tobj2\r\n * @param bool|function\t\tassertion\r\n *\r\n * @return bool\r\n */\r\nconst _percentageDiff = function(obj1, obj2, assertion = false) {\r\n\treturn 1 - _percentageMatch(obj1, obj2, assertion);\r\n};\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects first array/object;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nconst _mergeCallback = function(objs, callback, deepProps = false, isReplace = false, withSymbols = false) {\r\n\tvar depth = 0;\r\n\tvar obj1 = objs.shift();\r\n\tif (_isNumeric(obj1) || obj1 === true || obj1 === false) {\r\n\t\tdepth = obj1;\r\n\t\tobj1 = objs.shift();\r\n\t}\r\n\tif (!objs.length) {\r\n\t\tthrow new Error('_merge() requires two or more array/objects.');\r\n\t}\r\n\tobjs.forEach((obj2, i) => {\r\n\t\tif (!_isTypeObject(obj2) && !_isFunction(obj2)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t(deepProps ? _getAllPropertyNames(obj2) : Object.getOwnPropertyNames(obj2)).forEach(key => {\r\n\t\t\tvar valAtObj1 = obj1[key];\r\n\t\t\tvar valAtObj2 = obj2[key];\r\n\t\t\tif (((_isArray(valAtObj1) && _isArray(valAtObj2)) || (_isObject(valAtObj1) && _isObject(valAtObj2))) \r\n\t\t\t&& (depth === true || depth > 0)) {\r\n\t\t\t\t// RECURSE...\r\n\t\t\t\tobj1[key] = _isArray(valAtObj1) && _isArray(valAtObj2) ? [] : {};\r\n\t\t\t\t_mergeCallback([_isNumeric(depth) ? depth - 1 : depth, obj1[key], valAtObj1, valAtObj2], callback, deepProps, isReplace);\r\n\t\t\t} else if (callback(key, obj1, obj2, i)) {\r\n\t\t\t\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\t\t\t\tif (isReplace) {\r\n\t\t\t\t\t\tobj1[key] = valAtObj2;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tobj1.push(valAtObj2);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (withSymbols) {\r\n\t\t\t\t\tObject.defineProperty(obj1, key, Object.getOwnPropertyDescriptor(obj2, key));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tobj1[key] = obj2[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\treturn obj1;\r\n};\r\n\r\n/**\r\n * Gets the match(es) between (members of) two values;\r\n * assertion optionally custom.\r\n *\r\n * @param mixed \t\t\tob1\r\n * @param mixed \t\t\tobj2\r\n * @param string|function\tassertion\r\n * @param bool\t\t\t\tnetComparison\r\n * @param bool\t\t\t\tcontrast\r\n * @param bool\t\t\t\treturnOnFirstFalse\r\n *\r\n * @return bool|array|object\r\n */\r\nconst _compareCallback = function(obj1, obj2, assertion = true, netComparison = true, contrast = false, returnOnFirstFalse = false) {\r\n\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\tvar result = [];\r\n\t\tvar contn = true;\r\n\t\tobj1.forEach(v1 => {\r\n\t\t\tif (!contn) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar testPass = false;\r\n\t\t\t_each(obj2, (k, v2) => {\r\n\t\t\t\tif (!testPass || (netComparison && _isTypeObject(v1))) {\r\n\t\t\t\t\ttestPass = assertion(v1, v2);\r\n\t\t\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\r\n\t\t\t\t\t\ttestPass = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_isTypeObject(testPass) && netComparison) {\r\n\t\t\t\t\t\t// Further recursions should use this testPass as v1\r\n\t\t\t\t\t\tv1 = testPass;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (_isTypeObject(testPass)) {\r\n\t\t\t\tresult.push(netComparison ? testPass : v1);\r\n\t\t\t} else if (!_isBoolean(testPass)) {\r\n\t\t\t\tresult.push(testPass);\r\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\r\n\t\t\t\tresult.push(v1);\r\n\t\t\t} else if (returnOnFirstFalse) {\r\n\t\t\t\tcontn = false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\tif (_isObject(obj1) && _isObject(obj2)) {\r\n\t\tvar result = {};\r\n\t\tvar contn = true;\r\n\t\tObject.keys(obj1).forEach(k => {\r\n\t\t\tif (!contn) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar testPass = assertion(obj1[k], obj2[k]);;\r\n\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\r\n\t\t\t\ttestPass = false;\r\n\t\t\t}\r\n\t\t\tif (_isTypeObject(testPass)) {\r\n\t\t\t\tresult[k] = netComparison ? testPass : obj1[k];\r\n\t\t\t} else if (!_isBoolean(testPass)) {\r\n\t\t\t\tresult[k] = testPass;\r\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\r\n\t\t\t\tresult[k] = obj1[k];\r\n\t\t\t} else if (returnOnFirstFalse) {\r\n\t\t\t\tcontn = false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport {\r\n\t_from,\r\n\t_with,\r\n\t_each,\r\n\t_get,\r\n\t_set,\r\n\t_unset,\r\n\t_isset,\r\n\t_first,\r\n\t_last,\r\n\t_sample,\r\n\t_find,\r\n\t_getAllPropertyNames,\r\n\t_getPrototypeChain,\r\n\t_copyPlain,\r\n\t_copy,\r\n\t_merge,\r\n\t_inherit,\r\n\t_replace,\r\n\t_even,\r\n\t_match,\r\n\t_diff,\r\n\t_percentageMatch,\r\n\t_percentageDiff,\r\n\t_mergeCallback,\r\n\t_compareCallback,\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_all,\r\n\t_last,\r\n\t_slice\r\n} from './Arr.js';\r\nimport {\r\n\t_each,\r\n\t_merge,\r\n\t_mergeCallback\r\n} from './Obj.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Typechecks and other utils\r\n * ---------------------------\r\n */\r\n \r\n/**\r\n * Tells if val is of type \"string\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isString = function(val) {\r\n\treturn typeof val === 'string';\r\n};\r\n \r\n/**\r\n * Tells if val is of type \"number\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isNumber = function(val) {\r\n\treturn typeof val === 'number';\r\n};\r\n \r\n/**\r\n * Tells if val is of type \"string\" or a numeric string.\r\n * This holds true for both numbers and numeric strings.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isNumeric = function(val) {\r\n\treturn val !== true && val !== false && val !== null && val !== '' && !isNaN(val * 1);\r\n};\r\n\r\n/**\r\n * Tells if val is of type \"array\".\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isArray = function(val) {\r\n\treturn Array.isArray(val);\r\n};\r\n\r\n/**\r\n * Tells if val is \"array-like\".\r\n * This holds true for anything that has a length property.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isTypeArray = function(val) {\r\n\treturn !_isString(val) && !_isUndefined(val.length);\r\n};\r\n\r\n/**\r\n * Tells if val is pure object.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isObject = function(val) {\r\n\treturn !Array.isArray(val) && typeof val === 'object' && val;\r\n};\r\n\r\n/**\r\n * Tells if val is of type \"object\".\r\n * This holds true for anything object, including built-ins.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isTypeObject = function(val) {\r\n\treturn Array.isArray(val) || typeof val === 'object';\r\n};\r\n \r\n/**\r\n * Tells if val is of type \"function\".\r\n *\r\n * @param object \t\tval\r\n *\r\n * @return bool\r\n */\r\nconst _isFunction = function(val) {\r\n\treturn _isTypeFunction(val) || (val && {}.toString.call(val) === '[object function]');\r\n};\r\n\r\n/**\r\n * Tells if val is of type \"function\".\r\n * This holds true for both regular functions and classes.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isTypeFunction = function(val) {\r\n\treturn typeof val === 'function';\r\n};\r\n \r\n/**\r\n * Tells if val is of type \"class\".\r\n *\r\n * @param object \t\tval\r\n *\r\n * @return bool\r\n */\r\nconst _isClass = function(val) {\r\n\treturn _isTypeFunction(val) && /^class\\s/.test(Function.prototype.toString.call(val));\r\n};\r\n \r\n/**\r\n * Tells if val is undefined or is of type \"undefined\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isUndefined = function(val) {\r\n\treturn arguments.length && (val === undefined || typeof val === 'undefined');\r\n};\r\n \r\n/**\r\n * Tells if val is undefined or is of type \"boolean\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isBoolean = function(val) {\r\n\treturn val === true || val === false;\r\n};\r\n \r\n/**\r\n * Tells if val is undefined or is null.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isNull = function(val) {\r\n\treturn val === null || val === '';\r\n};\r\n \r\n/**\r\n * Tells if val is empty in its own type.\r\n * This holds true for NULLs, UNDEFINED, FALSE, 0,\r\n * objects without keys, empty arrays.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nconst _isEmpty = function(val) {\r\n\treturn _isNull(val) || _isUndefined(val) || val === false || val === 0 \r\n\t\t|| (_isTypeObject(val) && !Object.keys(val).length);\r\n};\r\n \r\n/**\r\n * Returns the val's type.\r\n *\r\n * @param string \tval\r\n *\r\n * @return string\r\n */\r\nconst _getType = function(val) {\r\n\treturn typeof val;\r\n};\r\n\r\n/**\r\n * Tells if a given object has observability methods.\r\n *\r\n * @param mixed\t\tinput\r\n *\r\n * @return bool\r\n */\r\nconst _isObservable = function(input) {\r\n\treturn _isObject(input) && _all([\r\n\t\t'observe',\r\n\t\t'unobserve',\r\n\t\t'setOffsetParent',\r\n\t\t'getOffsetParent',\r\n\t], method => _isFunction(input[method]));\r\n};\r\n\r\n/**\r\n * Creats a proxy and keeps special reference to it.\r\n *\r\n * @param object\t target\r\n * @param object\t trap\r\n *\r\n * @return Proxy\r\n */\r\nconst _proxy = function(target, trap) {\r\n\tvar trapByCommons = {\r\n\t\tget: (target, prop) => {\r\n\t\t\tif (prop === '__proxyTargetByCommons') {\r\n\t\t\t\treturn target;\r\n\t\t\t}\r\n\t\t\tif (prop === '__proxyTrapByCommons') {\r\n\t\t\t\treturn trap;\r\n\t\t\t}\r\n\t\t\treturn trap.get ? trap.get(target, prop) : target[prop];\r\n\t\t},\r\n\t};\r\n\treturn new Proxy(target, _merge({}, trap, trapByCommons));\r\n};\r\n\r\n/**\r\n * Tells if a given object instance has been proxied.\r\n *\r\n * @param mixed\t\tinput\r\n *\r\n * @return bool\r\n */\r\nconst _isProxy = function(input) {\r\n\treturn (_isObject(input) && input.__proxyTargetByCommons) || false;\r\n};\r\n\r\n/**\r\n * Returns the proxy's target object as earlier saved.\r\n *\r\n * @param mixed\t\tproxy\r\n *\r\n * @return mixed\r\n */\r\nconst _getProxyTarget = function(instance) {\r\n\treturn _isProxy(instance) ? instance.__proxyTargetByCommons : undefined;\r\n};\r\n\r\n/**\r\n * Returns the proxy's trap object as earlier saved.\r\n *\r\n * @param mixed\t\tproxy\r\n *\r\n * @return mixed\r\n */\r\nconst _getProxyTrap = function(instance) {\r\n\treturn _isProxy(instance) ? instance.__proxyTrapByCommons : undefined;\r\n};\r\n\r\n/**\r\n * A multi-inheritance implementstion.\r\n *\r\n * @param array\t \t...classes\r\n *\r\n * @return object\r\n */\r\nconst _mixin = function(...classes) {\r\n\tvar Traps = {};\r\n\tvar RetrnDirective = 'last';\r\n\tif (_isArray(arguments[0])) {\r\n\t\tclasses = arguments[0];\r\n\t\tTraps = arguments[1];\r\n\t\tif (arguments[2]) {\r\n\t\t\tRetrnDirective = arguments[2];\r\n\t\t}\r\n\t}\r\n\tvar Base = _last(classes);\r\n\tvar supersMap = {};\r\n\tvar Mixin = class extends Base {\r\n\t\tconstructor(...args) {\r\n\t\t\tsuper(...args);\r\n\t\t}\r\n\t};\r\n\t// A trap for _instanceof()\r\n\tMixin.prototypes = classes;\r\n\t// ---------------------\r\n\t// Extend (merge) properties but keep methods\r\n\tclasses.forEach(_class => {\r\n\t\t// Copy const members\r\n\t\t_mergeCallback([Mixin, _class], (key, obj1, obj2) => ['name', 'prototype', 'prototypes', 'length'].indexOf(key) === -1);\r\n\t\t_mergeCallback([Mixin.prototype, _class.prototype], (key, obj1, obj2) => {\r\n\t\t\tif (['prototype', 'prototypes'].indexOf(key) === -1) {\r\n\t\t\t\tif (_isFunction(obj2[key])) {\r\n\t\t\t\t\tif (_isArray(supersMap[key])) {\r\n\t\t\t\t\t\tsupersMap[key].push(obj2[key]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsupersMap[key] = [obj2[key]];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}, true/*deepProps*/);\r\n\t});\r\n\t// Extend (proxy) methods\r\n\t_each(supersMap, (name, supers) => {\r\n\t\tif (name === 'constructor') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// NOTE: this must not be defined as an arrow function\r\n\t\t// for the benefit of the \"this\".\r\n\t\tMixin.prototype[name] = function(...args) {\r\n\t\t\tif (Object.hasOwnProperty(Traps, name) && _isFunction(Traps[name])) {\r\n\t\t\t\t// Wrap a call to the trap...\r\n\t\t\t\t// So mixin supers are passed to traps\r\n\t\t\t\treturn Traps[name].call(this, supers, ...args);\r\n\t\t\t} else {\r\n\t\t\t\t// Call each super and return\r\n\t\t\t\t// the last one's return value\r\n\t\t\t\tvar supersReturnValues = [];\r\n\t\t\t\tsupers.forEach(supr => {\r\n\t\t\t\t\tsupersReturnValues.push(supr.call(this, ...args));\r\n\t\t\t\t})\r\n\t\t\t\treturn _last(supersReturnValues);\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\treturn Mixin;\r\n};\r\n\r\n/**\r\n * Instanceof that supports our multi-inheritance implementstion.\r\n *\r\n * @param object\t \tobj1\r\n * @param object\t \tclassB\r\n *\r\n * @return bool\r\n */\r\nconst _instanceof = function(obj, classB) {\r\n\tif (!obj) {\r\n\t\treturn false;\r\n\t}\r\n\tif (obj instanceof classB) {\r\n\t\treturn true;\r\n\t}\r\n\tvar mixinTest = classA => {\r\n\t\twhile (classA && classA !== Function.prototype) {\r\n\t\t\tif (classA === classB || (classA.prototypes && classA.prototypes.reduce((prevAns, prototype) => prevAns || (prototype === classB) || mixinTest(prototype), false))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tclassA = Object.getPrototypeOf(classA);\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\treturn mixinTest(obj.constructor);\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport {\r\n\t_isString,\r\n\t_isNumber,\r\n\t_isNumeric,\r\n\t_isArray,\r\n\t_isTypeArray,\r\n\t_isObject,\r\n\t_isTypeObject,\r\n\t_isFunction,\r\n\t_isTypeFunction,\r\n\t_isClass,\r\n\t_isUndefined,\r\n\t_isBoolean,\r\n\t_isNull,\r\n\t_isEmpty,\r\n\t_getType,\r\n\t_isObservable,\r\n\t_isProxy,\r\n\t_getProxyTarget,\r\n\t_getProxyTrap,\r\n\t_proxy,\r\n\t_mixin,\r\n\t_instanceof\r\n};","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_isArray,\r\n\t_isBoolean,\r\n\t_isEmpty,\r\n\t_isNumber,\r\n\t_isNumeric,\r\n\t_isObject,\r\n\t_isString,\r\n\t_isTypeArray,\r\n\t_isUndefined\r\n} from './Js.js';\r\nimport {\r\n\t_each\r\n} from './Obj.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Array utils\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\n/**\r\n * Casts an array-like object to an array.\r\n *\r\n * @param mixed \tval\r\n *\r\n * @return array\r\n */\r\nconst _from = function(val) {\r\n\tif (_isArray(val)) {\r\n\t\treturn val;\r\n\t};\r\n\tif (val !== false && val !== 0 && _isEmpty(val)) {\r\n\t\treturn [];\r\n\t};\r\n\tif (_isTypeArray(val)) {\r\n\t\treturn Array.prototype.slice.call(val);\r\n\t};\r\n\tif (_isObject(val)) {\r\n\t\treturn Object.values(val);\r\n\t};\r\n\treturn [val];\r\n};\r\n\r\n/**\r\n * Returns THE FIRST ENTRY OR A NUMBER OF ENTRIES counting forward from the begining.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nconst _first = function(arr, amount = 1) {\r\n\tvar count = 0;\r\n\tarr.forEach(itm => {\r\n\t\tcount ++;\r\n\t});\r\n\tvar firsts = arr.slice(arr.length - count, amount);\r\n\treturn arguments.length > 1 ? firsts : firsts[0];\r\n};\r\n\r\n/**\r\n * Returns THE LAST ENTRY OR A NUMBER OF ENTRIES counting forward to the end.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nconst _last = function(arr, amount = 1) {\r\n\treturn arguments.length > 1\r\n\t\t? _first(arr.slice().reverse(), amount).reverse()\r\n\t\t: _first(arr.slice().reverse());\r\n};\r\n\r\n/**\r\n * Gets the average of an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nconst _avg = function(arr) {\r\n\treturn arr.length ? _sum(arr) / arr.length : 0;\r\n};\r\n\r\n/**\r\n * Gets the maximum of an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nconst _max = function(arr) {\r\n\tarr = arr.slice();\r\n\treturn arr.reduce((v1, v2) => Math.max(v1, v2), arr.shift());\r\n};\r\n\r\n/**\r\n * Gets the minimum of an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nconst _min = function(arr) {\r\n\tarr = arr.slice();\r\n\treturn arr.reduce((v1, v2) => Math.min(v1, v2), arr.shift());\r\n};\r\n\r\n/**\r\n * Gets one or more random values from an array.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nconst _rand = function(arr, amount = 1) {\r\n\tvar result = [];\r\n\tvar rand = null;\r\n\twhile (result.length < amount && (rand = arr[Math.floor(Math.random() * arr.length)]) && result.indexOf(rand) === -1) {\r\n\t\tresult.push(rand);\r\n\t};\r\n\treturn arguments.length > 1 ? result : result[0];\r\n};\r\n\r\n/**\r\n * Sums an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nconst _sum = function(arr) {\r\n\tarr = arr.slice();\r\n\treturn arr.reduce((total, v) => total + v, arr.shift());\r\n};\r\n\r\n/**\r\n * Array slicing with support for negative offsets.\r\n *\r\n * @param array\t \t\t\t\tarr\r\n * @param array\t \t\t\t\toffset\r\n * @param array\t \t\t\t\tlengthOrOffset2\r\n *\t *\r\n * @return array\r\n */\r\nconst _slice = function(arr, offset = 0, lengthOrOffset2 = null) {\r\n\tif (arguments.length > 1) {\r\n\t\toffset = offset < 0 ? (arr.length + offset)/*subtraction eventually*/ : offset;\r\n\t\tif (arguments.length > 2) {\r\n\t\t\tlengthOrOffset2 = lengthOrOffset2 < 0 ? (arr.length + lengthOrOffset2)/*subtraction eventually*/ - offset : lengthOrOffset2;\r\n\t\t};\r\n\t};\r\n\treturn arr.slice(offset, lengthOrOffset2);\r\n};\r\n\r\n/**\r\n * 1. Returns the ENTRY preceding (either the FIRST or the LAST instance of) the reference.\r\n * 2. Returns A NUMBER OF ENTRIES counting backwards from (either the FIRST or the LAST instance of) the given reference.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \treference\r\n * @param int|bool \tlength\r\n * @param bool\t \trotate\r\n * @param bool\t \tlastReference\r\n *\r\n * @return mixed|array\r\n */\r\nconst _preceding = function(arr, reference, length = false, rotate = false, lastReference = false) {\r\n\tif (arr.indexOf(reference) === -1) {\r\n\t\treturn length ? [] : undefined;\r\n\t}\r\n\tvar amount = length === true ? arr.length - 1 : (length === false ? 1 : length);\r\n\tvar arr = arr.slice().reverse();\r\n\tvar from = lastReference ? arr.lastIndexOf(reference) + 1 : arr.indexOf(reference) + 1;\r\n\tvar before = !_isUndefined(reference) ? arr.slice(from, from + amount) : [];\r\n\tif (rotate && before.length < amount && before.length < arr.length) {\r\n\t\tbefore = before.concat(arr.slice(0, amount - before.length));\r\n\t};\r\n\treturn length ? before : before[0];\r\n};\r\n\t\r\n/**\r\n * 1. Returns the ENTRY following (either the FIRST or the LAST instance of) the reference.\r\n * 2. Returns A NUMBER OF ENTRIES counting forwards from (either the FIRST or the LAST instance of) the given reference.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \treference\r\n * @param int|bool \tlength\r\n * @param bool\t \trotate\r\n * @param bool\t \tlastReference\r\n *\r\n * @return mixed|array\r\n */\r\nconst _following = function(arr, reference, length = false, rotate = false, lastReference = false) {\r\n\tif (arr.indexOf(reference) === -1) {\r\n\t\treturn length ? [] : undefined;\r\n\t}\r\n\tvar amount = length === true ? arr.length - 1 : (length === false ? 1 : length);\r\n\tvar from = lastReference ? arr.lastIndexOf(reference) + 1 : arr.indexOf(reference) + 1;\r\n\tvar after = !_isUndefined(reference) ? arr.slice(from, from + amount) : [];\r\n\tif (rotate && after.length < amount && after.length < arr.length) {\r\n\t\tafter = after.concat(arr.slice(0, amount - after.length));\r\n\t};\r\n\treturn length ? after : after[0];\r\n};\r\n\r\n/**\r\n * Alias of _preceding() but uses last instance of reference.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \treference\r\n * @param int|bool \tlength\r\n * @param bool\t \trotate\r\n *\r\n * @return mixed|array\r\n */\r\nconst _precedingLast = function(arr, reference, length = false, rotate = false) {\r\n\treturn _preceding(arr, reference, length, rotate, true/*lastReference*/);\r\n};\r\n\r\n/**\r\n * Alias of _following() but uses last instance of reference.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \treference\r\n * @param int|bool \tlength\r\n * @param bool\t \trotate\r\n *\r\n * @return mixed|array\r\n */\r\nconst _followingLast = function(arr, reference, length = false, rotate = false) {\r\n\treturn _following(arr, reference, length, rotate, true/*lastReference*/);\r\n};\r\n\r\n/**\r\n * Returns ALL THE ENTRIES from (either the FIRST or the LAST instance of) the given reference UNTIL reference2,\r\n * in ltr/rtl direction.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \treference\r\n * @param mixed\t \treference2\r\n * @param bool\t \trtl\r\n * @param bool\t \trotate\r\n * @param bool\t \tlastReference\r\n *\r\n * @return array\r\n */\r\nconst _between = function(arr, reference, reference2, rtl = false, rotate = false, lastReference = false) {\r\n\tvar from = lastReference ? arr.lastIndexOf(reference) : arr.indexOf(reference);\r\n\tvar to = lastReference ? arr.lastIndexOf(reference2) : arr.indexOf(reference2);\r\n\tif (rtl) {\r\n\t\tvar length = to > from \r\n\t\t\t? from/*the begining backward*/ + arr.length - to/*the other half*/\r\n\t\t\t: from - to;\r\n\t\treturn _preceding(arr, reference, length, rotate, lastReference);\r\n\t};\r\n\tvar length = to < from \r\n\t\t? arr.length - from - 1/*the remainder forward*/ + to + 1/*the other half*/\r\n\t\t: to - from;\r\n\treturn _following(arr, reference, length, rotate, lastReference);\r\n};\r\n\r\n/**\r\n * Returns the intersection of two arrays;\r\n * optionally using a custom matching function.\r\n *\r\n * @param array \tarr\r\n * @param array\t \tarr2\r\n * @param function \tcallback\r\n *\r\n * @return array\r\n */\r\nconst _intersect = function(arr, arr2, callback = null) {\r\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \r\n\t\t? arr2.filter(val2 => callback(val1, val2)).length \r\n\t\t: arr2.indexOf(val1) !== -1\r\n\t);\r\n};\r\n\r\n/**\r\n * Returns the difference of two arrays;\r\n * optionally using a custom matching function.\r\n *\r\n * @param array \tarr\r\n * @param array\t \tarr2\r\n * @param function \tcallback\r\n *\r\n * @return array\r\n */\r\nconst _difference = function(arr, arr2, callback = null) {\r\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \r\n\t\t? arr2.filter(val2 => callback(val1, val2)).length \r\n\t\t: arr2.indexOf(val1) === -1\r\n\t);\r\n};\r\n\r\n/**\r\n * Returns a list of items that pass a callback test.\r\n *\r\n * @param array\t \t\t\t\tarr\r\n * @param function\t\t\t\tcallback\r\n *\t *\r\n * @return array\r\n */\r\nconst _filter = function(arr, callback) {\r\n\treturn _divide(arr, callback)[0];\r\n};\r\n\r\n/**\r\n * Makes a separation between items that pass a callback test and those that fail.\r\n *\r\n * @param array\t \t\t\t\tarr\r\n * @param function\t\t\t\tcallback\r\n *\t *\r\n * @return array\r\n */\r\nconst _divide = function(arr, callback) {\r\n\tvar passes = [];\r\n\tvar failures = [];\r\n\tvar length = arr.length;\r\n\tfor (i = 0; i < length; i++) {\r\n\t\tif (callback(arr[i])) {\r\n\t\t\tpasses.push(arr[i]);\r\n\t\t} else {\r\n\t\t\tfailures.push(arr[i]);\r\n\t\t};\r\n\t};\r\n\treturn [passes, failures];\r\n};\r\n\r\n/**\r\n * Flattens a nested array to the given depth.\r\n *\r\n * @param array \tarr\r\n * @param int \t \tdepth\r\n * @param bool \t \twithObjects\r\n *\r\n * @return array\r\n */\r\nconst _flatten = function(arr, depth = 1, withObjects = true) {\r\n\tif (!_isNumeric(depth) || depth <= 0) {\r\n\t\treturn arr;\r\n\t};\r\n\tif (!_isArray(arr) && _isObject(arr) && withObjects) {\r\n\t\tarr = Object.values(arr);\r\n\t};\r\n\tif (!_isArray(arr)) {\r\n\t\treturn arr;\r\n\t};\r\n\treturn arr.reduce((acc, val) => _isArray(val) || (_isObject(val) && withObjects) \r\n\t\t? acc.concat(_flatten(!_isArray(val) ? Object.values(val) : val, depth - 1, withObjects)) \r\n\t\t: acc.concat(val), []);\r\n};\r\n\r\n/**\r\n * Sorts a list performantly.\r\n *\r\n * @param array\t \t\t\t\t\tarr\r\n * @param string\t \t\t\t\torder\t\t\tASC|DESC \r\n * @param function\t\t\t\t\tcallback\r\n *\r\n * @return array\r\n */\r\nconst _sort = function(arr, order, callback = null) {\r\n\tvar _arr = [];\r\n\t// Make a shallow copy\r\n\tvar length = arr.length;\r\n\tfor (var i = 0; i < length; i ++) {\r\n\t\t_arr.push({index: i, value: callback ? callback(arr[i]) : arr[i]});\r\n\t};\r\n\t_arr.sort(function(a, b) {\r\n\t\t// Using localeCompare if possible\r\n\t\tif (_isString(a.value) && \"\".localeCompare) {\r\n\t\t\treturn a.value.localeCompare(b.value);\r\n\t\t};\r\n\t\treturn a.value === b.value ? 0 : a.value > b.value ? 1 : -1;\r\n\t});\r\n\tif ((order || '').trim().toLowerCase() === 'desc') {\r\n\t\t_arr = _arr.reverse();\r\n\t};\r\n\t// Fill the order with actual values\r\n\treturn _arr.map(itm => arr[itm.index]);\r\n};\r\n\r\n/**\r\n * Returns a list of unique items.\r\n *\r\n * @param array\t \t\t\t\tarr\r\n *\t *\r\n * @return array\r\n */\r\nconst _unique = function(arr) {\r\n\tconst distinct = (value, index, self) => {\r\n\t\treturn self.indexOf(value) === index;\r\n\t};\r\n\treturn arr.filter(distinct);\r\n};\r\n\r\n/**\r\n * Adds an item if not already exist.\r\n *\r\n * @param array \tarr\r\n * @param array\t \t...itms\r\n *\r\n * @return array\r\n */\r\nconst _pushUnique = function(arr, ...items) {\r\n\titems.forEach(itm => {\r\n\t\tif (arr.indexOf(itm) < 0) {\r\n\t\t\tarr.push(itm);\r\n\t\t}\r\n\t});\r\n\treturn arr;\r\n};\r\n\r\n/**\r\n * Adds items that do not already exist.\r\n *\r\n * @param array \tarr\r\n * @param array\t \t...arrs\r\n *\r\n * @return array\r\n */\r\nconst _concatUnique = function(arr, ...arrs) {\r\n\tarrs.forEach(_arr => {\r\n\t\t_arr.forEach(itm => _pushUnique(arr, ..._from(_arr)));\r\n\t});\r\n\treturn arr;\r\n};\r\n\r\n/**\r\n * Removes instances of reference up to <limit> times.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \titm\r\n * @param int|bool \tlimit\r\n *\r\n * @return array\r\n */\r\nconst _remove = function(arr, itm, limit = false) {\r\n\tvar i = arr.indexOf(itm);\r\n\twhile (i > -1 && (limit || limit === false)) {\r\n\t\tarr.splice(i, 1);\r\n\t\tif (limit > 0) {\r\n\t\t\tlimit --;\r\n\t\t};\r\n\t\ti = arr.indexOf(itm);\r\n\t};\r\n\treturn arr;\r\n};\r\n\r\n/**\r\n * Removes all instances of each item.\r\n *\r\n * @param array \tarr\r\n * @param array\t \titms\r\n *\r\n * @return array\r\n */\r\nconst _exclude = function(arr, ...itms) {\r\n\titms.forEach(itm => _remove(arr, itm));\r\n\treturn arr;\r\n};\r\n\r\n/**\r\n * Removes an item.\r\n *\r\n * @param array \tarr\r\n * @param array\t \titms\r\n * @param array\t \treplacements\r\n *\r\n * @return array\r\n */\r\nconst _replace = function(arr, itms, replacements = []) {\r\n\tif (arguments.length === 2) {\r\n\t\titms.forEach((itm, i) => {arr[i] = itm;});\r\n\t\treturn arr;\r\n\t};\r\n\t_each(itms, (k, reference) => {\r\n\t\tvar i = arr.indexOf(reference);\r\n\t\tif (i !== -1) {\r\n\t\t\tarr[i] = replacements[k];\r\n\t\t};\r\n\t});\r\n\treturn arr;\r\n};\r\n\r\n/**\r\n * Adds A LIST OF ITEMS before the FIRST instance of the given reference.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \treference\r\n * @param array\t \titms\r\n * @param bool\t \tlastReference\r\n *\r\n * @return array\r\n */\r\nconst _concatBefore = function(arr, reference, itms, lastReference = false) {\r\n\tvar secondHalf = arr.splice(lastReference ? arr.lastIndexOf(reference) : arr.indexOf(reference));\r\n\titms.concat(secondHalf).forEach(function(itm) {\r\n\t\tarr.push(itm);\r\n\t});\r\n\treturn arr;\r\n};\r\n\r\n/**\r\n * Adds A LIST OF ITEMS after the FIRST instance of the given reference.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \treference\r\n * @param array\t \titms\r\n * @param bool\t \tlastReference\r\n *\r\n * @return array\r\n */\r\nconst _concatAfter = function(arr, reference, itms, lastReference = false) {\r\n\tvar secondHalf = arr.splice(lastReference ? arr.lastIndexOf(reference) + 1 : arr.indexOf(reference) + 1);\r\n\titms.concat(secondHalf).forEach(function(itm) {\r\n\t\tarr.push(itm);\r\n\t});\r\n\treturn arr;\r\n};\r\n\r\n/**\r\n * Adds A LIST OF ITEMS before the LAST instance of the given reference.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \treference\r\n * @param array\t \titms\r\n *\r\n * @return array\r\n */\r\nconst _concatBeforeLast = function(arr, reference, itms) {\r\n\treturn _concatBefore(arr, reference, itms, true/*lastReference*/);\r\n};\r\n\r\n/**\r\n * Adds A LIST OF ITEMS after the LAST instance of the given reference.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \treference\r\n * @param array\t \titms\r\n *\r\n * @return array\r\n */\r\nconst _concatAfterLast = function(arr, reference, itms) {\r\n\treturn _concatAfter(arr, itms, reference, true/*lastReference*/);\r\n};\r\n\r\n/**\r\n * Tells if ALL items pass the test.\r\n *\r\n * @param array \tarr\r\n * @param function \tcallback\r\n *\r\n * @return bool\r\n */\r\nconst _all = function(arr, callback) {\r\n\treturn arr.reduce((prevTest, itm) => prevTest && callback(itm), true);\r\n};\r\n\r\n/**\r\n * Tells if ANY items pass the test.\r\n *\r\n * @param array \tarr\r\n * @param function \tcallback\r\n *\r\n * @return bool\r\n */\r\nconst _any = function(arr, callback) {\r\n\treturn arr.reduce((prevTest, itm) => prevTest || callback(itm), false);\r\n};\r\n\r\n/**\r\n * Calls callback with each item in the list and waits inbetween for each callback's promise to resolve.\r\n * The delay parameter may be used solely as the wait or as an addition to the promise-based wait.\r\n *\r\n * @param int|string|object \tinterval\r\n *\r\n * @return new Promise\r\n */\r\nconst _inSequence = function(arr, callback, timing) {\r\n\tif (!_isArray(arr)) {\r\n\t\treturn;\r\n\t};\r\n\tif (_isObject(timing)) {\r\n\t\tvar sync = timing.sync || false;\r\n\t\tvar delay = timing.delay || 0;\r\n\t\tvar delayAlways = timing.delayAlways || false;\r\n\t} else {\r\n\t\tvar sync = _isBoolean(timing) || timing === 'last' ? timing : false;\r\n\t\tvar delay = _isNumber(timing) ? timing : 0;\r\n\t\tvar delayAlways = false;\r\n\t};\r\n\tvar items = arr;\r\n\tvar promise = new Promise(function(resolve, reject) {\r\n\t\tif (items.length) {\r\n\t\t\tvar call = function(i) {\r\n\t\t\t\tvar advance = () => {\r\n\t\t\t\t\t// Delay first before asking items.length\r\n\t\t\t\t\t// Good for progressivly adding new items\r\n\t\t\t\t\t// -----------------------\r\n\t\t\t\t\tif (delayAlways) {\r\n\t\t\t\t\t\tif (delay) {\r\n\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\tif (items.length > i + 1) {\r\n\t\t\t\t\t\t\t\t\tcall(i + 1);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tresolve()\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}, delay);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (items.length > i + 1) {\r\n\t\t\t\t\t\t\t\tcall(i + 1);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tresolve()\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t// Ask items.length first before delay\r\n\t\t\t\t\t// Good for when delay should only be BETWEEN items\r\n\t\t\t\t\t// -----------------------\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (items.length > i + 1) {\r\n\t\t\t\t\t\t\tif (delay) {\r\n\t\t\t\t\t\t\t\tsetTimeout(() => {call(i + 1);}, delay);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcall(i + 1);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresolve()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t\tvar ret = callback(items[i]);\r\n\t\t\t\tif (ret instanceof Promise && (sync === true || (sync === 'last' && i === items.length - 1))) {\r\n\t\t\t\t\t// On any of the outcomes...\r\n\t\t\t\t\tret.then(advance);\r\n\t\t\t\t\tret.catch(advance);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tadvance();\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t\tcall(0);\r\n\t\t} else {\r\n\t\t\tresolve();\r\n\t\t};\r\n\t});\r\n\treturn promise;\r\n};\r\n\r\n/**\r\n * @export\r\n */\r\nexport {\r\n\t_from,\r\n\t_first,\r\n\t_last,\r\n\t_avg,\r\n\t_max,\r\n\t_min,\r\n\t_rand,\r\n\t_sum,\r\n\t_slice, \r\n\t_preceding,\r\n\t_following,\r\n\t_precedingLast,\r\n\t_followingLast,\r\n\t_between,\r\n\t_intersect,\r\n\t_difference,\r\n\t_filter,\r\n\t_divide,\r\n\t_flatten,\r\n\t_sort,\r\n\t_unique,\r\n\t_pushUnique,\r\n\t_concatUnique,\r\n\t_remove,\r\n\t_exclude,\r\n\t_replace,\r\n\t_concatBefore,\r\n\t_concatAfter,\r\n\t_concatBeforeLast,\r\n\t_concatAfterLast, \r\n\t_all,\r\n\t_any,\r\n\t_inSequence\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {_isObject} from '@onephrase/commons/src/Js.js';\r\nimport {_even} from '@onephrase/commons/src/Obj.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ExprInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class {\r\n\t\r\n\t/**\r\n\t * Compares the current instance with another object.\r\n\t *\r\n\t * @param object Expr\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\teven(Expr) {\r\n\t\tif (_isObject(Expr) && Expr.jsenType === this.jsenType) {\r\n\t\t\treturn _even(Expr, this);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Inherits properties from a super Expr.\r\n\t *\r\n\t * @param ExprInterface Super\r\n\t *\r\n\t * @return this\r\n\t */\r\n\tinherit(Super) {\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds comments to the instance.\r\n\t *\r\n\t * @param string\t comments\r\n\t *\r\n\t * @return this\r\n\t */\r\n\twithComments(comments) {\r\n\t\tif (!this.meta) {\r\n\t\t\tthis.meta = {};\r\n\t\t}\r\n\t\tthis.meta.comments = comments;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds variables to the instance.\r\n\t *\r\n\t * @param array\t\t vars\r\n\t *\r\n\t * @return this\r\n\t */\r\n\twithVars(vars) {\r\n\t\tif (!this.meta) {\r\n\t\t\tthis.meta = {};\r\n\t\t}\r\n\t\tthis.meta.vars = vars;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Evaluates the expression instance for a result,\r\n\t * optionally in the context of an object.\r\n\t *\r\n\t * @param object context\r\n\t *\r\n\t * @return mixed\r\n\t */\r\n\t//eval(context = null, callback = null)\r\n\t\r\n\t/**\r\n\t * Serializes the expression instance back to a string,\r\n\t * optionally in the context of an object.\r\n\t *\r\n\t * @param object context\r\n\t *\r\n\t * @return string\r\n\t */\r\n\t//toString(context = null)\r\n\t\r\n\t/**\r\n\t * SAttempts to parse a string into the class instance.\r\n\t *\r\n\t * @param string expr\r\n\t * @param object params\r\n\t *\r\n\t * @return ExprInterface\r\n\t */\r\n\t//static parse(expr, params = {})\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AssignmentInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'AssignmentExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ReferenceInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Reference'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * DeletionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'DeleteExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * CallInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'CallExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_remove\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_isArray,\r\n\t_instanceof\r\n} from '@onephrase/commons/src/Js.js';\r\nimport AssignmentInterface from './Expr/AssignmentInterface.js';\r\nimport ReferenceInterface from './Expr/ReferenceInterface.js';\r\nimport DeletionInterface from './Expr/DeletionInterface.js';\r\nimport CallInterface from './Expr/CallInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Jsen (base) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Jsen = class {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, Parsers, params = {}, Static = Jsen) {\r\n\t\tif (!params.meta) {\r\n\t\t\tparams.meta = {vars: []};\r\n\t\t}\r\n\t\tif (expr.length) {\r\n\t\t\tvar parsers = Object.values(Parsers || Static.grammars);\r\n\t\t\tfor (var i = 0; i < parsers.length; i ++) {\r\n\t\t\t\t// From this point forward, all vars is within current scope\r\n\t\t\t\tvar varsScope = params.meta && _isArray(params.meta.vars) ? params.meta.vars.length : 0;\r\n\t\t\t\tvar parsed = parsers[i].parse(expr, (_expr, _Parsers) => Jsen.parse(_expr, _Parsers, params, Static));\r\n\t\t\t\t// Add/remove vars to scope\r\n\t\t\t\tif (parsed && params.meta) {\r\n\t\t\t\t\tif (!parsed.meta) {\r\n\t\t\t\t\t\tparsed.meta = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Reap vars into scope expr\r\n\t\t\t\t\tparsed.meta.vars = params.meta.vars.slice(varsScope);\r\n\t\t\t\t\t// Add vars to scope\r\n\t\t\t\t\tif (_instanceof(parsed, ReferenceInterface) || _instanceof(parsed, CallInterface)) {\r\n\t\t\t\t\t\t_remove(parsed.meta.vars, parsed.context);\r\n\t\t\t\t\t\t_remove(params.meta.vars, parsed.context);\r\n\t\t\t\t\t\tparams.meta.vars.push(parsed);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (parsed && params.explain) {\r\n\t\t\t\t\tconsole.log(expr, ' >>------------->> ', parsed.jsenType);\r\n\t\t\t\t}\r\n\t\t\t\tif ((parsed instanceof AssignmentInterface || parsed instanceof DeletionInterface) \r\n\t\t\t\t&& (!params || !params.mutates)) {\r\n\t\t\t\t\tthrow new Error('[Permission error:] ' + expr);\r\n\t\t\t\t}\r\n\t\t\t\tif (parsed) {\r\n\t\t\t\t\treturn parsed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (params.assert === false) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new Error('[Syntax error:] ' + expr);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Jsen;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_isString,\r\n\t_isUndefined\r\n} from '@onephrase/commons/src/Js.js';\r\nimport {\r\n\t_from,\r\n\t_flatten,\r\n\t_first,\r\n\t_last\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_merge,\r\n\t_even,\r\n\t_copyPlain\r\n} from '@onephrase/commons/src/Obj.js';\r\n\r\n/**\r\n * --------------------------\r\n * TOKENIZER\r\n * --------------------------\r\n */\r\n\r\nconst Lexer = class {\r\n\r\n\t/**\r\n\t * Factory method.\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic lex(str, delims, options) {\r\n\t\tif (!_isString(str)) {\r\n\t\t\tthrow new Error('Argument1 must be a string!');\r\n\t\t}\r\n\t\t// CREATE NEW -----------------------------\r\n\t\tvar instance = new Lexer(str, options);\r\n\t\t// GIVE CACHE -----------------------------\r\n\t\tLexer.$cache[str] = Lexer.$cache[str] || [];\r\n\t\tLexer.$cache[str].push(instance);\r\n\t\t// RETURN NEW -----------------------------\r\n\t\treturn instance.lex(delims);\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for .split().\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic split(str, delims, options) {\r\n\t\treturn Lexer.lex(str, delims, options).tokens;\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for .match().\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic match(str, delims, options) {\r\n\t\treturn Lexer.lex(str, delims, options).matches;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a lexer instance on a string with the given options.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions:\r\n\t * @param string \t\tblocks\t\t\t\tThe strings that begin and end a nested structure\r\n\t * @param number \t\tlimit\t\t\t\tMax results to return\r\n\t * @param string \t\tbackreference\t\tA character like (\\) that prefixes non-delim characters\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tconstructor(str, options) {\r\n\t\tif (!_isString(str)) {\r\n\t\t\tthrow new Error('Lexer requires the first argument to be a string.');\r\n\t\t}\r\n\t\tthis.$str = str;\r\n\t\tthis.$options = options || {};\r\n\t\tif (!this.$options.blocks) {\r\n\t\t\tthis.$options.blocks = Lexer.$blocks;\r\n\t\t}\r\n\t\tif (!this.$options.quotes) {\r\n\t\t\tthis.$options.quotes = Lexer.$quotes;\r\n\t\t}\r\n\t\tif (!this.$options.comments) {\r\n\t\t\tthis.$options.comments = Lexer.$comments;\r\n\t\t}\r\n\t\tthis.$cache = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the instance string on the given delimeters.\r\n\t *\r\n\t * This method supports static calling,\r\n\t * in which case a string is required as the first argument.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tlex(delims, options) {\r\n\t\tvar runtime = {\r\n\t\t\tdelims: _from(delims),\r\n\t\t\toptions: _merge(true, {}, this.$options, options || {}),\r\n\t\t\tnesting: [],\r\n\t\t\tmaxDepth: 0,\r\n\t\t\tcomments: [],\r\n\t\t\ttokens: [],\r\n\t\t\tmatches: [],\r\n\t\t\tmatchesi: {},\r\n\t\t};\r\n\t\t// ASK INSTANCE CACHE ---------------------------\r\n\t\tif (runtime.options.cache !== false) {\r\n\t\t\tfor (var i = 0; i < this.$cache.length; i ++) {\r\n\t\t\t\tif (_even(this.$cache[i].delims, runtime.delims) && _even(this.$cache[i].options, runtime.options)) {\r\n\t\t\t\t\treturn _copyPlain(this.$cache[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// EVALUATE NEW --------------------------------\r\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\r\n\t\tthis._evalCharsAt(runtime, 0);\r\n\t\tif (runtime.nesting.length) {\r\n\t\t\tthrow new Error('Error parsing the string: ' + this.$str + '. Unterminated blocks: ' + _flatten(runtime.nesting).join(', ') + '');\r\n\t\t}\r\n\t\t// GIVE CACHE ----------------------------------\r\n\t\tif (runtime.options.cache !== false) {\r\n\t\t\tthis.$cache.push(runtime);\r\n\t\t}\r\n\t\t// RETURN NEW ----------------------------------\r\n\t\treturn runtime;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: evaluates and handles the character on the current cursor.\r\n\t * Advances the cursor.\r\n\t *\r\n\t * @param object \truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return void\r\n\t */\r\n\t_evalCharsAt(runtime, i) {\r\n\t\tif (i >= this.$str.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar charWidth = 1;\r\n\t\tvar commentTest = {}, quoteTest = {}, nestingTest = {};\r\n\t\t// Quotes inside comments must be ignored\r\n\t\tif (!runtime.openComment) {\r\n\t\t\tquoteTest = this._testQuotes(runtime, i);\r\n\t\t}\r\n\t\t// Comments inside quotes must be ignored\r\n\t\tif (!runtime.openQuote) {\r\n\t\t\tcommentTest = this._testComments(runtime, i);\r\n\t\t}\r\n\t\t// Save comments\r\n\t\tif (runtime.openComment || commentTest.ending) {\r\n\t\t\t// Save only outer comments\r\n\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\r\n\t\t\t\tvar chars = commentTest.starting || commentTest.ending || this.$str[i];\r\n\t\t\t\tcharWidth = chars.length;\r\n\t\t\t\tthis._push(runtime, chars, 'comments');\r\n\t\t\t\tif (runtime.options.preserveComments) {\r\n\t\t\t\t\tthis._push(runtime, chars);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\t}\r\n\t\t} else if (runtime.openQuote || quoteTest.ending) {\r\n\t\t\t// Yes add quotes\r\n\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t} else if (runtime.options.limit && runtime.matches.length === runtime.options.limit) {\r\n\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\treturn this._evalCharsAt(runtime, i + 1);\r\n\t\t} else {\r\n\t\t\t// Nesting tags inside comments and quotes have been ignored\r\n\t\t\tnestingTest = this._testNesting(runtime, i);\r\n\t\t\t// ---------------------\r\n\t\t\t// STOP ON THIS CHARACTER...?\r\n\t\t\t// ---------------------\r\n\t\t\tvar nestingTest = this._testNesting(runtime, i);\r\n\t\t\t// STOP CHAR(S)? at top level?\r\n\t\t\tvar stopChar = this._testChars(runtime.options.stopChars || [], runtime, i);\r\n\t\t\tif (!runtime.nesting.length && stopChar !== false) {\r\n\t\t\t\truntime.options.stopChar = stopChar;\r\n\t\t\t\truntime.options.stopCharForward = this.$str.substr(i);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// ---------------------\r\n\t\t\t// Match and split now...\r\n\t\t\t// ---------------------\r\n\t\t\tif (!runtime.delims.length) {\r\n\t\t\t\t// BLOCK-BASED SPLITTING...\r\n\t\t\t\tif (runtime.nesting.length === 2 && nestingTest.starting) {\r\n\t\t\t\t\truntime.matches.push(null);\r\n\t\t\t\t\tthis._push(runtime, nestingTest.starting);\r\n\t\t\t\t\tcharWidth = nestingTest.starting.length;\r\n\t\t\t\t} else if (!runtime.nesting.length && nestingTest.ending) {\r\n\t\t\t\t\tthis._push(runtime, nestingTest.ending);\r\n\t\t\t\t\tcharWidth = nestingTest.ending.length;\r\n\t\t\t\t\truntime.matches.push(null);\r\n\t\t\t\t} else/*no-nesting flag*/ {\r\n\t\t\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// ---------------------\r\n\t\t\t\t// DELIMS-BASED SPLITTING\r\n\t\t\t\t// ---------------------\r\n\t\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\r\n\t\t\t\t\t// In case the chars at index 0 is a delim,\r\n\t\t\t\t\t// the resulting split should first have an empty string, instead of undefined\r\n\t\t\t\t\tthis._push(runtime, '');\r\n\t\t\t\t\tvar matchedDelim = this._testChars(runtime.delims, runtime, i);\r\n\t\t\t\t\tif (matchedDelim !== false) {\r\n\t\t\t\t\t\truntime.matches.push(matchedDelim);\r\n\t\t\t\t\t\truntime.matchesi[i] = matchedDelim;\r\n\t\t\t\t\t\tcharWidth = matchedDelim.length || 1;\r\n\t\t\t\t\t\tif (!runtime.options.preserveDelims) {\r\n\t\t\t\t\t\t\t// The current character is a delimiter...\r\n\t\t\t\t\t\t\t// and should not get to appending to the split series down the line\r\n\t\t\t\t\t\t\treturn this._evalCharsAt(runtime, i + (matchedDelim.length || 1));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._push(runtime, matchedDelim || this.$str[i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar chars = nestingTest.starting || nestingTest.ending || this.$str[i];\r\n\t\t\t\t\tcharWidth = chars.length;\r\n\t\t\t\t\tthis._push(runtime, chars);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._evalCharsAt(runtime, i + charWidth);\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a quote start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testQuotes(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.quotes || []).forEach(quote => {\r\n\t\t\tif (this.$str.substr(i, 1) === quote) {\r\n\t\t\t\tif (!runtime.openQuote) {\r\n\t\t\t\t\truntime.openQuote = quote;\r\n\t\t\t\t\tresult.starting = quote;\r\n\t\t\t\t} else if (quote === runtime.openQuote) {\r\n\t\t\t\t\truntime.openQuote = false;\r\n\t\t\t\t\tresult.ending = quote;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a comment start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testComments(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.comments || []).forEach(block => {\r\n\t\t\tif (!runtime.openComment) {\r\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + _first(block)));\r\n\t\t\t\tif (m) {\r\n\t\t\t\t\truntime.openComment = block;\r\n\t\t\t\t\tresult.starting = m[0];\r\n\t\t\t\t}\r\n\t\t\t} else if (_last(block) === _last(runtime.openComment)) {\r\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + _last(block)));\r\n\t\t\t\tif (m) {\r\n\t\t\t\t\truntime.openComment = false;\r\n\t\t\t\t\tresult.ending = m[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a nesting start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testNesting(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.blocks || []).forEach(block => {\r\n\t\t\tvar starting = this.$str.substr(i).match(new RegExp('^' + _first(block)));\r\n\t\t\tif (starting) {\r\n\t\t\t\truntime.nesting = runtime.nesting.concat([block]);\r\n\t\t\t\tresult.starting = starting[0];\r\n\t\t\t} else if (runtime.nesting.length && _last(block) === _last(_last(runtime.nesting))) {\r\n\t\t\t\tvar ending = this.$str.substr(i).match(new RegExp('^' + _last(block)));\r\n\t\t\t\tif (ending) {\r\n\t\t\t\t\truntime.nesting = runtime.nesting.slice(0, -1);\r\n\t\t\t\t\tresult.ending = ending[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\truntime.maxDepth = Math.max(runtime.maxDepth, runtime.nesting.length);\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a delimiter or stop character on the current cursor.\r\n\t *\r\n\t * @param array\t\ttestList\r\n\t * @param object \truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return mixed\r\n\t */\r\n\t_testChars(testList, runtime, i) {\r\n\t\tfor (var k = 0; k < testList.length; k ++) {\r\n\t\t\tvar test = testList[k];\r\n\t\t\tif (runtime.options.useRegex) {\r\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + test, runtime.options.useRegex !== true ? runtime.options.useRegex : ''));\r\n\t\t\t\tif (m) {\r\n\t\t\t\t\treturn m[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ((!runtime.options.ci && this.$str.substr(i, test.length) === test)\r\n\t\t\t|| (runtime.options.ci && this.$str.substr(i, test.length).toLowerCase() === test.toLowerCase())) {\r\n\t\t\t\treturn test;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Expr helper: pushes a character or set of characters into the current split series.\r\n\t *\r\n\t * @param object \truntime\r\n\t * @param string\tchars\r\n\t * @param string\ttarget\r\n\t *\r\n\t * @return void\r\n\t */\r\n\t_push(runtime, chars, target = 'tokens') {\r\n\t\tvar splitSeries = runtime.matches.length;\r\n\t\tif (_isUndefined(runtime[target][splitSeries])) {\r\n\t\t\truntime[target][splitSeries] = '';\r\n\t\t}\r\n\t\truntime[target][splitSeries] += chars;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Splits the instance string on the given delimeters and returns the tokens.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tsplit(str, delims, options) {\r\n\t\treturn this.lex(delims, options).tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Splits the instance string on the given delimeters and returns the matches.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions:\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tmatch(str, delims, options) {\r\n\t\treturn this.lex(delims, options).matches;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parses the instance string on the given delimeters using regex.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tregParse(delims, options) {\r\n\t\treturn this.lex(delims, _merge({useRegex: true}, options || {}));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Splits the instance string on the given delimeters using regex; returns the tokens.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tregSplit(delims, options) {\r\n\t\treturn this.regParse(delims, options).tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Matches the instance string on the given delimeters using regex; returns the matches.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tregMatch(delims, options) {\r\n\t\treturn this.regParse(delims, options).matches;\r\n\t}\r\n};\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$blocks = [['\\\\(', '\\\\)'], ['\\\\[', '\\\\]'], ['\\\\{', '\\\\}'],];\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$quotes = ['\"', \"'\", '`',];\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$comments = [['\\\\/\\\\*', '\\\\*\\\\/'], ['\\\\/\\\\/', '(\\\\r)?\\\\n'],];\r\n\r\n/**\r\n * @var object\r\n */\r\nLexer.$cache = {};\r\n\r\n/**\r\n * @export\r\n */\r\nexport default Lexer;\r\n\r\n","\r\n/**\r\n * @exports\r\n */\r\nexport default class extends Array {};","\r\n/**\r\n * ---------------------------\r\n * String utils\r\n * ---------------------------\r\n */\r\n\r\n/**\r\n * Tells if the string is warapped with the given opening and closing tags.\r\n *\r\n * @param  string  subject\r\n * @param  string  openingTag\r\n * @param  string  closingTag\r\n *\r\n * @return bool\r\n */\r\nconst _wrapped = function(subject, openingTag, closingTag) {\r\n\treturn subject.startsWith(openingTag) && subject.endsWith(closingTag);\r\n};\r\n\r\n/**\r\n * Returns the string without the given opening and closing tags.\r\n *\r\n * @param  string  subject\r\n * @param  string  openingTag\r\n * @param  string  closingTag\r\n *\r\n * @return string\r\n */\r\nconst _unwrap = function(subject, openingTag, closingTag) {\r\n\treturn _beforeLast(_after(subject, openingTag), closingTag);\r\n};\r\n\r\n/**\r\n * Return the part of a string before a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n * @param  bool\t   beforeLast\r\n *\r\n * @return string\r\n */\r\nconst _before = function(subject, search, beforeLast = false) {\r\n\tif (search == '') {\r\n\t\treturn subject;\r\n\t}\r\n\tvar pos = beforeLast ? subject.lastIndexOf(search) : subject.indexOf(search);\r\n\tif (pos === -1) {\r\n\t\treturn subject;\r\n\t}\r\n\treturn subject.substr(0, pos);\r\n};\r\n\r\n/**\r\n * Return the part of a string before last occurence of a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n *\r\n * @return string\r\n */\r\nconst _beforeLast = function(subject, search) {\r\n\treturn _before(subject, search, true);\r\n};\r\n\r\n/**\r\n * Return the remainder of a string after a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n * @param  bool\t   afterLast\r\n *\r\n * @return string\r\n */\r\nconst _after = function(subject, search, afterLast = false) {\r\n\tif (search == '') {\r\n\t\treturn subject;\r\n\t}\r\n\tvar pos = afterLast ? subject.lastIndexOf(search) : subject.indexOf(search);\r\n\tif (pos === -1) {\r\n\t\treturn '';\r\n\t}\r\n\treturn subject.substr(pos + search.length);\r\n};\r\n\r\n/**\r\n * Return the remainder of a string after last occurence of a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n *\r\n * @return string\r\n */\r\nconst _afterLast = function(subject, search) {\r\n\treturn _after(subject, search, true);\r\n}\r\n \r\n/**\r\n * Converts a string to title case.\r\n *\r\n * @param string \tstr\r\n * @param bool \t\tstrict\r\n *\r\n * @return string\r\n */\r\nconst _toTitle = function(str, strict) {\r\n\tif (typeof str !== 'string') {\r\n\t\treturn str;\r\n\t}\r\n\treturn str.replace(/\\w\\S*/g,  function(txt) { return txt.charAt(0).toUpperCase() + ((typeof strict !== undefined && strict) ? txt.substr(1).toLowerCase() : txt.substr(1)); })\r\n};\r\n\r\n/**\r\n * Makes a string camel-cased.\r\n *\r\n * @param string \tstr\r\n * @param bool\t \tfromStart\r\n *\r\n * @return string\r\n */\r\nconst _toCamel = function(str, fromStart) {\r\n\t// Make disting words\r\n\tstr = _toTitle(str.replace(/-/g, ' ')).replace(/ /g, '');\r\n\treturn fromStart ? str : str[0].toLowerCase() + str.substr(1);\r\n};\r\n\r\n/**\r\n * Splits a camel-cased string.\r\n *\r\n * @param string \tstr\r\n * @param string \tdelimiter\r\n *\r\n * @return string\r\n */\r\nconst _fromCamel = function(str, delimiter) {\r\n\treturn str === undefined ? '' : str.split(/(?=[A-Z])/).join(delimiter ? delimiter : ' '); // positive lookahead to keep the capital letters\r\n};\r\n\r\n/**\r\n * ReMatches a string against another string.\r\n *\r\n * @param string \tstr\r\n * @param string \tdelimiter\r\n *\r\n * @return string\r\n */\r\nconst _matches = function(str, delimiter) {\r\n\treturn lllll;\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport {\r\n\t_wrapped,\r\n\t_unwrap,\r\n\t_before,\r\n\t_beforeLast,\r\n\t_after,\r\n\t_afterLast,\r\n\t_toTitle,\r\n\t_toCamel,\r\n\t_fromCamel,\r\n\t_matches\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AbstractionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Abstraction'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_wrapped,\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\nimport AbstractionInterface from './AbstractionInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Abstraction class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Abstraction = class extends AbstractionInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.expr.eval(context, callback);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn '(' + this.expr.toString(context) + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Abstraction) {\r\n\t\tif (_wrapped(expr, '(', ')') && !Lexer.match(expr, [' ']).length) {\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(_unwrap(expr, '(', ')'))\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Abstraction;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ArrInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ArrayType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_wrapped,\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\nimport ArrInterface from './ArrInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Array utils\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Arr = class extends ArrInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs || [];\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinherit(Super) {\r\n\t\tif (Super instanceof ArrInterface) {\r\n\t\t\tvar newExprs = Super.exprs.filter(exprA => {\r\n\t\t\t\treturn this.exprs.reduce((uniqueSoFar, exprB) => uniqueSoFar && !exprA.even(exprB), true);\r\n\t\t\t});\r\n\t\t\tthis.exprs = newExprs.concat(this.exprs);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.exprs.map(expr => expr.eval(context, callback));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn '[' + this.exprs.map(expr => expr.toString(context)).join(', ') + ']';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Arr) {\r\n\t\tif (_wrapped(expr, '[', ']') && !Lexer.match(expr.trim(), [' ']).length) {\r\n\t\t\tvar splits = Lexer.split(_unwrap(expr, '[', ']'), [','])\r\n\t\t\t\t.map(n => n.trim()).filter(n => n).map(expr => parseCallback(expr));\r\n\t\t\treturn new Static(splits);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @export\r\n */\r\nexport default Arr;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ArgumentsInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Arguments'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_wrapped,\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\nimport ArgumentsInterface from './ArgumentsInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Arguments class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Arguments = class extends ArgumentsInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(list = []) {\r\n\t\tsuper();\r\n\t\tthis.list = list;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.list.map(arg => arg.eval(context, callback));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn '(' + this.list.map(arg => arg.toString(context)).join(', ') + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Arguments) {\r\n\t\tvar args; expr = expr.trim();\r\n\t\tif (_wrapped(expr, '(', ')') && !Lexer.match(expr, [' ']).length) {\r\n\t\t\treturn new Static(\r\n\t\t\t\tLexer.split(_unwrap(expr, '(', ')'), [',']).map(arg => parseCallback(arg.trim()))\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Arguments;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AssertionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'AssertionExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_first,\r\n\t_flatten,\r\n\t_unique\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport AssertionInterface from './AssertionInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Assertion class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Assertion = class extends AssertionInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, logic) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.logic = logic;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\t eval(context = null, callback = null) {\r\n\t\tif (this.logic === '!') {\r\n\t\t\treturn !_first(this.exprs).eval(context, callback);\r\n\t\t}\r\n\t\tvar operators = _flatten(Assertion.operators);\r\n\t\tvar logic = (this.logic || '').trim().toUpperCase();\r\n\t\tvar isOr = logic === (Assertion.operators.or || '').trim().toUpperCase();\r\n\t\tvar isNor = logic === (Assertion.operators.nor || '').trim().toUpperCase();\r\n\t\tvar isAnd = logic === (Assertion.operators.and || '').trim().toUpperCase();\r\n\t\tvar isNand = logic === (Assertion.operators.nand || '').trim().toUpperCase();\r\n\t\tvar lastResult = true, trues = 0;\r\n\t\tfor(var i = 0; i < this.exprs.length; i ++) {\r\n\t\t\tif (isAnd && !lastResult) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (isNand && !lastResult) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tlastResult = this.exprs[i].eval(context, callback);\r\n\t\t\tif (isOr && lastResult) {\r\n\t\t\t\treturn lastResult;\r\n\t\t\t}\r\n\t\t\ttrues += lastResult ? 1 : 0;\r\n\t\t}\r\n\t\tif (isOr) {\r\n\t\t\t// Which is falsey,\r\n\t\t\t// by virtue of getting here\r\n\t\t\treturn lastResult;\r\n\t\t}\r\n\t\tif (isAnd || isNand) {\r\n\t\t\t// For AND and NAND, all entries must be true,\r\n\t\t\t// by virtue of getting here.\r\n\t\t\t// For AND, this means true; for NAND, false\r\n\t\t\treturn isAnd;\r\n\t\t}\r\n\t\t// For NOR, all entries need to be false\r\n\t\treturn isNor && trues === 0;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\t toString(context = null) {\r\n\t\tif (this.logic === '!') {\r\n\t\t\treturn '!' + _first(this.exprs).toString(context);\r\n\t\t}\r\n\t\treturn this.exprs.map(expr => expr.toString(context)).join(' ' + this.logic + ' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Assertion) {\r\n\t\tif (expr.startsWith('!')) {\r\n\t\t\treturn new Static(\r\n\t\t\t\t[parseCallback(expr.substr(1))],\r\n\t\t\t\t'!'\r\n\t\t\t);\r\n\t\t}\r\n\t\tvar parse = Lexer.lex(expr, _flatten(Static.operators));\r\n\t\tif (parse.tokens.length > 1) {\r\n\t\t\tvar logic = _unique(parse.matches);\r\n\t\t\tif (logic.length > 1) {\r\n\t\t\t\tthrow new Error('\"AND\" and \"OR\" logic cannot be asserted in the same expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\tparse.tokens.map(expr => parseCallback(expr.trim())),\r\n\t\t\t\t_first(logic)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nAssertion.operators = {\r\n\tand: '&&',\r\n\tor: '||',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Assertion;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_last\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_isUndefined,\r\n\t_isFunction\r\n} from '@onephrase/commons/src/Js.js';\r\nimport AssignmentInterface from './AssignmentInterface.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport Contexts from '../Contexts.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Assignment class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Assignment = class extends AssignmentInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, val, operator = '=') {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.val = val;\r\n\t\tthis.operator = operator;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar reference = this.reference.getEval(context, callback);\r\n\t\tvar val = this.val.eval(context, callback);\r\n\t\tif (!_isUndefined(reference.context) && !_isUndefined(reference.name)) {\r\n\t\t\tif (_isFunction(callback)) {\r\n\t\t\t\treturn callback(this, reference.context, reference.name, val);\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tvar cntxt = reference.context instanceof Contexts \r\n\t\t\t\t? _last(reference.context) \r\n\t\t\t\t: reference.context;\r\n\t\t\t// -----------------------------\r\n\t\t\tcntxt[reference.name] = val;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [this.reference.toString(context), this.operator, this.val.toString(context)].join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Assignment) {\r\n\t\tvar parse = Lexer.lex(expr, Static.operators);\r\n\t\tif (parse.tokens.length === 2) {\r\n\t\t\tvar reference, val;\r\n\t\t\tif (!((reference = parseCallback(parse.tokens.shift().trim())) instanceof ReferenceInterface) \r\n\t\t\t|| !(val = parseCallback(parse.tokens.shift().trim()))) {\r\n\t\t\t\tthrow new Error('Invalid assignment directive: ' + expr);\r\n\t\t\t}\r\n\t\t\treturn new Static(reference, val, parse.matches[0].trim());\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @prop array\r\n */\r\nAssignment.operators = [' = '];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Assignment;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * BoolInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'BooleanType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '../Lexer.js';\r\nimport BoolInterface from './BoolInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Bool (boolean) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Bool = class extends BoolInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(state) {\r\n\t\tsuper();\r\n\t\tthis.state = state;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn this.state.toLowerCase().trim() === 'true';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.state;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Bool) {\r\n\t\tvar expr = expr.toLowerCase().trim();\r\n\t\tif (expr === 'true' || expr === 'false') {\r\n\t\t\treturn new Static(expr);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Bool;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_isArray,\r\n\t_isFunction,\r\n\t_isNumeric,\r\n\t_isObject,\r\n\t_isString,\r\n\t_isUndefined\r\n} from '@onephrase/commons/src/Js.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport CallInterface from './CallInterface.js';\r\nimport Arguments from './Arguments.js';\r\nimport Contexts from '../Contexts.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Call class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Call = class extends CallInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, args) {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.args = args;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar reference = this.reference.getEval(context, callback);\r\n\t\tvar args = this.args.eval(context, callback);\r\n\t\tif (!_isUndefined(reference.name)) {\r\n\t\t\tif (_isFunction(callback)) {\r\n\t\t\t\treturn callback(this, reference.context, reference.name, args);\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tvar _contexts = reference.context instanceof Contexts \r\n\t\t\t\t? reference.context.slice() \r\n\t\t\t\t: [reference.context];\r\n\t\t\tvar __contexts = _contexts.slice();\r\n\t\t\twhile(_contexts.length) {\r\n\t\t\t\tvar cntxt = _contexts.pop();\r\n\t\t\t\tif (cntxt && _isFunction(cntxt[reference.name])) {\r\n\t\t\t\t\treturn cntxt[reference.name](...args);\r\n\t\t\t\t}\r\n\t\t\t\t// -----------------------------\r\n\t\t\t\tvar utils = Call.utils || {};\r\n\t\t\t\tvar handler = _isNumeric(cntxt) && utils.Num ? utils.Num\r\n\t\t\t\t\t: (_isString(cntxt) && utils.Str ? utils.Str\r\n\t\t\t\t\t\t: (_isArray(cntxt) && utils.Arr ? utils.Arr\r\n\t\t\t\t\t\t\t: (_isObject(cntxt) && utils.Obj ? utils.Obj : null)));\r\n\t\t\t\tif (handler && _isFunction(handler[reference.name])) {\r\n\t\t\t\t\targs.unshift(cntxt);\r\n\t\t\t\t\treturn handler[reference.name](...args);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error('\"' + this + '\" is not a function. (Called on ' + __contexts.map(c => typeof c).join(', ') + ')');\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.reference.toString(context) + this.args.toString(context);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Call) {\r\n\t\tif (!expr.startsWith('(') && expr.endsWith(')') && !Lexer.match(expr, [' ']).length) {\r\n\t\t\tvar tokens = Lexer.split(expr, []);\r\n\t\t\tvar reference, args = tokens.pop();\r\n\t\t\tif (!((reference = parseCallback(tokens.join(''))) instanceof ReferenceInterface) \r\n\t\t\t|| !(args = parseCallback(args, [Arguments]))) {\r\n\t\t\t\tthrow new Error('Invalid call directive: ' + expr);\r\n\t\t\t}\r\n\t\t\treturn new Static(reference, args);\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Call;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * CommentsInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Comments'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_after,\r\n\t_before\r\n} from '@onephrase/commons/src/Str.js';\r\nimport CommentsInterface from './CommentsInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Comments class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Comments = class extends CommentsInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(comments, type) {\r\n\t\tsuper();\r\n\t\tthis.comments = comments;\r\n\t\tthis.type = type;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn '';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Comments) {\r\n\t\tvar _comments = null;\r\n\t\tvar _expr = null;\r\n\t\tvar type = 0;\r\n\t\tvar commentPlacement = 'before';\r\n\t\t// Oneliner comments\r\n\t\tif (expr.startsWith('//')) {\r\n\t\t\tvar splits = Lexer.split(_after(expr, '//'), [\"\\r\\n\"]);\r\n\t\t\t_comments = splits.shift().trim();\r\n\t\t\t_expr = splits.shift().trim();\r\n\t\t\ttype = 1;\r\n\t\t} else if (expr.startsWith('/*')) {\r\n\t\t\tvar splits = Lexer.split(_after(expr, '/*'), [\"*/\"]);\r\n\t\t\t_comments = splits.shift().trim();\r\n\t\t\t_expr = splits.shift().trim();\r\n\t\t\ttype = 2;\r\n\t\t} else if (expr.endsWith('*/')) {\r\n\t\t\tvar splits = Lexer.split(_beforeLast(expr, '*/'), [\"/*\"]);\r\n\t\t\t_comments = splits.pop().trim();\r\n\t\t\t_expr = splits.pop().trim();\r\n\t\t\ttype = 2;\r\n\t\t\tvar commentPlacement = 'after';\r\n\t\t}\r\n\t\tif (type) {\r\n\t\t\tif (type === 2) {\r\n\t\t\t\t_comments = Lexer.split(_comments.trim(), [\"\\r\\n\"])\r\n\t\t\t\t\t.map(line => line.replace(/^[\\*]+/, ''))\r\n\t\t\t\t\t.filter(line => line.trim());\r\n\t\t\t}\r\n\t\t\tconsole.log(_comments, commentPlacement, expr);\r\n\t\t\t_comments = new Static(_comments, type);\r\n\t\t}\r\n\t\tif (_expr) {\r\n\t\t\t_expr = parseCallback(_expr);\r\n\t\t\t_expr.meta.commenta = _comments;\r\n\t\t\treturn _expr;\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Comments;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ComparisonInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ComparisonExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_matches\r\n} from '@onephrase/commons/src/Str.js';\r\nimport {\r\n\t_flatten,\r\n\t_first,\r\n\t_last,\r\n\t_difference\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_isArray,\r\n\t_isObject,\r\n\t_isString\r\n} from '@onephrase/commons/src/Js.js';\r\nimport {\r\n\t_each\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport ComparisonInterface from './ComparisonInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Comparison class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Comparison = class extends ComparisonInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(operand1, operand2, operator) {\r\n\t\tsuper();\r\n\t\tthis.operand1 = operand1;\r\n\t\tthis.operand2 = operand2;\r\n\t\tthis.operator = operator;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn Comparison.compare(\r\n\t\t\tthis.operand1.eval(context, callback), \r\n\t\t\tthis.operand2.eval(context, callback), \r\n\t\t\tthis.operator\r\n\t\t);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [\r\n\t\t\tthis.operand1.toString(context), \r\n\t\t\tthis.operator, \r\n\t\t\tthis.operand2.toString(context)\r\n\t\t].join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Comparison) {\r\n\t\tvar operators = _flatten(Static.operators).map(oper => ' ' + oper + ' ');\r\n\t\tvar parse = Lexer.lex(expr, operators);\r\n\t\tif (parse.tokens.length > 1) {\r\n\t\t\tif (parse.tokens.length > 2) {\r\n\t\t\t\tthrow new Error('Malformed \"Comparison\" expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(_first(parse.tokens).trim()),\r\n\t\t\t\tparseCallback(_last(parse.tokens).trim()),\r\n\t\t\t\tparse.matches[0].trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * -------------------------------------------------------\r\n\t */\r\n\t \r\n\t/**\r\n\t * Use the operator type to compare the two operands\r\n\t *\r\n\t * @param mixed\t\toperand1\t\t\r\n\t * @param mixed\t\toperand2\t\t\r\n\t * @param string \toperator\t\t\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tstatic compare(operand1, operand2, operator = '==') {\r\n\t\tif (_flatten(Comparison.operators).indexOf(operator) === -1) {\r\n\t\t\tthrow new Error('The operator \"' + operator + '\" is not recognized.');\r\n\t\t}\r\n\t\tif (_isArray(operand1) && _isArray(operand2) && operator !== '===') {\r\n\t\t\tif (operand1.length !== operand2.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar allItemsMatch = true;\r\n\t\t\toperand1.sort();\r\n\t\t\toperand2.sort();\r\n\t\t\tfor (var i = 0; i < operand1.length; i ++) {\r\n\t\t\t\tallItemsMatch = allItemsMatch && Comparison.compare(operand1[i], operand2[i], operator);\r\n\t\t\t}\r\n\t\t\treturn allItemsMatch;\r\n\t\t} else if (_isObject(operand1) && _isObject(operand2) && operator !== '===') {\r\n\t\t\tvar entry1Keys = Object.keys(operand1);\r\n\t\t\tvar entry2Keys = Object.keys(operand2);\r\n\t\t\tif (entry1Keys.length !== entry2Keys.length || _difference(entry1Keys, entry2Keys).length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar allEntriesMatch = true;\r\n\t\t\t_each(entry1Keys, (i, key) => {\r\n\t\t\t\tallEntriesMatch = allEntriesMatch && Comparison.compare(operand1[key], operand2[key], operator);\r\n\t\t\t});\r\n\t\t\treturn allEntriesMatch;\r\n\t\t}\r\n\t\tswitch(operator) {\r\n\t\t\tcase '===':\r\n\t\t\t\treturn operand1 === operand2;\r\n\t\t\tcase '==':\r\n\t\t\tcase '=':\r\n\t\t\t\treturn operand1 == operand2;\r\n\t\t\tcase '>':\r\n\t\t\t\treturn operand1 > operand2;\r\n\t\t\tcase '<':\r\n\t\t\t\treturn operand1 < operand2;\r\n\t\t\tcase '>=':\r\n\t\t\t\treturn operand1 >= operand2;\r\n\t\t\tcase '<=':\r\n\t\t\t\treturn operand1 <= operand2;\r\n\t\t\tcase '!=':\r\n\t\t\t\treturn operand1 != operand2;\r\n\t\t\tcase '!==':\r\n\t\t\t\treturn operand1 !== operand2;\r\n\t\t\tcase '^=':\r\n\t\t\t\treturn _isString(operand1) && operand1.startsWith(operand2);\r\n\t\t\tcase '$=':\r\n\t\t\t\treturn _isString(operand1) && operand1.endsWith(operand2);\r\n\t\t\tcase '*=':\r\n\t\t\t\t// Contains\r\n\t\t\t\treturn _isArray(operand2) || _isString(operand2) ? operand1.indexOf(operand2) > -1 : false;\r\n\t\t\tcase '~=':\r\n\t\t\t\t// Contains word\r\n\t\t\t\treturn _isString(operand1) && _isString(operand2) && (' ' + operand1 + ' ').indexOf(' ' + operand2 + ' ') > -1;\r\n\t\t\tcase '>=<': // Between\r\n\t\t\t\t if (!(_isArray(operand2) && operand2.length === 2)) {\r\n\t\t\t\t\t throw new Error('A \\'Between\\' comparison requires argument 2 to be an array of exactly 2 values.');\r\n\t\t\t\t }\r\n\t\t\t\t return operand1 >= operand2[0] && operand1 <= operand2[1];\r\n\t\r\n\t\t\tcase '/**/': // Regex\r\n\t\t\t\treturn _matches(operand2, operand1);\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * Compares two operands for differences\r\n\t *\r\n\t * @param mixed\t\toperand1\t\t\r\n\t * @param mixed\t\toperand2\t\t\r\n\t * @param bool\t \tstrict\t\t\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tstatic diff(operand1, operand2, strict) {\r\n\t\treturn !Comparison.compare(operand1, operand2, strict ? '===' : '==');\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nComparison.operators = {\r\n\texact: {\r\n\t\tis: '===',\r\n\t\tisNull: '===',\r\n\t\tequalsTo: '==',\r\n\t\tnotEqualsTo: '!=',\r\n\t},\r\n\trelative: {\r\n\t\tlesserThan: '<',\r\n\t\tgreaterThan: '>',\r\n\t\tlesserThanOrEqualsTo: '<=',\r\n\t\tgreaterThanOrEqualsTo: '>=',\r\n\t\tbetween: '>=<',\r\n\t},\r\n\tpartial: {\r\n\t\tstartsWith: '^=',\r\n\t\tendsWith: '$=',\r\n\t\tcontains: '*=',\r\n\t\tany: '~=',\r\n\t\tin: '~=',\r\n\t\tmatches: '/**/',\r\n\t},\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Comparison;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ConditionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ConditionExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '../Lexer.js';\r\nimport ConditionInterface from './ConditionInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Condition class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Condition = class extends ConditionInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(assertion, onTrue, onFalse) {\r\n\t\tsuper();\r\n\t\tthis.assertion = assertion;\r\n\t\tthis.onTrue = onTrue;\r\n\t\tthis.onFalse = onFalse;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.assertion.eval(context, callback) \r\n\t\t\t? this.onTrue.eval(context, callback) \r\n\t\t\t: this.onFalse.eval(context, callback);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [\r\n\t\t\tthis.assertion.toString(context), \r\n\t\t\tCondition.operators[0], \r\n\t\t\tthis.onTrue.toString(context),\r\n\t\t\tCondition.operators[1], \r\n\t\t\tthis.onFalse.toString(context)\r\n\t\t].join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Condition) {\r\n\t\tvar splits = Lexer.split(expr, Static.operators);\r\n\t\tif (splits.length > 1) {\r\n\t\t\tif (splits.length === 2) {\r\n\t\t\t\tthrow new Error('Malformed ternary expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(splits[0].trim()),\r\n\t\t\t\tparseCallback(splits[1].trim()),\r\n\t\t\t\tparseCallback(splits[2].trim())\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nCondition.operators = ['?', ':'];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Condition;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_last\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_isUndefined,\r\n\t_isFunction\r\n} from '@onephrase/commons/src/Js.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport DeletionInterface from './DeletionInterface.js';\r\nimport Contexts from '../Contexts.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Deletion class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Deletion = class extends DeletionInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, operator = 'delete') {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.operator = operator;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar reference = this.reference.getEval(context, callback);\r\n\t\tif (!_isUndefined(reference.context) && !_isUndefined(reference.name)) {\r\n\t\t\tif (_isFunction(callback)) {\r\n\t\t\t\treturn callback(this, reference.context, reference.name);\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tvar cntxt = reference.context instanceof Contexts \r\n\t\t\t\t? _last(reference.context) \r\n\t\t\t\t: reference.context;\r\n\t\t\t// -----------------------------\r\n\t\t\tdelete cntxt[reference.name];\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.operator + ' ' + this.reference.toString(context);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Deletion) {\r\n\t\tvar parse = Lexer.lex(expr, Object.values(Static.operators));\r\n\t\tif (parse.matches.length === 1 && expr.startsWith(parse.matches[0] + ' ')) {\r\n\t\t\tvar reference;\r\n\t\t\tif (!((reference = parseCallback(parse.tokens.pop().trim())) instanceof ReferenceInterface)) {\r\n\t\t\t\tthrow new Error('Invalid delete directive: ' + expr);\r\n\t\t\t}\r\n\t\t\treturn new Static(reference, parse.matches[0].trim());\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @prop array\r\n */\r\nDeletion.operators = {\r\n\tred: 'reduce', \r\n\tdel: 'delete',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Deletion;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * FuncInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'FunctionType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_copy,\r\n\t_each\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport {\r\n\t_flatten\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_wrapped,\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\nimport FuncInterface from './FuncInterface.js';\r\nimport Contexts from '../Contexts.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Func class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Func = class extends FuncInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(paramters, statements, wrappings = {}) {\r\n\t\tsuper();\r\n\t\tthis.paramters = paramters || {};\r\n\t\tthis.statements = statements;\r\n\t\tthis.wrappings = wrappings;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinherit(Super) {\r\n\t\tif (Super instanceof FuncInterface) {\r\n\t\t\tvar parentParams = Object.keys(Super.paramters);\r\n\t\t\tvar ownParams = Object.keys(this.paramters);\r\n\t\t\tfor (var i = 0; i < Math.max(ownParams.length, parentParams.length); i ++) {\r\n\t\t\t\tvar nameInParent = parentParams[i];\r\n\t\t\t\tvar nameInSelf = ownParams[i];\r\n\t\t\t\tif (!nameInSelf && nameInParent) {\r\n\t\t\t\t\tthrow new Error('Parameter #' + i + ' (' + nameInParent + ') in parent function must be implemented.');\r\n\t\t\t\t}\r\n\t\t\t\tif (nameInSelf && nameInParent) {\r\n\t\t\t\t\tvar defaultValInParent = Super.paramters[nameInParent];\r\n\t\t\t\t\tvar defaultValInSelf = this.paramters[nameInSelf];\r\n\t\t\t\t\tif (defaultValInSelf && !defaultValInParent) {\r\n\t\t\t\t\t\tthrow new Error('Parameter #' + i + ' (' + nameInSelf + ') must not have a default value as established in parent function.');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (defaultValInSelf && defaultValInParent && defaultValInSelf.jsenType !== defaultValInParent.jsenType) {\r\n\t\t\t\t\t\tthrow new Error('Default value for parameter #' + i + ' (' + nameInSelf + ') must be of type ' + defaultValInParent.jsenType + ' as established in parent function.');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.sup = Super;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn (...args) => {\r\n\t\t\tvar localContext = {};\r\n\t\t\t_each(Object.keys(this.paramters), (i, name) => {\r\n\t\t\t\tvar defaultVal = this.paramters[name];\r\n\t\t\t\tif (args.length - 1 < i && !defaultVal) {\r\n\t\t\t\t\tthrow new Error('The parameter \"' + name + '\" is required.');\r\n\t\t\t\t}\r\n\t\t\t\tlocalContext[name] = args.length > i \r\n\t\t\t\t\t? args[i] \r\n\t\t\t\t\t: (this.paramters[name] \r\n\t\t\t\t\t\t? this.paramters[name].eval(context, callback) \r\n\t\t\t\t\t\t: null);\r\n\t\t\t});\r\n\t\t\tvar multipleContexts = new Contexts(localContext);\r\n\t\t\t// But this newer context should come last\r\n\t\t\tif (context instanceof Contexts) {\r\n\t\t\t\tmultipleContexts = context.concat(multipleContexts);\r\n\t\t\t} else if (context) {\r\n\t\t\t\tmultipleContexts.unshift(context);\r\n\t\t\t}\r\n\t\t\treturn this.statements.eval(multipleContexts, callback);\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar paramters = [];\r\n\t\t_each(this.paramters, (name, value) => {\r\n\t\t\tparamters.push(name + (value ? '=' + value.toString(context) : ''));\r\n\t\t});\r\n\t\tvar headNoWrap = this.wrappings.head === false || (paramters.length === 1 && paramters[0].indexOf('=') === -1);\r\n\t\tvar bodyNoWrap = this.wrappings.body === false\r\n\t\treturn (headNoWrap ? paramters[0] : '(' + paramters.join(', ') + ')')\r\n\t\t+ ' => ' + (bodyNoWrap ? this.statements.toString(context) : '{' + this.statements.toString(context) + '}');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Func) {\r\n\t\tvar splits = Lexer.split(expr, _flatten(Static.operators));\r\n\t\tif (splits.length === 2) {\r\n\t\t\tvar funcHead = splits.shift().trim();\r\n\t\t\tvar funcBody = splits.shift().trim();\r\n\t\t\tvar wrappings = {};\r\n\t\t\tif (_wrapped(funcHead, '(', ')')) {\r\n\t\t\t\tfuncHead = _unwrap(funcHead, '(', ')');\r\n\t\t\t} else {\r\n\t\t\t\twrappings.head = false;\r\n\t\t\t}\r\n\t\t\tif (_wrapped(funcBody, '{', '}')) {\r\n\t\t\t\tfuncBody = _unwrap(funcBody, '{', '}');\r\n\t\t\t} else {\r\n\t\t\t\twrappings.body = false;\r\n\t\t\t}\r\n\t\t\tvar paramters = {};\r\n\t\t\tLexer.split(funcHead, [',']).forEach(param => {\r\n\t\t\t\tvar paramSplit = param.split('=');\r\n\t\t\t\tif (paramSplit[1]) {\r\n\t\t\t\t\tparamters[paramSplit[0].trim()] = parseCallback(paramSplit[1].trim());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tparamters[param.trim()] = null;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tvar statements = parseCallback(funcBody);\r\n\t\t\treturn new Static(paramters, statements, wrappings);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nFunc.operators = ['=>',];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Func;","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * MathInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'MathExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_flatten,\r\n\t_intersect,\r\n\t_unique\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_isNumeric\r\n} from '@onephrase/commons/src/Js.js';\r\nimport MathInterface from './MathInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Math class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Math = class extends MathInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(val, exprs) {\r\n\t\tsuper();\r\n\t\tthis.val = val;\r\n\t\tthis.exprs = exprs;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.exprs.reduce((currentTotal, expr) => {\r\n\t\t\tvar val = expr.val.eval(context, callback);\r\n\t\t\tvar operator = expr.operator.trim();\r\n\t\t\tif ((!_isNumeric(currentTotal) || !_isNumeric(val)) && operator !== '+') {\r\n\t\t\t\tthrow new Error('Invalid Math expression: ' + this.toString() + '!');\r\n\t\t\t}\r\n\t\t\tswitch(operator) {\r\n\t\t\t\tcase '+':\r\n\t\t\t\t\treturn currentTotal + val;\r\n\t\t\t\tcase '-':\r\n\t\t\t\t\treturn currentTotal - val;\r\n\t\t\t\tcase '*':\r\n\t\t\t\t\treturn currentTotal * val;\r\n\t\t\t\tcase '/':\r\n\t\t\t\t\treturn currentTotal / val;\r\n\t\t\t}\r\n\t\t}, this.val.eval(context, callback));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [this.val.toString(context)].concat(\r\n\t\t\tthis.exprs.map(expr => expr.operator + ' ' + expr.val.toString(context))\r\n\t\t).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Math) {\r\n\t\tvar parse = Lexer.lex(expr, _flatten(Static.operators));\r\n\t\tif (parse.tokens.length > 1 && parse.matches.length === parse.tokens.length - 1) {\r\n\t\t\tvar operators = _unique(parse.matches);\r\n\t\t\tif (_intersect(operators, Math.operators.sup).length && _intersect(operators, Math.operators.sub).length) {\r\n\t\t\t\tthrow new Error('\"Addition/subtraction\" and \"multiplication/division\" operators cannot be used in the same expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(parse.tokens.shift().trim()),\r\n\t\t\t\tparse.tokens.map((expr, i) => {return {\r\n\t\t\t\t\toperator: parse.matches[i],\r\n\t\t\t\t\tval: parseCallback(expr.trim())\r\n\t\t\t\t};})\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nMath.operators = {\r\n\tsup: ['*', '/'],\r\n\tsub: [' + ', ' - '],\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Math;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * NumInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'NumberType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_isNumeric\r\n} from '@onephrase/commons/src/Js.js';\r\nimport NumInterface from './NumInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Num (number) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Num = class extends NumInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(int, dec = 0) {\r\n\t\tsuper();\r\n\t\tthis.int = int;\r\n\t\tthis.dec = dec;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn parseFloat(this.int + (this.dec ? '.' + this.dec : null));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.int + (this.dec ? '.' + this.dec : null);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Num) {\r\n\t\tif (_isNumeric(expr)) {\r\n\t\t\tvar expr = expr.split('.');\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseInt(expr.shift()),\r\n\t\t\t\tparseInt(expr.shift())\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Num;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ObjInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ObjectType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_first,\r\n\t_last\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_each\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport {\r\n\t_wrapped,\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\nimport ObjInterface from './ObjInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Object utils\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Obj = class extends ObjInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(entries) {\r\n\t\tsuper();\r\n\t\tthis.entries = entries || {};\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinherit(Super) {\r\n\t\tif (Super instanceof ObjInterface) {\r\n\t\t\t_each(Super.entries, (name, val) => {\r\n\t\t\t\tif (!(name in this.entries)) {\r\n\t\t\t\t\tthis.entries[name] = val;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar items = {};\r\n\t\t_each(this.entries, (key, expr) => {\r\n\t\t\titems[key] = expr.eval(context, callback);\r\n\t\t});\r\n\t\treturn items;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar str = [];\r\n\t\t_each(this.entries, (key, expr) => {\r\n\t\t\tstr.push(key + Obj.operators.sub + expr.toString(context));\r\n\t\t});\r\n\t\treturn '{' + str.join(Obj.operators.sup) + '}';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Obj) {\r\n\t\tif (_wrapped(expr, '{', '}') && !Lexer.match(expr.trim(), [' ']).length) {\r\n\t\t\tvar entries = {};\r\n\t\t\tvar _entriesSplit = Lexer.split(_unwrap(expr, '{', '}'), [Obj.operators.sup])\r\n\t\t\t\t.map(n => n.trim()).filter(n => n);\r\n\t\t\t_each(_entriesSplit, (key, expr) => {\r\n\t\t\t\tvar entry = Lexer.split(expr, [Obj.operators.sub], {limit:1}/*IMPORTANT*/);\r\n\t\t\t\tentries[_first(entry).trim()] = parseCallback(_last(entry).trim());\r\n\t\t\t});\r\n\t\t\treturn new Static(entries);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nObj.operators = {\r\n\tsup: ',',\r\n\tsub: ':',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Obj;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_wrapped,\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\nimport {\r\n\t_isUndefined,\r\n\t_isFunction\r\n} from '@onephrase/commons/src/Js.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport ExprInterface from '../ExprInterface.js';\r\nimport Contexts from '../Contexts.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Reference class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Reference = class extends ReferenceInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(context, name, backticks = false) {\r\n\t\tsuper();\r\n\t\tthis.context = context;\r\n\t\tthis.name = name;\r\n\t\tthis.backticks = backticks;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetEval(context = null, callback = null) {\r\n\t\tvar sourceContext = context, name = this.name;\r\n\t\tif (this.context) {\r\n\t\t\tif (name instanceof ExprInterface) {\r\n\t\t\t\tname = name.eval(context, callback);\r\n\t\t\t}\r\n\t\t\tsourceContext = this.context.eval(context, callback);\r\n\t\t}\r\n\t\treturn {context:sourceContext, name:name,};\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar parts = this.getEval(context, callback);\r\n\t\tif (!_isUndefined(parts.context) && !_isUndefined(parts.name)) {\r\n\t\t\tif (_isFunction(callback)) {\r\n\t\t\t\treturn callback(this, parts.context, parts.name);\r\n\t\t\t}\r\n\t\t\tvar _contexts = parts.context instanceof Contexts \r\n\t\t\t\t? parts.context.slice() \r\n\t\t\t\t: [parts.context];\r\n\t\t\twhile(_contexts.length) {\r\n\t\t\t\tvar cntxt = _contexts.pop(), val = cntxt[parts.name];\r\n\t\t\t\tif (!_isUndefined(val)) {\r\n\t\t\t\t\treturn val;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar name = this.name;\r\n\t\tif (this.context) {\r\n\t\t\tvar subjectContext = this.context.toString(context);\r\n\t\t\tif (name instanceof ExprInterface) {\r\n\t\t\t\tname = '[' + name.toString(context) + ']';\r\n\t\t\t} else if (this.backticks) {\r\n\t\t\t\tname = '`' + name + '`';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar subjectContext = context;\r\n\t\t\tif (this.backticks) {\r\n\t\t\t\tname = '`' + name + '`';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (subjectContext || '') + (subjectContext && !name.startsWith('[') ? Reference.separator : '') + name;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Reference) {\r\n\t\tif (!Lexer.match(expr.trim(), [' ']).length) {\r\n\t\t\tvar splits = Lexer.split(expr, []);\r\n\t\t\t// ------------------------\r\n\t\t\t// name, first\r\n\t\t\t// ------------------------\r\n\t\t\tvar context, name = splits.pop(), backticks;\r\n\t\t\tvar nameSplit = Lexer.split(name.trim(), [Static.separator], {preserveDelims:true});\r\n\t\t\tif (nameSplit.length > 1) {\r\n\t\t\t\tname = nameSplit.pop().substr(1);\r\n\t\t\t\tsplits = splits.concat(nameSplit);\r\n\t\t\t}\r\n\t\t\tif (_wrapped(name, '`', '`')) {\r\n\t\t\t\tname = _unwrap(name, '`', '`');\r\n\t\t\t\tbackticks = true;\r\n\t\t\t}\r\n\t\t\t// ------------------------\r\n\t\t\t// context, second\r\n\t\t\t// ------------------------\r\n\t\t\tif (splits.length) {\r\n\t\t\t\tcontext = parseCallback(splits.join(''));\r\n\t\t\t\tcontext.isContext = true;\r\n\t\t\t}\r\n\t\t\tif (_wrapped(name, '[', ']')) {\r\n\t\t\t\tif (!context) {\r\n\t\t\t\t\tthrow new Error('Invalid reference: ' + expr + '!');\r\n\t\t\t\t}\r\n\t\t\t\tname = parseCallback(_unwrap(name, '[', ']'));\r\n\t\t\t}\r\n\t\t\treturn new Static(context, name, backticks);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop string\r\n */\r\nReference.separator = '.';\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Reference;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ReturnInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ReturnDirective'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '../Lexer.js';\r\nimport ReturnInterface from './ReturnInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Ret (return) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Return = class extends ReturnInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.expr ? this.expr.eval(context, callback) : undefined;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.expr ? 'return ' + this.expr.toString(context) : 'return';\r\n\t}\r\n\t\r\n\t/**\r\n\t * -------------------------------------------------------\r\n\t */\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Return) {\r\n\t\tvar exprLc = expr.toLowerCase();\r\n\t\tif (exprLc.startsWith('return ') || exprLc === 'return') {\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(expr.substr(6).trim())\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Return;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * StatementsInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Statements'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_flatten\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport StatementsInterface from './StatementsInterface.js';\r\nimport ReturnInterface from './ReturnInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Statements class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Statements = class extends StatementsInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(stmts, delim) {\r\n\t\tsuper();\r\n\t\tthis.stmts = exprs;\r\n\t\tthis.delim = delim;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar exprs = [];\r\n\t\tfor (var i = 0; i < this.stmts.length; i ++) {\r\n\t\t\tif (this.stmts[i] instanceof ReturnInterface) {\r\n\t\t\t\treturn this.stmts[i].eval(context, callback);\r\n\t\t\t} else {\r\n\t\t\t\texprs[i] = this.stmts[i].eval(context, callback);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn exprs;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.stmts.map(expr => expr.toString(context)).join(this.delim);\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Statements) {\r\n\t\tvar parse = Lexer.lex(expr, _flatten(Static.operators));\r\n\t\tif (parse.tokens.length > 1) {\r\n\t\t\treturn new Static(\r\n\t\t\t\tparse.tokens.map(expr => parseCallback(expr)),\r\n\t\t\t\tparse.matches[0].trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop array\r\n */\r\nStatements.operators = [\r\n\t';',\r\n\t\"\\r\\n\",\r\n];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Statements;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * StrInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'StringType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_wrapped,\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\nimport StrInterface from './StrInterface.js';\r\nimport Lexer from '../Lexer.js';\r\nimport Bool from './Bool.js';\r\n\r\n/**\r\n * ---------------------------\r\n * String utils\r\n * ---------------------------\r\n */\r\n\r\nconst Str = class extends StrInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr, quote) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t\tthis.quote = quote;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn this.expr;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.quote + this.expr + this.quote;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Str) {\r\n\t\texpr = expr.trim();\r\n\t\tif ((_wrapped(expr, '\"', '\"') || _wrapped(expr, \"'\", \"'\")) \r\n\t\t&& !Lexer.match(expr, [' ']).length) {\r\n\t\t\tvar quote = _wrapped(expr, '\"', '\"') ? '\"' : \"'\";\r\n\t\t\treturn new Static(\r\n\t\t\t\t_unwrap(expr, quote, quote),\r\n\t\t\t\tquote\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Str;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {_isObject} from './Js.js';\r\nimport {_each} from './Obj.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Num (number) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\n\r\n/**\r\n * In an array of numbers, returns the item closest to the given value.\r\n *\r\n * @param array|object \tarr\r\n * @param int \t \t\tnum\r\n * @param bool \t \t\tbyKey\r\n *\r\n * @return number\r\n */\r\nconst _closest = function(arr, num, byKey = false) {\r\n\tvar keys = null;\r\n\tvar entries = arr;\r\n\tif (byKey || _isObject(entries)) {\r\n\t\tkeys = Object.keys(entries);\r\n\t\tentries = keys.map(key => entries[key]);\r\n\t}\r\n\tvar closest = entries.reduce((prev, curr) => {\r\n\t  return (Math.abs(curr - num) < Math.abs(prev - num) ? curr : prev);\r\n\t}, undefined);\r\n\treturn keys ? keys[entries.indexOf(closest)] : closest;\r\n};\r\n\r\n/**\r\n * Converts words to numbers\r\n * Adapted from Crunz\\Utils | 22-07-17;\r\n *\r\n * @param  text\r\n *\r\n * @return string\r\n */\r\nconst _fromWords = function(text) {\r\n\tvar data = strtr(text, {\r\n\t\tzero:       '0',\r\n\t\ta:          '1',\r\n\t\tone:        '1',\r\n\t\ttwo:        '2',\r\n\t\tthree:      '3',\r\n\t\tfour:       '4',\r\n\t\tfive:       '5',\r\n\t\tsix:        '6',\r\n\t\tseven:      '7',\r\n\t\teight:      '8',\r\n\t\tnine:       '9',\r\n\t\tten:        '10',\r\n\t\televen:     '11',\r\n\t\ttwelve:     '12',\r\n\t\tthirteen:   '13',\r\n\t\tfourteen:   '14',\r\n\t\tfifteen:    '15',\r\n\t\tsixteen:    '16',\r\n\t\tseventeen: \t'17',\r\n\t\teighteen:   '18',\r\n\t\tnineteen:   '19',\r\n\t\ttwenty:     '20',\r\n\t\tthirty:     '30',\r\n\t\tforty:      '40',\r\n\t\tfourty:     '40',\r\n\t\tfifty:      '50',\r\n\t\tsixty:      '60',\r\n\t\tseventy:    '70',\r\n\t\teighty:     '80',\r\n\t\tninety:     '90',\r\n\t\thundred:    '100',\r\n\t\tthousand:   '1000',\r\n\t\tmillion:    '1000000',\r\n\t\tbillion:    '1000000000',\r\n\t\tand:        '',\r\n\t});\r\n\r\n\t// Coerce all tokens to numbers\r\n\tvar parts = data.split('/[\\s-]+/').map(val => parseFloat(val));\r\n\r\n\tvar tmp   = null;\r\n\tvar sum   = 0;\r\n\tvar last  = null;\r\n\r\n\t_each(parts, (i, part) => {           \r\n\t\tif (tmp !== '') {                \r\n\t\t\tif (tmp > part) {\r\n\t\t\t\tif (last >= 1000) {                                       \r\n\t\t\t\t\tsum += tmp;\r\n\t\t\t\t\ttmp = part;\r\n\t\t\t\t} else {          \r\n\t\t\t\t\ttmp = tmp + part;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttmp = tmp * part;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttmp = part;\r\n\t\t}\r\n\t\t\r\n\t\tlast = part;\r\n\t});\r\n\r\n\treturn sum + tmp;    \r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport {\r\n\t_closest,\r\n\t_fromWords\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport * as _Arr from './Arr.js';\r\nimport * as _Js from './Js.js';\r\nimport * as _Num from './Num.js';\r\nimport * as _Obj from './Obj.js';\r\nimport * as _Str from './Str.js';\r\n\r\n/**\r\n * Standardize functions as\r\n * prototype methods.\r\n */\r\nconst standardize = (a, prototype, prefix = '') => Object.keys(a).reduce((prototype, funcName) => _Obj._with(prototype, prefix + funcName, function() {\r\n\treturn a[funcName](this, ...arguments);\r\n}), prototype);\r\n\r\n/**\r\n * Deliver functions without\r\n * their initial underscore.\r\n */\r\nconst rename = (a, b = {}) => Object.keys(a).reduce((b, funcName) => _Obj._with(b, funcName.substr(1), a[funcName]), b);\r\nconst Arr = rename(_Arr);\r\nconst Js = rename(_Js);\r\nconst Num = rename(_Num);\r\nconst Obj = rename(_Obj);\r\nconst Str = rename(_Str);\r\n\r\n/**\r\n * @exports\r\n */\r\nexport {Arr, Js, Num, Obj, Str, standardize};","\r\n/**\r\n * @imports\r\n */\r\nimport Jsen from './Jsen.js';\r\nimport ExprInterface from './ExprInterface.js';\r\nimport Lexer from './Lexer.js';\r\nimport Contexts from './Contexts.js';\r\nimport Abstraction from './Expr/Abstraction.js';\r\nimport AbstractionInterface from './Expr/AbstractionInterface.js';\r\nimport Arr from './Expr/Arr.js';\r\nimport ArrInterface from './Expr/ArrInterface.js';\r\nimport Arguments from './Expr/Arguments.js';\r\nimport ArgumentsInterface from './Expr/ArgumentsInterface.js';\r\nimport Assertion from './Expr/Assertion.js';\r\nimport AssertionInterface from './Expr/AssertionInterface.js';\r\nimport Assignment from './Expr/Assignment.js';\r\nimport AssignmentInterface from './Expr/AssignmentInterface.js';\r\nimport Bool from './Expr/Bool.js';\r\nimport BoolInterface from './Expr/BoolInterface.js';\r\nimport Call from './Expr/Call.js';\r\nimport CallInterface from './Expr/CallInterface.js';\r\nimport Comments from './Expr/Comments.js';\r\nimport CommentsInterface from './Expr/CommentsInterface.js';\r\nimport Comparison from './Expr/Comparison.js';\r\nimport ComparisonInterface from './Expr/ComparisonInterface.js';\r\nimport Condition from './Expr/Condition.js';\r\nimport ConditionInterface from './Expr/ConditionInterface.js';\r\nimport Deletion from './Expr/Deletion.js';\r\nimport DeletionInterface from './Expr/DeletionInterface.js';\r\nimport Func from './Expr/Func.js';\r\nimport FuncInterface from './Expr/FuncInterface.js';\r\nimport Math from './Expr/Math.js';\r\nimport MathInterface from './Expr/MathInterface.js';\r\nimport Num from './Expr/Num.js';\r\nimport NumInterface from './Expr/NumInterface.js';\r\nimport Obj from './Expr/Obj.js';\r\nimport ObjInterface from './Expr/ObjInterface.js';\r\nimport Reference from './Expr/Reference.js';\r\nimport ReferenceInterface from './Expr/ReferenceInterface.js';\r\nimport Return from './Expr/Return.js';\r\nimport ReturnInterface from './Expr/ReturnInterface.js';\r\nimport Statements from './Expr/Statements.js';\r\nimport StatementsInterface from './Expr/StatementsInterface.js';\r\nimport Str from './Expr/Str.js';\r\nimport StrInterface from './Expr/StrInterface.js';\r\nimport * as Commons from '@onephrase/commons';\r\n\r\n/**\r\n * @var object\r\n */\r\nJsen.grammars = {\r\n\tComments: Comments,\t\t\t// // single-line | /* double-line */\r\n\tReturn: Return,\t\t\t\t// return field1\r\n\tStatements: Statements,\t\t// field1 = 3; field2 = val2\r\n\tDeletion: Deletion,\t\t\t// delete field1\r\n\tAssignment: Assignment,\t\t// field1[key1].key2 = k\r\n\tFunc: Func,\t\t\t\t\t// (field1, field2) => {}\r\n\tAbstraction: Abstraction,\t// (field1)\r\n\tCondition: Condition,\t\t// field1 > field2 ? val1 : val2\r\n\tAssertion: Assertion,\t\t// !field1 && field2\r\n\tComparison: Comparison,\t\t// field1 > field2\r\n\tMath: Math,\t\t\t\t\t// field1 + field2\r\n\tArr: Arr,\t\t\t\t\t// [field1, field2]\r\n\tObj: Obj,\t\t\t\t\t// {field1:val1, field2:val2}\r\n\tNum: Num,\t\t\t\t\t// [0-9]\r\n\tStr: Str,\t\t\t\t\t// \"\"\r\n\tBool: Bool,\t\t\t\t\t// true\r\n\tCall: Call,\t\t\t\t\t// field1()\r\n\tReference: Reference,\t\t\t\t// field1\r\n};\r\n\r\nCall.utils = Commons;\r\n\r\n/**\r\n * @exports\r\n */\r\nexport {\r\n\tExprInterface,\r\n\tLexer,\r\n\tContexts\r\n};\r\nexport {\r\n\tAbstraction,\r\n\tArr,\r\n\tArguments,\r\n\tAssertion,\r\n\tAssignment,\r\n\tBool,\r\n\tCall,\r\n\tComments,\r\n\tComparison,\r\n\tCondition,\r\n\tDeletion,\r\n\tFunc,\r\n\tMath,\r\n\tNum,\r\n\tObj,\r\n\tReference,\r\n\tReturn,\r\n\tStr,\r\n\tStatements\r\n};\r\nexport {\r\n\tAbstractionInterface,\r\n\tArrInterface,\r\n\tArgumentsInterface,\r\n\tAssertionInterface,\r\n\tAssignmentInterface,\r\n\tBoolInterface,\r\n\tCallInterface,\r\n\tCommentsInterface,\r\n\tComparisonInterface,\r\n\tConditionInterface,\r\n\tDeletionInterface,\r\n\tFuncInterface,\r\n\tMathInterface,\r\n\tNumInterface,\r\n\tObjInterface,\r\n\tReferenceInterface,\r\n\tReturnInterface,\r\n\tStrInterface,\r\n\tStatementsInterface\r\n};\r\nexport default Jsen;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Jsen from '@onephrase/jsen';\r\n\r\n/**\r\n * ---------------------------\r\n * Mql (base) class\r\n *\r\n * TODO:\r\n *\t\tSELECT *\r\n *\t\tSELECT ... FROM (SELECT ...)\r\n *\t\tPREPARED STATEMENTS PLACEHOLDERS\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Mql = class extends Jsen {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, Parsers, params = {}, Static = Mql) {\r\n\t\tif (!('mutates' in params)) {\r\n\t\t\tparams.mutates = true;\r\n\t\t}\r\n\t\tif (!params.opts) {\r\n\t\t\tparams.opts = {};\r\n\t\t}\r\n\t\tif (!('ci' in params.opts)) {\r\n\t\t\tparams.opts.ci = true;\r\n\t\t}\r\n\t\treturn super.parse(expr, Parsers, params, Static);\r\n\t}\r\n};\r\n\r\n\r\nexport default Mql;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {ExprInterface} from '@onephrase/jsen';\r\n\r\n/**\r\n * ---------------------------\r\n * ExprInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class extends ExprInterface {};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAssertion\r\n} from '@onephrase/jsen';\r\n\r\n/**\r\n * @prop array\r\n */\r\nAssertion.operators = {and: ' and ', or: ' or '};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Assertion;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer,\r\n\tReference as _Reference\r\n} from '@onephrase/jsen';\r\nimport {\r\n\t_isUndefined,\r\n\t_isString,\r\n\t_isEmpty\r\n} from '@onephrase/commons/src/Js.js';\r\nimport {\r\n\t_each\r\n} from '@onephrase/commons/src/Obj.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Reference class\r\n * ---------------------------\r\n */\t\t\t\t\r\nconst Reference = class extends _Reference {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(context, name, backticks = false) {\r\n\t\tvar isPath = _isString(name) && /(<-|->)/.test(name);\r\n\t\tif (isPath && !backticks) {\r\n\t\t\tbackticks = true;\r\n\t\t}\r\n\t\tsuper(context, name, backticks);\r\n\t\tthis.isPath = isPath;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRow) {\r\n\t\t// Lets find the table that contains the column\r\n\t\tif (!this.isContext && this.searchWithoutContext !== false) {\r\n\t\t\tvar contexts = Reference.findContexts(tempRow, this.name);\r\n\t\t\tif (!contexts.length) {\r\n\t\t\t\tthrow new Error('\"' + this.toString() + '\" is unknown!');\r\n\t\t\t}\r\n\t\t\tif (!this.context) {\r\n\t\t\t\tif (contexts.indexOf('$') === -1 && contexts.length > 1) {\r\n\t\t\t\t\tthrow new Error('\"' + this.name + '\" is ambiguous!');\r\n\t\t\t\t}\r\n\t\t\t\tif (contexts.length) {\r\n\t\t\t\t\treturn this.parseCallback(contexts.reduce((_c, c) => _c === '$' ? _c : c, '') + '.' + this.toString()/*full toString()*/).eval(tempRow);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar val = super.eval(tempRow);\r\n\t\t// Table unknown?\r\n\t\tif (this.isContext && _isUndefined(val)) {\r\n\t\t\tthrow new Error('Table \"' + this.name + '\" is unknown!');\r\n\t\t}\r\n\t\treturn val;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic findContexts(tempRow, name) {\r\n\t\tvar contexts = [];\r\n\t\t// We ask from schema first\r\n\t\tObject.keys(tempRow).forEach(tableName => {\r\n\t\t\tif (tableName !== '#') {\r\n\t\t\t\t// + this.name does not have any backticka problem\r\n\t\t\t\tif (tempRow['#'] && tempRow['#'][tableName] && !_isEmpty(tempRow['#'][tableName].fields)) {\r\n\t\t\t\t\tvar row = tempRow['#'][tableName].fields;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar row = tempRow[tableName];\r\n\t\t\t\t}\r\n\t\t\t\tif (!_isUndefined(row[name])) {\r\n\t\t\t\t\tcontexts.push(tableName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn contexts;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Reference) {\r\n\t\tvar instance = super.parse(expr, parseCallback, Static);\r\n\t\tif (instance) {\r\n\t\t\tinstance.parseCallback = parseCallback;\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Reference;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAssignment as _Assignment\r\n} from '@onephrase/jsen';\r\nimport Reference from './Reference.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Assignment class\r\n * ---------------------------\r\n */\t\t\t\t\r\nconst Assignment = class extends _Assignment {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRow) {\r\n\t\t// Lets find the table that contains the column\r\n\t\tif (!this.isContext && this.searchWithoutContext !== false) {\r\n\t\t\tvar contexts = Reference.findContexts(tempRow, this.reference.name);\r\n\t\t\tif (!contexts.length) {\r\n\t\t\t\tthrow new Error('\"' + this.toString() + '\" is unknown!');\r\n\t\t\t}\r\n\t\t\tif (!this.reference.context) {\r\n\t\t\t\tif (contexts.indexOf('$') === -1 && contexts.length > 1) {\r\n\t\t\t\t\tthrow new Error('\"' + this.reference.name + '\" is ambiguous!');\r\n\t\t\t\t}\r\n\t\t\t\tif (contexts.length) {\r\n\t\t\t\t\treturn this.parseCallback(contexts[0] + '.' + this.toString()/*full toString()*/, [this.Static], {mutates: true}).eval(tempRow);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn super.eval(tempRow);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Assignment) {\r\n\t\tvar instance = super.parse(expr, parseCallback, Static);\r\n\t\tif (instance) {\r\n\t\t\tinstance.parseCallback = parseCallback;\r\n\t\t\tinstance.Static = Static;\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Assignment;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tCall as _Call\r\n} from '@onephrase/jsen';\r\nimport {\r\n\t_isUndefined,\r\n\t_isFunction\r\n} from '@onephrase/commons/src/Js.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Call class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Call = class extends _Call {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.evalWith(context, this.args.eval(context, callback));\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tevalWith(context, args, callback = null) {\r\n\t\tvar reference = this.reference.getEval(context, callback);\r\n\t\tif (!_isUndefined(reference.name)) {\r\n\t\t\t// -----------------------------\r\n\t\t\tif (_isFunction(callback)) {\r\n\t\t\t\treturn callback(this, reference.context, reference.name, args);\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tif (_isFunction(reference.context[reference.name.toUpperCase()])) {\r\n\t\t\t\treturn reference.context[reference.name.toUpperCase()](...args);\r\n\t\t\t}\r\n\t\t\tthrow new Error('\"' + reference.name + '()\" called on ' + typeof reference.context + '!');\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Call) {\r\n\t\treturn super.parse(expr, parseCallback, Static);\r\n\t}\r\n}\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Call;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tComparison\r\n} from '@onephrase/jsen';\r\n\r\n/**\r\n * @prop array\r\n */\r\nComparison.operators = {\r\n\trelative: {\r\n\t\tlesserThan: '<',\r\n\t\tgreaterThan: '>',\r\n\t\tlesserThanOrEqualsTo: '<=',\r\n\t\tgreaterThanOrEqualsTo: '>=',\r\n\t},\r\n\tpartial: {\r\n\t\tany: 'any',\r\n\t\tin: 'in',\r\n\t\tlike: 'like',\r\n\t},\r\n\texact: {\r\n\t\tnotEqualsTo: '<>',\r\n\t\t// must be after all ocurrencies of \"=\"\r\n\t\tis: '=',\r\n\t},\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Comparison;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer,\r\n\tCondition as _Condition\r\n} from '@onephrase/jsen';\r\nimport {\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Condition class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Condition = class extends _Condition {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(assertion, onTrue, onFalse) {\r\n\t\tsuper();\r\n\t\tthis.assertion = assertion;\r\n\t\tthis.onTrue = onTrue;\r\n\t\tthis.onFalse = onFalse;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn 'IF (' + [\r\n\t\t\tthis.assertion.toString(context), \r\n\t\t\tthis.onTrue.toString(context),\r\n\t\t\tthis.onFalse.toString(context)\r\n\t\t].join(', ') + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Condition) {\r\n\t\tif (expr.match(/^if[ ]*?\\(/i)) {\r\n\t\t\tvar tokens = Lexer.split(_unwrap(expr.trim().substr(2).trim(), '(', ')'), [',']);\r\n\t\t\tif (tokens.length !== 3) {\r\n\t\t\t\tthrow new Error('Malformed condition expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new Static(...tokens.map(expr => parseCallback(expr.trim())));\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Condition;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AggrInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'AggregateExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * WindowInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'WindowConstruct'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * OrderByInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'OrderByExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport {\r\n\t_sort\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_before,\r\n\t_beforeLast\r\n} from '@onephrase/commons/src/Str.js';\r\nimport OrderByInterface from './OrderByInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * OrderBy class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst OrderBy = class extends OrderByInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(columns, withRollup = false) {\r\n\t\tsuper();\r\n\t\tthis.columns = columns;\r\n\t\tthis.withRollup = withRollup;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRows) {\r\n\t\tvar order = (rows, by) => {\r\n\t\t\t// Drilldown...\r\n\t\t\tvar grouping = {};\r\n\t\t\trows.forEach(row => {\r\n\t\t\t\tvar _for = by[0].expr.eval(row);\r\n\t\t\t\tgrouping[_for] = grouping[_for] || [];\r\n\t\t\t\tgrouping[_for].push(row);\r\n\t\t\t});\r\n\t\t\t// Get esults flattened\r\n\t\t\tvar result = [];\r\n\t\t\t_sort(Object.keys(grouping), by[0].order).forEach(_for => {\r\n\t\t\t\tresult = result.concat(by.length > 1 ? order(grouping[_for], by.slice(1)) : grouping[_for]);\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t};\r\n\t\ttry {\r\n\t\t\tvar ordering = order(tempRows, this.columns);\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error('[\"' + this.toString() + '\" in order by clause]: ' + e.message);\r\n\t\t}\r\n\t\treturn ordering;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar str = [this.columns.map(\r\n\t\t\tc => c.expr.toString(context) + (c.order ? ' ' + c.order : '')\r\n\t\t).join(', ')];\r\n\t\tif (this.withRollup) {\r\n\t\t\tstr.push('WITH ROLLUP');\r\n\t\t}\r\n\t\treturn str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = OrderBy) {\r\n\t\tvar columns = [];\r\n\t\tvar withRollup = false;\r\n\t\tvar parse = Lexer.lex(expr, ['WITH[ ]+ROLLUP'], {useRegex:'i'});\r\n\t\tcolumns = Lexer.split(parse.tokens.shift().trim(), [',']).map(c => {\r\n\t\t\tvar order = c.match(/ASC|DESC/, 'i');\r\n\t\t\tif (order) {\r\n\t\t\t\torder = order[0];\r\n\t\t\t\tc = _beforeLast(c, order).trim();\r\n\t\t\t}\r\n\t\t\treturn {expr:parseCallback(c), order:order};\r\n\t\t});\r\n\t\tif (parse.matches.length === 1) {\r\n\t\t\twithRollup = true;\r\n\t\t}\r\n\t\treturn new Static(columns, withRollup);\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default OrderBy;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_inherit\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport {\r\n\t_wrapped,\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport WindowInterface from './WindowInterface.js';\r\nimport OrderBy from './OrderBy.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Window class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Window = class extends WindowInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(dfn) {\r\n\t\tsuper();\r\n\t\tthis.dfn = dfn;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRows, definitions = {}) {\r\n\t\tvar dfn = this.dfn;\r\n\t\tvar uuid = this.toString();\r\n\t\tif (this.dfn.name) {\r\n\t\t\tif (!definitions || !definitions[this.dfn.name]) {\r\n\t\t\t\tthrow new Error('Window name \"' + this.dfn.name + '\" is undefined!');\r\n\t\t\t}\r\n\t\t\tdfn = _inherit({}, this.dfn, definitions[this.dfn.name]);\r\n\t\t}\r\n\t\tvar exec = (rows, partitionBy) => {\r\n\t\t\tif (partitionBy.length) {\r\n\t\t\t\t// Drilldown...\r\n\t\t\t\tvar partitioning = {};\r\n\t\t\t\trows.forEach(row => {\r\n\t\t\t\t\tvar _for = partitionBy[0].eval(row);\r\n\t\t\t\t\tpartitioning[_for] = partitioning[_for] || [];\r\n\t\t\t\t\tpartitioning[_for].push(row);\r\n\t\t\t\t});\r\n\t\t\t\tObject.values(partitioning).map(partition => exec(partition, partitionBy.slice(1)));\r\n\t\t\t} else {\r\n\t\t\t\tif (dfn.orderBy) {\r\n\t\t\t\t\trows = dfn.orderBy.eval(rows);\r\n\t\t\t\t}\r\n\t\t\t\trows.forEach(row => {\r\n\t\t\t\t\tif (!row.WINDOWS) {\r\n\t\t\t\t\t\trow.WINDOWS = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\trow.WINDOWS[uuid] = rows;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t\ttry {\r\n\t\t\texec(tempRows, dfn.partitionBy || []);\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error('[\"' + this.toString() + '\" in window definition]: ' + e.message);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar length = Object.keys(this.dfn).length;\r\n\t\tif (length === 1 && this.dfn.name) {\r\n\t\t\treturn this.dfn.name;\r\n\t\t}\r\n\t\tvar str = [this.dfn.name];\r\n\t\tif (this.dfn.partitionBy) {\r\n\t\t\tstr.push('PARTITION BY ' + this.dfn.partitionBy.map(expr => expr.toString(context)).join(', '));\r\n\t\t}\r\n\t\tif (this.dfn.orderBy) {\r\n\t\t\tstr.push('ORDER BY ' + this.dfn.orderBy.toString(context));\r\n\t\t}\r\n\t\treturn '(' + str.filter(a => a).join(' ') + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Window) {\r\n\t\tvar dfn = {};\r\n\t\tif (_wrapped(expr, '(', ')')) {\r\n\t\t\tif (expr = _unwrap(expr, '(', ')')) {\r\n\t\t\t\tvar parse = Lexer.lex(expr, ['PARTITION[ ]+BY', 'ORDER[ ]+BY'], {useRegex:'i'});\r\n\t\t\t\tdfn.name = parse.tokens.shift().trim();\r\n\t\t\t\tparse.matches.forEach(clauseType => {\r\n\t\t\t\t\tif (clauseType.toLowerCase().startsWith('partition')) {\r\n\t\t\t\t\t\tdfn.partitionBy = Lexer.split(parse.tokens.shift().trim(), [','])\r\n\t\t\t\t\t\t\t.map(expr => parseCallback(expr));\r\n\t\t\t\t\t} else if (clauseType.toLowerCase().startsWith('order')) {\r\n\t\t\t\t\t\tdfn.orderBy = parseCallback(parse.tokens.shift().trim(), [OrderBy]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdfn.name = expr;\r\n\t\t}\r\n\t\treturn new Static(dfn);\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Window;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_flatten\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_mixin\r\n} from '@onephrase/commons/src/Js.js';\r\nimport {\r\n\t_find\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport {\r\n\t_before\r\n} from '@onephrase/commons/src/Str.js';\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport AggrInterface from './AggrInterface.js';\r\nimport Window from './Window.js';\r\nimport Call from './Call.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Aggr class\r\n * ---------------------------\r\n */\t\t\t\t\r\nconst Aggr = class extends _mixin(Call, AggrInterface) {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, args) {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.args = args;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context, callback = null) {\r\n\t\tvar args = this.args.list.slice();\r\n\t\targs.unshift(this.window ? context.WINDOWS[this.window.toString()] : context.AGGR.rows);\r\n\t\treturn this.evalWith(context, args, callback);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn super.toString(context) + (this.window ? ' OVER ' + this.window.toString(context) : '');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Aggr) {\r\n\t\tvar aggrMatch = null;\r\n\t\tvar aggrMatchRegex = _flatten(Static.funcs).join(\"\\\\(|\") + \"\\\\(\";\r\n\t\tif (aggrMatch = expr.trim().match(new RegExp('^(' + aggrMatchRegex + ')', 'i'))) {\r\n\t\t\tvar funcName = _before(aggrMatch[0], '(').toUpperCase();\r\n\t\t\tvar funcCategory = _find(Static.funcs, val => val === funcName, true)[0];\r\n\t\t\tvar splits = Lexer.split(expr, ['OVER'], {ci:true});\r\n\t\t\tif (funcCategory === 'explicitOver' && splits.length === 1) {\r\n\t\t\t\tthrow new Error(aggrMatch[0] + '() requires an OVER clause!');\r\n\t\t\t}\r\n\t\t\tvar instance = super.parse(splits.shift().trim(), parseCallback, Static);\r\n\t\t\tinstance.funcCategory = funcCategory;\r\n\t\t\tif (splits.length) {\r\n\t\t\t\tinstance.window = parseCallback(splits.pop().trim(), [Window]);\r\n\t\t\t}\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nAggr.funcs = {\r\n\tnormal: [\r\n\t\t'AVG', \r\n\t\t'BIT_AND', \r\n\t\t'BIT_OR', \r\n\t\t'BIT_XOR', \r\n\t\t'COUNT', \r\n\t\t'JSON_ARRAYAGG', \r\n\t\t'JSON_OBJECTAGG', \r\n\t\t'MAX', \r\n\t\t'MIN',\r\n\t\t'STDDEV_POP',\r\n\t\t'STDDEV',\r\n\t\t'STD',\r\n\t\t'STDDEV_SAMP',\r\n\t\t'SUM',\r\n\t\t'VAR_POP',\r\n\t\t'VARIANCE',\r\n\t\t'VAR_SAMP',\r\n\t\t// May not apply to OVER()\r\n\t\t'GROUP_CONCAT',\r\n\t\t'GROUP_CONCAT_WS',\r\n\t],\r\n\texplicitOver: [\r\n\t\t'CUME_DIST', \r\n\t\t'DENSE_RANK', \r\n\t\t'FIRST_VALUE', \r\n\t\t'LAG', \r\n\t\t'LAST_VALUE', \r\n\t\t'LEAD', \r\n\t\t'NTH_VALUE', \r\n\t\t'NTLE',\r\n\t\t'PERCENT_RANK',\r\n\t\t'RANK',\r\n\t\t'ROW_NUMBER',\r\n\t],\r\n\tsupport: [\r\n\t\t'ANY_VALUE', \r\n\t\t'COLUMN', \r\n\t\t'COLUMNS', \r\n\t\t'GROUPING', \r\n\t],\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Aggr;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * SelectInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'SelectStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * TableInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'TableExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * UnionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'UnionConstruct'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_isObject\r\n} from '@onephrase/commons/src/Js.js';\r\nimport FetchInterface from './FetchInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Table class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Table = class extends FetchInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(rows, alias, iterateOnce = false) {\r\n\t\tsuper();\r\n\t\tthis.rows = rows;\r\n\t\tthis.alias = alias;\r\n\t\tthis.iterateOnce = iterateOnce;\r\n\t\t// -----------------\r\n\t\tthis.schema = rows.schema;\r\n\t\tif (!rows.schema) {\r\n\t\t\tthis.schema = {fields:{}, uniqueKeys:[]};\r\n\t\t}\r\n\t\t// -----------------\r\n\t\tthis._onfinish = [];\r\n\t\tthis.cursor = -1;\r\n\t\tthis.next();\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tonfinish(callback) {this._onfinish.push(callback);}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tnext() {\r\n\t\tif (this.cursor === -1) {\r\n\t\t\tthis.cursor = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.cursor < this.rows.length - 1) {\r\n\t\t\tthis.cursor ++;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.rows.length || this.cursor === this.rows.length - 1) {\r\n\t\t\tthis._onfinish.forEach(callback => callback());\r\n\t\t\tif (!this.iterateOnce) {\r\n\t\t\t\tthis.cursor = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tfetch() {\r\n\t\tif (this.cursor < this.rows.length) {\r\n\t\t\treturn this.rows[this.cursor];\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tdelete() {\r\n\t\tif (this.cursor < this.rows.length) {\r\n\t\t\tdelete this.rows[this.cursor];\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinsert(values, columns = []) {\r\n\t\tvar rowObj = {};\r\n\t\tif (this.schema.fields) {\r\n\t\t\tvar schemaColumns = Object.keys(this.schema.fields);\r\n\t\t\tif (columns.length) {\r\n\t\t\t\tvar unknownFields = columns.filter(col => schemaColumns.indexOf(col) === -1);\r\n\t\t\t\tif (unknownFields.length) {\r\n\t\t\t\t\tthrow new Error('Unknown column(s): ' + unknownFields.join(', '));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tcolumns = schemaColumns;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar schemaColumns = columns;\r\n\t\t}\r\n\t\tif (columns.length !== values.length) {\r\n\t\t\tthrow new Error('Column/values count mismatch!');\r\n\t\t}\r\n\t\tschemaColumns.forEach(schemaColumnName => {\r\n\t\t\tvar keyColumnPosition = columns.indexOf(schemaColumnName);\r\n\t\t\tif (keyColumnPosition === -1) {\r\n\t\t\t\trowObj[schemaColumnName] = this.schema.fields && _isObject(this.schema.fields[schemaColumnName]) \r\n\t\t\t\t\t? this.schema.fields[schemaColumnName].default : null;\r\n\t\t\t} else {\r\n\t\t\t\trowObj[schemaColumnName] = values[keyColumnPosition];\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.rows.push(rowObj);\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Table;\r\n","\r\n/**\r\n * ---------------------------\r\n * FetchInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default class {};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Table from './Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * DerivedTable class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst DerivedTable = class extends Table {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(database, query, alias, iterateOnce = false) {\r\n\t\tsuper([], alias, iterateOnce);\r\n\t\tthis.database = database;\r\n\t\tthis.query = query;\r\n\t\tthis.derivative = this.query.bind(this.database);\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tnext() {\r\n\t\tif (!this.eof) {\r\n\t\t\tvar row = this.derivative.fetch();\r\n\t\t\tif (row) {\r\n\t\t\t\tthis.rows.push(row);\r\n\t\t\t} else {\r\n\t\t\t\tthis.eof = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn super.next();\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default DerivedTable;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_isArray\r\n} from '@onephrase/commons/src/Js.js';\r\nimport {\r\n\t_from\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport {\r\n\tAbstractionInterface,\r\n\tReferenceInterface,\r\n\tLexer\r\n} from '../index.js';\r\nimport SelectInterface from './SelectInterface.js';\r\nimport TableInterface from './TableInterface.js';\r\nimport UnionInterface from './UnionInterface.js';\r\nimport DerivedTableBase from '../Base/DerivedTable.js';\r\nimport TableBase from '../Base/Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Table class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Table = class extends TableInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr, alias, claused = false) {\r\n\t\tsuper();\r\n\t\t// ReferenceInterface or AbstractionInterface\r\n\t\tthis.expr = expr;\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = claused;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database = null) {\r\n\t\t// Derived table???\r\n\t\tif (this.expr instanceof AbstractionInterface) {\r\n\t\t\treturn new DerivedTableBase(database, this.expr/*ABS*/.expr/*SELECT*/, this.alias);\r\n\t\t}\r\n\t\tif (this.expr instanceof ReferenceInterface) {\r\n\t\t\t// We must eval() without context...\r\n\t\t\tif (this.expr.context) {\r\n\t\t\t\tvar tableData = this.expr.eval(_from(this.expr.context.name, database));\r\n\t\t\t} else {\r\n\t\t\t\tthis.expr.searchWithoutContext = false;\r\n\t\t\t\tvar tableData = this.expr.eval(database);\r\n\t\t\t}\r\n\t\t\tif (!_isArray(tableData)) {\r\n\t\t\t\tthrow new Error('Table \"' + this.expr.name + '\" could not be initialized!');\r\n\t\t\t}\r\n\t\t\t// + this.expr.name does not have any backticka problem\r\n\t\t\treturn new TableBase(tableData, this.alias || this.expr.name);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [this.expr.toString(context), this.claused ? 'AS' : '', this.alias].filter(a => a).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Table) {\r\n\t\tvar parse = Lexer.lex(expr, [' (as )?'], {useRegex:'i'});\r\n\t\tif (parse.tokens.length < 3) {\r\n\t\t\tvar tableParse = parseCallback(parse.tokens[0]);\r\n\t\t\tif (!(tableParse instanceof ReferenceInterface) \r\n\t\t\t&& !(tableParse instanceof AbstractionInterface && (tableParse.expr instanceof SelectInterface || tableParse.expr instanceof UnionInterface))) {\r\n\t\t\t\tthrow new Error('Table expression must be either a plain reference or a (derived) query!');\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\ttableParse, \r\n\t\t\t\t(parse.tokens[1] || '').trim(), \r\n\t\t\t\t(parse.matches[0] || '').trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * --------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tas(alias) {\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = true;\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Table;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_each,\r\n\t_find\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport {\r\n\t_isArray\r\n} from '@onephrase/commons/src/Js.js';\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport Table from './Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Delete class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Stmt = class {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetToString(context, callback) {\r\n\t\tvar strArray = [];\r\n\t\t_each(this.exprs, (clauseType, expr) => {\r\n\t\t\tvar str = null;\r\n\t\t\tvar clause = this.clauses[clauseType];\r\n\t\t\tif (clauseType === 'joins') {\r\n\t\t\t\tstr = expr.map((join, i) => clause[i] + ' ' + join.toString(context)).join(' ');\r\n\t\t\t} else if (clauseType === 'table') {\r\n\t\t\t\tstr = clause + ' ' + (\r\n\t\t\t\t\t_isArray(expr) ? expr.map(table => table.toString(context)).join(', ') : expr.toString(context)\r\n\t\t\t\t);\r\n\t\t\t} else if (!callback || !(str = callback(clauseType, expr, clause))) {\r\n\t\t\t\tstr = clause + ' ' + expr.toString(context);\r\n\t\t\t}\r\n\t\t\tstrArray.push(str);\r\n\t\t});\r\n\t\treturn strArray.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic getParse(expr, stmtClauses, parseCallback, callback) {\r\n\t\t// Match clauses; case-insensitively\r\n\t\tvar useRegex = 'i';\r\n\t\tvar parse = Lexer.lex(expr, Object.values(stmtClauses), {useRegex:useRegex});\r\n\t\tif (parse.matches.length) {\r\n\t\t\tvar exprs = {};\r\n\t\t\tvar clauses = {};\r\n\t\t\tparse.matches.forEach((clause, i) => {\r\n\t\t\t\tvar clauseType = _find(stmtClauses, c => clause.match(new RegExp(c, useRegex)), true/*deep*/);\r\n\t\t\t\tvar _expr = parse.tokens[i + 1].trim();\r\n\t\t\t\tvar _exprParse = null;\r\n\t\t\t\tif (clauseType === 'joins') {\r\n\t\t\t\t\tvar _exprParse = parseCallback(_expr);\r\n\t\t\t\t\tif (_exprParse.type = clause.match(new RegExp('(INNER|CROSS|LEFT|RIGHT)', 'i'))) {\r\n\t\t\t\t\t\t_exprParse.type = _exprParse.type[0].toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!exprs[clauseType]) {\r\n\t\t\t\t\t\texprs[clauseType] = [_exprParse];\r\n\t\t\t\t\t\tclauses[clauseType] = [clause];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\texprs[clauseType].push(_exprParse);\r\n\t\t\t\t\t\tclauses[clauseType].push(clause);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (clauseType === 'table') {\r\n\t\t\t\t\t\tvar tables = Lexer.split(_expr, [',']).map(\r\n\t\t\t\t\t\t\ttable => parseCallback(table.trim(), [Table])\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tvar _exprParse = tables.length === 1 ? tables[0] : tables;\r\n\t\t\t\t\t} else if (!callback || !(_exprParse = callback(clauseType, _expr))) {\r\n\t\t\t\t\t\tvar _exprParse = parseCallback(_expr);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texprs[clauseType] = _exprParse;\r\n\t\t\t\t\tclauses[clauseType] = clause;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn {exprs:exprs, clauses:clauses};\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Stmt;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * DeleteInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'DeleteStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_avg,\r\n\t_unique,\r\n\t_max,\r\n\t_min,\r\n\t_sum,\r\n\t_rand\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_isNull\r\n} from '@onephrase/commons/src/Js.js';\r\nimport {\r\n\t_after\r\n} from '@onephrase/commons/src/Str.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Row class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Row = class {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCONCAT(...args) {\r\n\t\treturn args.join('');\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCONCAT_WS(...args) {\r\n\t\treturn args.join(args.shift());\r\n\t}\r\n\t\r\n\t/**\r\n\t * ----------------\r\n\t * AGGREGATE FUNCTIONS\r\n\t * ----------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCOUNT(rows, column) {\r\n\t\tif (column.toString() === '*') {\r\n\t\t\treturn rows.length;\r\n\t\t}\r\n\t\tif (arguments.length === 3 && column.toString().toUpperCase() === 'DISTINCT') {\r\n\t\t\tvar vals = _unique(this.COLUMN(rows, arguments[2]));\r\n\t\t} else {\r\n\t\t\tvar vals = this.COLUMN(rows, column);\r\n\t\t}\r\n\t\treturn vals.filter(v => !_isNull(v)).length;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tGROUP_CONCAT(rows, column) {\r\n\t\treturn this.COLUMN(rows, column).join('');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tGROUP_CONCAT_WS(rows, separator, column) {\r\n\t\treturn this.COLUMN(rows, column).join(separator.eval(this));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tAVG(rows, column) {\r\n\t\treturn _avg(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tMAX(rows, column) {\r\n\t\treturn _max(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tMIN(rows, column) {\r\n\t\treturn _min(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tSUM(rows, column) {\r\n\t\treturn _sum(this.COLUMN(rows, column));\r\n\t}\r\n\r\n\t/**\r\n\t * ----------------\r\n\t * AGGREGATE SUPPORT FUNCTIONS\r\n\t * ----------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tANY_VALUE(rows, column) {\r\n\t\treturn _rand(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tGROUPING(rows, ...onColumns) {\r\n\t\tif (!this.AGGR || !this.AGGR.isRollup) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn onColumns.reduce((cum, column, i) => {\r\n\t\t\tvar match = this.AGGR.by.filter(by => {\r\n\t\t\t\tvar byStr = by.toString();\r\n\t\t\t\tvar columnStr = column.toString();\r\n\t\t\t\tif (columnStr.indexOf('.') === -1 && byStr.indexOf('.') > -1) {\r\n\t\t\t\t\tbyStr = _after(byStr, '.');\r\n\t\t\t\t}\r\n\t\t\t\treturn columnStr === byStr;\r\n\t\t\t});\r\n\t\t\treturn match.length ? i + 1 : cum;\r\n\t\t}, 0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCOLUMN(rows, arg) {\r\n\t\treturn rows.map(row => arg.eval(row));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCOLUMNS(rows, args) {\r\n\t\treturn args.map(arg => this.COLUMN(rows, arg));\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Row;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_merge,\r\n\t_from\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport Row from './Row.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Base class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Base = class {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(table, where, ...joins) {\r\n\t\tthis.table = table;\r\n\t\tthis.where = where;\r\n\t\tthis.joins = joins;\r\n\t\t// -------------------------\r\n\t\tthis.schemas = {};\r\n\t\t[this.table, ...this.joins].forEach(table => {\r\n\t\t\tthis.schemas[table.alias] = table.schema || {};\r\n\t\t});\r\n\t\t// -------------------------\r\n\t\tthis._onfinish = [];\r\n\t\tif (this.joins.length) {\r\n\t\t\tthis.joins.reduce((a, b) => {\r\n\t\t\t\ta.onfinish(b.next.bind(b)); return b;\r\n\t\t\t}, this.table).onfinish(() => {this.eof = true;});\r\n\t\t} else {\r\n\t\t\tthis.table.onfinish(() => {this.eof = true;});\r\n\t\t}\r\n\t\tthis.eof = false;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tonfinish(callback) {this._onfinish.push(callback);}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tnext() {\r\n\t\t// -----------------\r\n\t\t// Advance or initilaize?\r\n\t\t// -----------------\r\n\t\tif (this.initialized) {\r\n\t\t\tthis.table.next();\r\n\t\t} else {\r\n\t\t\tthis.initialized = true;\r\n\t\t}\r\n\t\tif (this.eof) {\r\n\t\t\tthis._onfinish.forEach(callback => callback());\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar tables = [this.table.alias];\r\n\t\tvar rowBase = new Row;\r\n\t\t_merge(0, rowBase, _from(this.table.alias, this.table.fetch() || {}));\r\n\t\t// Add schema\r\n\t\tif (Object.keys(this.schemas).length) {\r\n\t\t\trowBase['#'] = this.schemas;\r\n\t\t}\r\n\t\tif (this.joins.length) {\r\n\t\t\tthis.joins.forEach(joinTable => {\r\n\t\t\t\ttables.push(joinTable.alias);\r\n\t\t\t\t_merge(0, rowBase, _from(joinTable.alias, joinTable.fetch()));\r\n\t\t\t\tif (joinTable.join && joinTable.join.type && joinTable.join.type !== 'full') {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tif (joinTable.join.conditionClause.trim().toLowerCase() === 'using') {\r\n\t\t\t\t\t\t\t// Join using \"column name\"...\r\n\t\t\t\t\t\t\tvar column = joinTable.join.condition.toString();\r\n\t\t\t\t\t\t\tvar shouldJoin = rowBase[joinTable.alias][column] === rowBase[this.table.alias][column];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar shouldJoin = joinTable.join.condition.eval(rowBase);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\tthrow new Error('[\"' + joinTable.join.condition.toString() + '\" in JOIN clause]: ' + e.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!shouldJoin) {\r\n\t\t\t\t\t\tswitch(joinTable.join.type) {\r\n\t\t\t\t\t\t\tcase 'left':\r\n\t\t\t\t\t\t\t\t// Clear joined table\r\n\t\t\t\t\t\t\t\tArr.remove(tables, joinTable.alias);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'right':\r\n\t\t\t\t\t\t\t\t// Clear main table\r\n\t\t\t\t\t\t\t\tArr.remove(tables, this.table.alias);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'inner':\r\n\t\t\t\t\t\t\t\t// Clear both tables\r\n\t\t\t\t\t\t\t\tArr.remove(tables, joinTable.alias);\r\n\t\t\t\t\t\t\t\tArr.remove(tables, this.table.alias);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t// -----------------\r\n\t\t// Invalid joins?\r\n\t\t// -----------------\r\n\t\tif (!tables.length) {\r\n\t\t\treturn this.next();\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (this.where && !this.where.eval(rowBase)) {\r\n\t\t\t\treturn this.next();\r\n\t\t\t}\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error('[\"' + this.where.toString() + '\" in WHERE clause]: ' + e.message);\r\n\t\t}\r\n\t\treturn rowBase;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tfetch() {\r\n\t\tvar tempRow = new Row;\r\n\t\t[this.table, ...this.joins].forEach(table => {\r\n\t\t\ttempRow[table.alias] = table.fetch() || {};\r\n\t\t});\r\n\t\treturn tempRow;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tdelete() {\r\n\t\treturn [this.table, ...this.joins].reduce((prevSuccess, table) => prevSuccess + (table.delete() ? 1 : 0), 0) / (1 + this.joins.length);\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Base;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_mixin,\r\n\t_isArray\r\n} from '@onephrase/commons/src/Js.js';\r\nimport Stmt from './Stmt.js';\r\nimport DeleteInterface from './DeleteInterface.js';\r\nimport Base from '../Base/Base.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Delete class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Delete = class extends _mixin(Stmt, DeleteInterface) {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, clauses) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.clauses = clauses;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database) {\r\n\t\t// ---------------------------\r\n\t\t// INITIALIZE DATASOURCES WITH JOIN ALGORITHIMS APPLIED\r\n\t\t// ---------------------------\r\n\t\tvar tables = (_isArray(this.exprs.table) ? this.exprs.table : [this.exprs.table]).concat(this.exprs.joins || []);\r\n\t\ttables = tables.map(table => table.eval(database))\r\n\t\tthis.base = new Base(tables.shift(), this.exprs.where, ...tables);\r\n\t\tvar rowCount = 0;\r\n\t\twhile (this.base.next()) {\r\n\t\t\trowCount += this.base.delete();\r\n\t\t}\r\n\t\treturn rowCount;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.getToString(context);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Delete) {\r\n\t\tif (expr.trim().match(/^DELETE[ ]+FROM/, 'i')) {\r\n\t\t\tvar stmtParse = super.getParse(expr, Static.clauses, parseCallback);\r\n\t\t\treturn new Static(stmtParse.exprs, stmtParse.clauses);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nDelete.clauses = {\r\n\ttable: 'DELETE[ ]+FROM',\r\n\twhere: 'WHERE',\r\n\t// inner join, cross join, {left|right} [outer] join\r\n\tjoins: '(INNER[ ]+|CROSS[ ]+|(LEFT|RIGHT)([ ]+OUTER)?[ ]+)?JOIN',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Delete;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * FieldInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'FieldExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAbstractionInterface,\r\n\tReferenceInterface,\r\n\tLexer\r\n} from '../index.js';\r\nimport {\r\n\t_wrapped,\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\nimport {\r\n\t_from\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport FieldInterface from './FieldInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Field class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Field = class extends FieldInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr, alias, claused = false) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = claused;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRow, database) {\r\n\t\tif (this.expr instanceof AbstractionInterface) {\r\n\t\t\tvar value = this.expr.eval(database);\r\n\t\t} else {\r\n\t\t\tvar value = this.expr.eval(tempRow);\r\n\t\t}\r\n\t\treturn _from(this.getAlias(), value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(tempRow = null) {\r\n\t\treturn [this.expr.toString(tempRow), this.claused ? 'AS' : '', this.alias].filter(a => a).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Field) {\r\n\t\tvar splits = Lexer.split(expr, [' (as )?'], {useRegex:'i', preserveDelims:true});\r\n\t\tvar exprParse = null;\r\n\t\tvar alias = splits.pop().trim();\r\n\t\tvar claused = alias.substr(0, 3).toLowerCase() === 'as ';\r\n\t\tif (claused) {\r\n\t\t\t// With an \"AS\" clause, its easy to obtain the alias...\r\n\t\t\t// E.g: SELECT first_name fname, 4 + 5 result, 5 + 5\r\n\t\t\talias = alias.substr(3).trim();\r\n\t\t\texprParse = parseCallback(splits.join('').trim());\r\n\t\t} else if (splits.length && (!alias.match(/[^0-9a-zA-Z_]/) || _wrapped(alias, '`', '`'))) {\r\n\t\t\t// Without an \"AS\" clause, its hard to determine if an expression is actually aliased...\r\n\t\t\t// E.g: In the statement SELECT first_name fname, 4 + 5 result, 5 + 5 FROM ...,\r\n\t\t\t// we can only assume that the last space-separated expr is rhe alias.\r\n\t\t\t// When that fails, then it is most-likely there is no alias. \r\n\t\t\ttry {\r\n\t\t\t\texprParse = parseCallback(splits.join('').trim());\r\n\t\t\t} catch(e) {}\r\n\t\t}\r\n\t\tif (!exprParse) {\r\n\t\t\talias = null;\r\n\t\t\texprParse = parseCallback(expr);\r\n\t\t}\r\n\t\treturn new Static(exprParse, alias, claused);\r\n\t}\r\n\t\r\n\t/**\r\n\t * --------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tas(alias) {\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = true;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetAlias() {\r\n\t\tvar alias = this.alias \r\n\t\tif (!alias) {\r\n\t\t\talias = Lexer.split(this.expr.toString(), ['.']).pop();\r\n\t\t\tif (_wrapped(alias, '`', '`')) {\r\n\t\t\t\talias = _unwrap(alias, '`', '`');\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn alias;\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Field;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * GroupByInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'GroupByExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport {\r\n\t_inherit,\r\n\t_copy\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport {\r\n\t_after\r\n} from '@onephrase/commons/src/Str.js';\r\nimport GroupByInterface from './GroupByInterface.js';\r\nimport Row from '../Base/Row.js';\r\n\r\n/**\r\n * ---------------------------\r\n * GroupBy class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst GroupBy = class extends GroupByInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(columns, having = null, withRollup = false) {\r\n\t\tsuper();\r\n\t\tthis.columns = columns;\r\n\t\tthis.having = having;\r\n\t\tthis.withRollup = withRollup;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRows) {\r\n\t\tvar groupBy = (rows, by, result) => {\r\n\t\t\t// This will end up either as\r\n\t\t\t// regular summary or rollup {super summary}\r\n\t\t\tif (by.length) {\r\n\t\t\t\t// Drilldown...\r\n\t\t\t\tvar grouping = {};\r\n\t\t\t\trows.forEach(row => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tvar _for = by[0].eval(row);\r\n\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\tthrow new Error('[\"' + this.toString() + '\" in group by clause]: ' + e.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgrouping[_for] = grouping[_for] || [];\r\n\t\t\t\t\tgrouping[_for].push(row);\r\n\t\t\t\t});\r\n\t\t\t\tObject.values(grouping).map(group => groupBy(group, by.slice(1), result));\r\n\t\t\t}\r\n\t\t\tif (!by.length/*We're on end nodes*/ || this.withRollup) {\r\n\t\t\t\tvar summaryRow = new Row; _inherit(summaryRow, rows[0]);\r\n\t\t\t\tsummaryRow.$ = _copy(summaryRow.$);\r\n\t\t\t\tsummaryRow.AGGR = {rows: rows, by: by};\r\n\t\t\t\t// HOW WE'LL DETERMINE A SUPER AGGREGATE ROW...\r\n\t\t\t\tsummaryRow.AGGR.isRollup = by.length && this.withRollup;\r\n\t\t\t\tif (summaryRow.AGGR.isRollup) {\r\n\t\t\t\t\tby.forEach(b => {\r\n\t\t\t\t\t\tb = b.toString().indexOf('.') > -1 ? _after(b.toString(), '.') : b.toString();\r\n\t\t\t\t\t\tif (b in summaryRow.$) {\r\n\t\t\t\t\t\t\tsummaryRow.$[b] = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tresult.push(summaryRow);\r\n\t\t\t\treturn summaryRow;\r\n\t\t\t}\r\n\t\t};\r\n\t\tvar result = [];\r\n\t\tgroupBy(tempRows, this.columns.slice(), result);\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar str = [this.columns.map(c => c.toString(context)).join(', ')];\r\n\t\tif (this.withRollup) {\r\n\t\t\tstr.push('WITH ROLLUP');\r\n\t\t}\r\n\t\tif (this.having) {\r\n\t\t\tstr.push('HAVING ' + this.having.toString(context));\r\n\t\t}\r\n\t\treturn str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = GroupBy) {\r\n\t\tvar parse = Lexer.lex(expr, ['WITH[ ]+ROLLUP', 'HAVING'], {useRegex:'i'});\r\n\t\tvar columns = Lexer.split(parse.tokens.shift().trim(), [',']).map(\r\n\t\t\tc => parseCallback(c.trim())\r\n\t\t);\r\n\t\tvar having = null;\r\n\t\tvar withRollup = false;\r\n\t\tparse.matches.forEach(clauseType => {\r\n\t\t\tif (clauseType.toLowerCase().startsWith('with')) {\r\n\t\t\t\twithRollup = true;\r\n\t\t\t\tparse.tokens.shift();\r\n\t\t\t} else if (clauseType.toLowerCase().startsWith('having')) {\r\n\t\t\t\thaving = parseCallback(parse.tokens.shift().trim());\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn new Static(columns, having, withRollup);\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default GroupBy;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * InsertInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'InsertStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\n//import ValInterface from './ValInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Val class\r\n * ---------------------------\r\n */\t\t\t\t\r\nconst Val = class {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(input) {\r\n\t\tthis.input = input;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn this.input;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn '?';\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Val;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport {\r\n\t_wrapped,\r\n\t_unwrap\r\n} from '@onephrase/commons/src/Str.js';\r\nimport {\r\n\t_intersect\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport InsertInterface from './InsertInterface.js';\r\nimport Assignment from './Assignment.js';\r\nimport Reference from './Reference.js';\r\nimport Assertion from './Assertion.js';\r\nimport Comparison from './Comparison.js';\r\nimport Base from '../Base/Base.js';\r\nimport Table from './Table.js';\r\nimport Val from './Val.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Insert class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Insert = class extends InsertInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(table, columns, values, insertType, onDuplicateKeyUpdate) {\r\n\t\tsuper();\r\n\t\tthis.table = table;\r\n\t\tthis.columns = columns;\r\n\t\tthis.values = values;\r\n\t\tthis.insertType = insertType;\r\n\t\tthis.onDuplicateKeyUpdate = onDuplicateKeyUpdate;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database) {\r\n\t\tvar tableBase = this.table.eval(database);\r\n\t\t// ---------------------------\r\n\t\tvar values = this.values;\r\n\t\tvar insertType = this.insertType.toUpperCase();\r\n\t\tif (insertType === 'SET') {\r\n\t\t\tvar columns = values.map(assignment => assignment.reference.name);\r\n\t\t\tvalues = [values.map(assignment => assignment.val)];\r\n\t\t} else {\r\n\t\t\tif (insertType === 'SELECT') {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvalues = values.eval(database).map(row => Object.values(row));\r\n\t\t\t\t} catch(e) {\r\n\t\t\t\t\tthrow new Error('[\"' + values.toString() + '\" in SELECT clause]: ' + e.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar columns = this.columns || (tableBase.schema.fields ? Object.keys(tableBase.schema.fields) : []);\r\n\t\t}\r\n\t\tvar uniqueKeys = _intersect(tableBase.schema.uniqueKeys, columns);\r\n\t\tvar rowCount = 0;\r\n\t\tvar rowArr = null;\r\n\t\twhile (rowArr = values.shift()) {\r\n\t\t\t// ------------------------\r\n\t\t\t// HANDLE ON_DUPLICATE_KEY_UPDATE\r\n\t\t\t// ------------------------\r\n\t\t\tvar duplicateKeyUpdateCount = 0;\r\n\t\t\tif (uniqueKeys.length) {\r\n\t\t\t\t// Generate a comparisons list on values going into unique keys\r\n\t\t\t\tvar comparisons = uniqueKeys.map(columnName => {\r\n\t\t\t\t\tvar keyColumnPosition = columns.indexOf(columnName);\r\n\t\t\t\t\tvar valueExpr = insertType === 'SELECT' \r\n\t\t\t\t\t\t? new Val(rowArr[keyColumnPosition]) \r\n\t\t\t\t\t\t: rowArr[keyColumnPosition]/*Still a parse object*/;\r\n\t\t\t\t\tvar nameExpr = new Reference(null, columnName);\r\n\t\t\t\t\tnameExpr.parseCallback = this.parseCallback;\r\n\t\t\t\t\treturn new Comparison(nameExpr, valueExpr, '=');\r\n\t\t\t\t});\r\n\t\t\t\t// Generate the assertion\r\n\t\t\t\tvar where = new Assertion(comparisons, Assertion.operators.or);\r\n\t\t\t\tvar base = new Base(this.table.eval(database), where);\r\n\t\t\t\twhile (base.next()) {\r\n\t\t\t\t\tif (!this.onDuplicateKeyUpdate) {\r\n\t\t\t\t\t\tthrow new Error('Inserting duplicate values on unique keys: ' + uniqueKeys.join(', '));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar rowBase = base.fetch();\r\n\t\t\t\t\tthis.onDuplicateKeyUpdate.forEach(assignment => assignment.eval(rowBase));\r\n\t\t\t\t\tduplicateKeyUpdateCount ++;\r\n\t\t\t\t}\r\n\t\t\t\trowCount += duplicateKeyUpdateCount;\r\n\t\t\t}\r\n\t\t\t// ------------------------\r\n\t\t\t// HANDLE INSERT\r\n\t\t\t// ------------------------\r\n\t\t\tif (!duplicateKeyUpdateCount) {\r\n\t\t\t\tif (insertType !== 'SELECT') {\r\n\t\t\t\t\trowArr = rowArr.map(val => val.eval(database));\r\n\t\t\t\t}\r\n\t\t\t\ttableBase.insert(rowArr, columns);\r\n\t\t\t\trowCount ++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rowCount;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar str = [this.table.toString(context)];\r\n\t\tif (this.insertType.toUpperCase() === 'SET') {\r\n\t\t\tstr.push('SET ' + this.values.map(assignment => assignment.toString(context)).join(', '));\r\n\t\t} else {\r\n\t\t\tif (this.columns) {\r\n\t\t\t\tstr.push('(' + this.columns.join(', ') + ')');\r\n\t\t\t}\r\n\t\t\tif (this.insertType.toUpperCase() === 'SELECT') {\r\n\t\t\t\tstr.push(this.values.toString(context));\r\n\t\t\t} else {\r\n\t\t\t\tstr.push('VALUES (' + this.values.map(\r\n\t\t\t\t\trow => row.map(\r\n\t\t\t\t\t\tval => val.toString(context)\r\n\t\t\t\t\t).join(', ')\r\n\t\t\t\t).join('), (') + ')');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.onDuplicateKeyUpdate) {\r\n\t\t\tstr.push('ON DUPLICATE KEY UPDATE ' + this.onDuplicateKeyUpdate.map(assignment => assignment.toString(context)).join(', '));\r\n\t\t}\r\n\t\treturn 'INSERT INTO ' + str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Insert) {\r\n\t\tif (expr.trim().match(/^INSERT([ ]+INTO)?/, 'i')) {\r\n\t\t\tvar parse = Lexer.lex(expr, Object.values(Insert.clauses), {useRegex:'i'});\r\n\t\t\tparse.tokens.shift();\r\n\t\t\tvar table = parse.tokens.shift().trim();\r\n\t\t\tvar columns = [];\r\n\t\t\tvar values = parse.tokens.shift();\r\n\t\t\tvar insertType = parse.matches[1].toUpperCase();\r\n\t\t\tif (insertType === 'SET') {\r\n\t\t\t\ttable = parseCallback(table, [Table]);\r\n\t\t\t\tvalues = Lexer.split(values.trim(), [','])\r\n\t\t\t\t\t.map(e => parseCallback(e.trim(), [Assignment]));\r\n\t\t\t} else {\r\n\t\t\t\tvar tableColumnSplit = Lexer.split(table, [' ']);\r\n\t\t\t\ttable = parseCallback(tableColumnSplit.shift().trim(), [Table]);\r\n\t\t\t\tif (tableColumnSplit.length) {\r\n\t\t\t\t\tcolumns = tableColumnSplit[0].trim();\r\n\t\t\t\t\tcolumns = Lexer.split(_wrapped(columns, '(', ')') ? _unwrap(columns, '(', ')') : columns, [','])\r\n\t\t\t\t\t\t.map(c => c.trim());\r\n\t\t\t\t}\r\n\t\t\t\tif (insertType === 'SELECT') {\r\n\t\t\t\t\tvalues = parseCallback('SELECT ' + values.trim());\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// insertType === 'VALUES' || insertType === 'VALUE'\r\n\t\t\t\t\tvalues = Lexer.split(values.trim(), [','])\r\n\t\t\t\t\t\t.map(row => Lexer.split(_unwrap(row.trim(), '(', ')'), [','])\r\n\t\t\t\t\t\t\t.map(val => parseCallback(val.trim())));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar onDuplicateKeyUpdate = parse.tokens.shift();\r\n\t\t\tif (onDuplicateKeyUpdate) {\r\n\t\t\t\tonDuplicateKeyUpdate = Lexer.split(onDuplicateKeyUpdate.trim(), [','])\r\n\t\t\t\t\t.map(assignment => parseCallback(assignment.trim(), [Assignment]));\r\n\t\t\t}\r\n\t\t\tvar instance = new Static(table, columns, values, insertType, onDuplicateKeyUpdate);\r\n\t\t\tinstance.parseCallback = parseCallback;\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nInsert.clauses = {\r\n\ttable: 'INSERT([ ]+INTO)?',\r\n\tvalues: '(VALUES|VALUE|SET|SELECT)',\r\n\tupdate: 'ON[ ]+DUPLICATE[ ]+KEY[ ]+UPDATE',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Insert;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * JoinInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'JoinConstruct'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport JoinInterface from './JoinInterface.js';\r\nimport {Lexer} from '../index.js';\r\nimport Table from './Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Join class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Join = class extends JoinInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(table, condition, conditionClause) {\r\n\t\tsuper();\r\n\t\tthis.table = table;\r\n\t\tthis.condition = condition;\r\n\t\tthis.conditionClause = conditionClause;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database) {\r\n\t\tvar TableBase = this.table.eval(database);\r\n\t\tTableBase.join = {\r\n\t\t\ttype: this.type, // Expected to be added by context\r\n\t\t\tcondition: this.condition, \r\n\t\t\tconditionClause: this.conditionClause\r\n\t\t};\r\n\t\treturn TableBase;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [\r\n\t\t\tthis.table.toString(context), \r\n\t\t\tthis.conditionClause, \r\n\t\t\tthis.condition.toString(context)\r\n\t\t].join('');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, params = {}, cntxt = null) {\r\n\t\tvar parse = Lexer.lex(expr, Join.clauses);\r\n\t\tif (parse.tokens.length === 2) {\r\n\t\t\treturn new /*static*/Join(\r\n\t\t\t\tparseCallback(parse.tokens[0], [Table]), \r\n\t\t\t\tparseCallback(parse.tokens[1]), \r\n\t\t\t\tparse.matches[0]\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nJoin.clauses = [' ON ', ' USING '];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Join;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\t_mixin,\r\n\t_isArray\r\n} from '@onephrase/commons/src/Js.js';\r\nimport {\r\n\t_from as _arr_ftom,\r\n\t_pushUnique\r\n} from '@onephrase/commons/src/Arr.js';\r\nimport {\r\n\t_merge,\r\n\t_find\r\n} from '@onephrase/commons/src/Obj.js';\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport SelectInterface from './SelectInterface.js';\r\nimport AggrInterface from './AggrInterface.js';\r\nimport Field from './Field.js';\r\nimport Stmt from './Stmt.js';\r\nimport Window from './Window.js';\r\nimport GroupBy from './GroupBy.js';\r\nimport OrderBy from './OrderBy.js';\r\nimport Base from '../Base/Base.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Select class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Select = class extends _mixin(Stmt, SelectInterface) {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, clauses, distinct = false, references = []) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.clauses = clauses;\r\n\t\tthis.distinct = distinct;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database) {\r\n\t\t// ---------------------------\r\n\t\t// UNDERSTAND AGGREGATIONS\r\n\t\t// ---------------------------\r\n\t\tvar aggrExprs = {aggr:[], win:[]};\r\n\t\tvar pathExprs = [];\r\n\t\tthis.meta.vars.forEach(x => {\r\n\t\t\tif (x instanceof AggrInterface) {\r\n\t\t\t\t_pushUnique(x.window ? aggrExprs.win : aggrExprs.aggr, x);\r\n\t\t\t}\r\n\t\t\tif (x.isPath) {\r\n\t\t\t\t_pushUnique(pathExprs, x);\r\n\t\t\t}\r\n\t\t});\r\n\t\t// ---------------------------\r\n\t\t// BUILD RESPONSE ROWS INTO THE \"$\" KEY\r\n\t\t// ---------------------------\r\n\t\tvar applyFields = (tempRows, fields, collectAggrs = null) => {\r\n\t\t\tif (collectAggrs) {\r\n\t\t\t\tcollectAggrs = {aggr:[], win:[]};\r\n\t\t\t}\r\n\t\t\ttempRows.forEach(tempRow => {\r\n\t\t\t\tif (!tempRow.$) {\r\n\t\t\t\t\ttempRow.$ = {};\r\n\t\t\t\t}\r\n\t\t\t\tfields.forEach(field => {\r\n\t\t\t\t\tif (collectAggrs) {\r\n\t\t\t\t\t\t// This build will ignore AGGR columns for nowthis.\r\n\t\t\t\t\t\tvar aggrs = field.expr.meta.vars.slice().concat([field.expr]).filter(x => x instanceof AggrInterface);\r\n\t\t\t\t\t\tif (aggrs.length) {\r\n\t\t\t\t\t\t\t_pushUnique(aggrs.filter(x => x.window).length ? collectAggrs.win : collectAggrs.aggr, field);\r\n\t\t\t\t\t\t\t// But we'll set it to UNDEFINED (not NULL), to secure slot\r\n\t\t\t\t\t\t\tif (!(field.getAlias() in tempRow.$)) {\r\n\t\t\t\t\t\t\t\ttempRow.$[field.getAlias()] = undefined;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t_merge(1, tempRow.$, field.eval(tempRow, database));\r\n\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\tthrow new Error('[\"' + field.toString() + '\" in field list]: ' + e.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn collectAggrs;\r\n\t\t};\r\n\t\t\r\n\t\t// ---------------------------\r\n\t\t// INITIALIZE DATASOURCES WITH JOIN ALGORITHIMS APPLIED\r\n\t\t// ---------------------------\r\n\t\tvar tables = (_isArray(this.exprs.table) ? this.exprs.table : [this.exprs.table]).concat(this.exprs.joins || [])\r\n\t\t\t.map(table => table.eval(database));\r\n\t\tvar mainTable = tables.shift();\r\n\t\t\r\n\t\t/**\r\n\t\tpathExprs.forEach(pathReference => {\r\n\t\t\tvar pathLexer = new PathLexer(pathReference.name);\r\n\t\t\tvar fields, fieldDef, match = pathLexer.match();\r\n\t\t\tif (mainTable.schema \r\n\t\t\t&& (fields = mainTable.schema.fields) \r\n\t\t\t&& (fieldDef = fields[match.subject]) \r\n\t\t\t&& (fieldDef.type || '').toLowerCase() === 'json') {\r\n\t\t\t\tthis.handleJsonAccess(match.subject, Lexer.finalOperand);\r\n\t\t\t} else {\r\n\t\t\t\tthis.handleSmartJoin(match);\r\n\t\t\t}\r\n\t\t});\r\n\t\t*/\r\n\t\t\r\n\t\tthis.base = new Base(mainTable, this.exprs.where, ...tables);\r\n\t\t// BUILD (TEMP) ROWS, WHERE\r\n\t\tvar tempRows = [];\r\n\t\twhile (this.base.next()) {\r\n\t\t\ttempRows.push(this.base.fetch());\r\n\t\t}\r\n\t\t// BUILD FIELDS\r\n\t\tvar aggrFields = applyFields(tempRows, this.exprs.fields, true/*collectAggrs*/);\r\n\t\t// ---------------------------\r\n\t\t// GROUP BY?\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.groupBy || aggrExprs.aggr.length) {\r\n\t\t\tvar groupBy = this.exprs.groupBy || new GroupBy([]);\r\n\t\t\ttempRows = groupBy.eval(tempRows);\r\n\t\t\t// REVISIT RESPONSE ROWS and apply AGGR columns\r\n\t\t\tapplyFields(tempRows, aggrFields.aggr);\r\n\t\t}\r\n\t\t// ---------------------------\r\n\t\t// WINDOWING\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.windows || aggrExprs.win.length) {\r\n\t\t\tvar completed = [];\r\n\t\t\taggrExprs.win.forEach(expr => {\r\n\t\t\t\tvar uuid = expr.window.toString();\r\n\t\t\t\tif (completed.indexOf(uuid) === -1) {\r\n\t\t\t\t\texpr.window.eval(tempRows, this.exprs.windows);\r\n\t\t\t\t\tcompleted.push(uuid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// REVISIT RESPONSE ROWS and apply AGGR OVER () columns\r\n\t\t\tapplyFields(tempRows, aggrFields.win);\r\n\t\t}\r\n\t\t// ---------------------------\r\n\t\t// ORDER BY\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.orderBy) {\r\n\t\t\ttempRows = this.exprs.orderBy.eval(tempRows);\r\n\t\t}\r\n\t\t// ---------------------------\r\n\t\t// DISTINCT\r\n\t\t// ---------------------------\r\n\t\tif (this.distinct) {\r\n\t\t\ttempRows = tempRows.filter((tempRow, i) => i === _find(tempRows, _tempRow => _even(_tempRow, tempRow)));\r\n\t\t}\r\n\t\t// ---------------------------\r\n\t\t// LIMIT\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.offset || this.exprs.limit) {\r\n\t\t\tvar limit = this.exprs.limit ? this.exprs.limit.slice() : [];\r\n\t\t\tvar offset = this.exprs.offset || (limit.length === 2 ? limit.shift() : 0);\r\n\t\t\ttempRows = limit.length \r\n\t\t\t\t? tempRows.slice(offset, offset + limit[0]) \r\n\t\t\t\t: tempRows.slice(offset);\r\n\t\t}\r\n\t\t// ---------------------------\r\n\t\t// SEND RESPONSE ROWS\r\n\t\t// ---------------------------\r\n\t\treturn tempRows.map(tempRow => tempRow.$);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates the necessary join to satisfy access field names with the \"->\" and/or \"<-\".\r\n\t *\r\n\t * @param object \tmatch\r\n\t *\r\n\t * @return void\r\n\t */\r\n\t_handleSmartJoin(match) {\r\n\t\tvar accessPath = match.subject;\r\n\t\tvar fields = null;\r\n\t\tmatch.functions.forEach((func, i) => {\r\n\t\t\tif (func.name.toLowerCase() === 'select') {\r\n\t\t\t\tfields = _arr_ftom(fields).concat(func.args);\r\n\t\t\t\tmatch.functions.splice(i, 1);\r\n\t\t\t}\r\n\t\t});\r\n\t\t// -----------------------\r\n\t\tvar paramsObject = new Relationist(this.tableName, match.subject);\r\n\t\tvar paramsObject_immediateTarget = paramsObject.getImmediateTarget();\r\n\t\tvar actingKey = paramsObject_immediateTarget.actingKey;\r\n\t\tvar postTarget = paramsObject_immediateTarget.postTarget;\r\n\t\tvar uniqueTargetID = PathLexer.getSignature(paramsObject_immediateTarget.subject(), match.functions);\r\n\t\tif (!this.smartJoins[uniqueTargetID]) {\r\n\t\t\tthis.smartJoins[uniqueTargetID] = paramsObject;\r\n\t\t\tparamsObject_immediateTarget.query().apply(match.functions);\r\n\t\t} else {\r\n\t\t\tparamsObject_immediateTarget = this.smartJoins[uniqueTargetID].getImmediateTarget();\r\n\t\t}\r\n\t\t// -----------------------\r\n\t\t// The acting key needed on the join's \"on\" clause.\r\n\t\tparamsObject_immediateTarget.query().select(actingKey);\r\n\t\t// The select magic, with the backtick saviour\r\n\t\tif (postTarget) {\r\n\t\t\tparamsObject_immediateTarget.query().select(new Expression('`' + postTarget + '` AS `' + match.query + '`'));\r\n\t\t} else if (_array(fields) || _array(match.body) || match.functions) {\r\n\t\t\tfields = _array(fields) ? fields : match.body;\r\n\t\t\tif (_array(fields) && fields.length > 1 \r\n\t\t\t|| (_arr_ftom(fields)[0] === '*' && (fields = paramsObject_immediateTarget.blueprint().fields.keys()))\r\n\t\t\t|| (fields = paramsObject_immediateTarget.blueprint().defaultFields)) {\r\n\t\t\t\tfields = fields.map(field => {\r\n\t\t\t\t\tvar {field, alias} = Static.splitAlias(field);\r\n\t\t\t\t\treturn 'JSON_OBJECT(\"' + (alias || field) + '\", ' + field + ')';\r\n\t\t\t\t});\r\n\t\t\t\tfields = fields.length > 1 ? 'JSON_MERGE(' + fields.join(', ') + ')' : fields[0];\r\n\t\t\t} else {\r\n\t\t\t\tfields = fields[0];\r\n\t\t\t}\r\n\t\t\tparamsObject_immediateTarget.query().select(new Expression(fields + ' AS `' + match.query + '`'));\r\n\t\t}\r\n\t\t// -----------------------\r\n\t\t// Use UAC?\r\n\t\tif (this.withUac) {\r\n\t\t\tparamsObject_immediateTarget.query().withUac();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.getToString(context, (clauseType, expr, clause) => {\r\n\t\t\tif (clauseType === 'fields') {\r\n\t\t\t\treturn clause + ' ' + expr.map(x => x.toString(context)).join(', ');\r\n\t\t\t} else if (clauseType === 'windows') {\r\n\t\t\t\treturn clause + ' ' + Object.keys(expr).map(\r\n\t\t\t\t\twindowName => windowName + ' AS ' + expr[windowName].toString(context)\r\n\t\t\t\t).join(', ');\r\n\t\t\t} else if (clauseType === 'groupBy' || clauseType === 'orderBy') {\r\n\t\t\t\treturn clause + ' ' + expr.toString(context);\r\n\t\t\t} else if (clauseType === 'limit') {\r\n\t\t\t\treturn clause + ' ' + expr.join(', ');\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Select) {\r\n\t\tif (expr.trim().substr(0, 6).toLowerCase() === 'select') {\r\n\t\t\tvar stmtParse = super.getParse(expr, Static.clauses, parseCallback, (clauseType, _expr) => {\r\n\t\t\t\tif (clauseType === 'fields') {\r\n\t\t\t\t\treturn Lexer.split(_expr, [',']).map(\r\n\t\t\t\t\t\tfield => parseCallback(field.trim(), [Field])\r\n\t\t\t\t\t);\r\n\t\t\t\t} else if (clauseType === 'windows') {\r\n\t\t\t\t\tvar windowsByName = {};\r\n\t\t\t\t\tLexer.split(_expr, [',']).forEach(window => {\r\n\t\t\t\t\t\t// WINDOW w AS (PARTITION BY country ORDER BY city ASC, state DESC), u AS (...)\r\n\t\t\t\t\t\t// NOTICE the space around \"as\", important in view of \"city ASC\"\r\n\t\t\t\t\t\tvar windowSplit = window.split(new RegExp(' as ', 'i'));\r\n\t\t\t\t\t\twindowsByName[windowSplit[0].trim()] = parseCallback(windowSplit[1].trim(), [Window]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn windowsByName;\r\n\t\t\t\t} else if (clauseType === 'groupBy') {\r\n\t\t\t\t\treturn parseCallback(_expr, [GroupBy]);\r\n\t\t\t\t} else if (clauseType === 'orderBy') {\r\n\t\t\t\t\treturn parseCallback(_expr, [OrderBy]);\r\n\t\t\t\t} else if (clauseType === 'limit') {\r\n\t\t\t\t\treturn _expr.split(',').map(n => parseInt(n));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn new Static(\r\n\t\t\t\tstmtParse.exprs, \r\n\t\t\t\tstmtParse.clauses, \r\n\t\t\t\t(stmtParse.clauses.fields.match(/DISTINCT/i) || [])[0],\r\n\t\t\t\tstmtParse.references,\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nSelect.clauses = {\r\n\tfields: 'SELECT([ ]+(ALL|DISTINCT))?',\r\n\ttable: 'FROM',\r\n\twhere: 'WHERE',\r\n\t// INNER JOIN, CROSS JOIN, {LEFT|RIGHT} [OUTER] JOIN\r\n\tjoins: '(INNER[ ]+|CROSS[ ]+|(LEFT|RIGHT)([ ]+OUTER)?[ ]+)?JOIN',\r\n\tgroupBy: 'GROUP[ ]+BY',\r\n\twindows: 'WINDOW',\r\n\torderBy: 'ORDER[ ]+BY',\r\n\toffset: 'OFFSET',\r\n\tlimit: 'LIMIT',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Select;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {Lexer} from '../index.js';\r\nimport OrderBy from './OrderBy.js';\r\nimport UnionInterface from './UnionInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Union class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Union = class extends UnionInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(query, queries, orderBy = null, limit = null) {\r\n\t\tsuper();\r\n\t\tthis.query = query;\r\n\t\tthis.queries = queries;\r\n\t\tthis.orderBy = orderBy;\r\n\t\tthis.limit = limit;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar str = [[this.query.toString(context)].concat(\r\n\t\t\tthis.queries.map(q => (q.onDuplicate ? q.onDuplicate.toUpperCase() + ' ' : '') + q.select.toString(context))\r\n\t\t).join(' UNION ')];\r\n\t\tif (this.orderBy) {\r\n\t\t\tstr.push('ORDER BY ' + this.orderBy.toString(context));\r\n\t\t}\r\n\t\tif (this.limit) {\r\n\t\t\tstr.push('LIMIT ' + this.limit.join(', '));\r\n\t\t}\r\n\t\treturn str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Union) {\r\n\t\tvar parse = null;\r\n\t\tvar paramsRegex = {useRegex: 'i'};\r\n\t\tif ((parse = Lexer.lex(expr, [' UNION([ ]+(ALL|DISTINCT))? '], paramsRegex)) && parse.matches.length) {\r\n\t\t\tvar selects = parse.tokens;\r\n\t\t\tvar clauses = parse.matches;\r\n\t\t\tvar orderBy = null;\r\n\t\t\tvar limit = null;\r\n\t\t\t// Are the selects parenthisized? Then there could be outer ORDER BY / LIMIT clauses\r\n\t\t\tif (selects[0].trim().startsWith('(')) {\r\n\t\t\t\tvar lastStmtSplit = Lexer.lex(selects.pop(), ['ORDER[ ]+BY', 'LIMIT'], paramsRegex);\r\n\t\t\t\tselects.push(lastStmtSplit.tokens.shift());\r\n\t\t\t\tlastStmtSplit.matches.forEach(clause => {\r\n\t\t\t\t\tvar _expr = lastStmtSplit.tokens.shift().trim();\r\n\t\t\t\t\tif (clause.toUpperCase().startsWith('ORDER')) {\r\n\t\t\t\t\t\torderBy = parseCallback(_expr, [OrderBy]);\r\n\t\t\t\t\t} else if (clause.toUpperCase().startsWith('LIMIT')) {\r\n\t\t\t\t\t\tlimit = _expr.split(',').map(n => parseInt(n));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(selects.shift().trim()),\r\n\t\t\t\tselects.map((select, i) => {return {\r\n\t\t\t\t\tselect: parseCallback(select.trim()),\r\n\t\t\t\t\tonDuplicate: (clauses[i].match(new RegExp('ALL|DISTINCT', 'i')) || [])[0]\r\n\t\t\t\t}}),\r\n\t\t\t\torderBy,\r\n\t\t\t\tlimit\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Union;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * UpdateInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'UpdateStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport {\r\n\t_mixin,\r\n\t_isArray\r\n} from '@onephrase/commons/src/Js.js';\r\nimport UpdateInterface from './UpdateInterface.js';\r\nimport Assignment from './Assignment.js';\r\nimport Base from '../Base/Base.js';\r\nimport Stmt from './Stmt.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Update class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Update = class extends _mixin(Stmt, UpdateInterface) {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, clauses) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.clauses = clauses;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database) {\r\n\t\t// ---------------------------\r\n\t\t// INITIALIZE DATASOURCES WITH JOIN ALGORITHIMS APPLIED\r\n\t\t// ---------------------------\r\n\t\tvar tables = (_isArray(this.exprs.table) ? this.exprs.table : [this.exprs.table]).concat(this.exprs.joins || []);\r\n\t\ttables = tables.map(table => table.eval(database))\r\n\t\tthis.base = new Base(tables.shift(), this.exprs.where, ...tables);\r\n\t\tvar rowCount = 0;\r\n\t\twhile (this.base.next()) {\r\n\t\t\tvar rowBase = this.base.fetch();\r\n\t\t\tthis.exprs.assignments.forEach(assignment => assignment.eval(rowBase));\r\n\t\t\trowCount ++;\r\n\t\t}\r\n\t\treturn rowCount;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.getToString(context, (clauseType, expr, clause) => {\r\n\t\t\tif (clauseType === 'assignments') {\r\n\t\t\t\treturn clause + ' ' + expr.map(assignment => assignment.toString(context)).join(', ');\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Update) {\r\n\t\tif (expr.trim().substr(0, 6).toLowerCase() === 'update') {\r\n\t\t\tvar stmtParse = super.getParse(expr, Static.clauses, parseCallback, (clauseType, _expr) => {\r\n\t\t\t\tif (clauseType === 'assignments') {\r\n\t\t\t\t\treturn Lexer.split(_expr, [','])\r\n\t\t\t\t\t\t.map(assignment => parseCallback(assignment.trim(), [Assignment]));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn new Static(stmtParse.exprs, stmtParse.clauses);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nUpdate.clauses = {\r\n\ttable: 'UPDATE',\r\n\tassignments: 'SET',\r\n\twhere: 'WHERE',\r\n\t// inner join, cross join, {left|right} [outer] join\r\n\tjoins: '(INNER[ ]+|CROSS[ ]+|(LEFT|RIGHT)([ ]+OUTER)?[ ]+)?JOIN',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Update;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '@onephrase/jsen';\r\nimport Mql from './Mql.js';\r\nimport ExprInterface from './ExprInterface.js';\r\n// Reuse\r\nimport {\r\n\tAbstraction,\r\n\tBool,\r\n\tComments,\r\n\tMath,\r\n\tNum,\r\n\tStr\r\n} from '@onephrase/jsen';\r\nimport {\r\n\tAbstractionInterface,\r\n\tBoolInterface,\r\n\tCommentsInterface,\r\n\tMathInterface,\r\n\tNumInterface,\r\n\tStrInterface\r\n} from '@onephrase/jsen';\r\nimport * as Commons from '@onephrase/commons';\r\n// Extended\r\nimport {\r\n\tAssertionInterface,\r\n\tAssignmentInterface,\r\n\tCallInterface,\r\n\tComparisonInterface,\r\n\tConditionInterface,\r\n\tReferenceInterface\r\n} from '@onephrase/jsen';\r\nimport Assertion from './Expr/Assertion.js';\r\nimport Assignment from './Expr/Assignment.js';\r\nimport Call from './Expr/Call.js';\r\nimport Comparison from './Expr/Comparison.js';\r\nimport Condition from './Expr/Condition.js';\r\nimport Reference from './Expr/Reference.js';\r\n// New types\r\nimport Aggr from './Expr/Aggr.js';\r\nimport AggrInterface from './Expr/AggrInterface.js';\r\nimport Delete from './Expr/Delete.js';\r\nimport DeleteInterface from './Expr/DeleteInterface.js';\r\nimport Field from './Expr/Field.js';\r\nimport FieldInterface from './Expr/FieldInterface.js';\r\nimport GroupBy from './Expr/GroupBy.js';\r\nimport GroupByInterface from './Expr/GroupByInterface.js';\r\nimport Insert from './Expr/Insert.js';\r\nimport InsertInterface from './Expr/InsertInterface.js';\r\nimport Join from './Expr/Join.js';\r\nimport JoinInterface from './Expr/JoinInterface.js';\r\nimport OrderBy from './Expr/OrderBy.js';\r\nimport OrderByInterface from './Expr/OrderByInterface.js';\r\nimport Select from './Expr/Select.js';\r\nimport SelectInterface from './Expr/SelectInterface.js';\r\nimport Table from './Expr/Table.js';\r\nimport TableInterface from './Expr/TableInterface.js';\r\nimport Union from './Expr/Union.js';\r\nimport UnionInterface from './Expr/UnionInterface.js';\r\nimport Update from './Expr/Update.js';\r\nimport UpdateInterface from './Expr/UpdateInterface.js';\r\nimport Window from './Expr/Window.js';\r\nimport WindowInterface from './Expr/WindowInterface.js';\r\n\r\n/**\r\n * @var object\r\n */\r\nMql.grammars = {\r\n\t// Statements and union\r\n\tComments: Comments,\t\t\t// // single-line | /* double-line */\r\n\tUnion: Union,\t\t\t\t// ... UNION ...\r\n\tSelect: Select,\t\t\t\t// SELECT ... FROM ...\r\n\tInsert: Insert,\t\t\t\t// INSERT INTO ...\r\n\tUpdate: Update,\t\t\t\t// UPDATE ...\r\n\tDelete: Delete,\t\t\t\t// DELETE FROM ...\r\n\t// Expressions\r\n\tJoin: Join,\t\t\t\t\t// table2 ON|USING ...\r\n\tAbstraction: Abstraction,\t// (...)\r\n\tCondition: Condition,\t\t// IF(..., ..., ...)\r\n\tAssertion: Assertion,\t\t// !field1 OR field2\r\n\tComparison: Comparison,\t\t// field1 > field2\r\n\tMath: Math,\t\t\t\t\t// field1 + field2\r\n\tNum: Num,\t\t\t\t\t// [0-9]\r\n\tStr: Str,\t\t\t\t\t// \"\"\r\n\tBool: Bool,\t\t\t\t\t// true\r\n\tAggr: Aggr,\t\t\t\t\t// MIN() OVER()\r\n\tCall: Call,\t\t\t\t\t// COUNT()\r\n\tReference: Reference,\t\t// field1\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport {\r\n\tExprInterface,\r\n\tLexer\r\n};\r\nexport {\r\n\tAbstraction,\r\n\tAggr,\r\n\tAssertion,\r\n\tAssignment,\r\n\tBool,\r\n\tCall,\r\n\tComments,\r\n\tComparison,\r\n\tCondition,\r\n\tDelete,\r\n\tField,\r\n\tGroupBy,\r\n\tInsert,\r\n\tJoin,\r\n\tMath,\r\n\tNum,\r\n\tOrderBy,\r\n\tReference,\r\n\tSelect,\r\n\tStr,\r\n\tTable,\r\n\tUnion,\r\n\tUpdate,\r\n\tWindow\r\n};\r\nexport {\r\n\tAbstractionInterface,\r\n\tAggrInterface,\r\n\tAssertionInterface,\r\n\tAssignmentInterface,\r\n\tBoolInterface,\r\n\tCallInterface,\r\n\tCommentsInterface,\r\n\tComparisonInterface,\r\n\tConditionInterface,\r\n\tDeleteInterface,\r\n\tFieldInterface,\r\n\tGroupByInterface,\r\n\tInsertInterface,\r\n\tJoinInterface,\r\n\tMathInterface,\r\n\tNumInterface,\r\n\tOrderByInterface,\r\n\tReferenceInterface,\r\n\tSelectInterface,\r\n\tStrInterface,\r\n\tTableInterface,\r\n\tUnionInterface,\r\n\tUpdateInterface,\r\n\tWindowInterface\r\n};\r\nexport default Mql;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Mql from './index.js';\r\n\r\n// As globals\r\nif (!window.OnePhrase) {\r\n\twindow.OnePhrase = {};\r\n}\r\nwindow.OnePhrase.Mql = Mql;"],"sourceRoot":""}