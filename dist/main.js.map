{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../commons/arr/remove.js","webpack:///../commons/js/isArray.js","webpack:///../commons/js/instanceof.js","webpack:///../commons/js/isObject.js","webpack:///../commons/js/isTypeFunction.js","webpack:///../commons/js/isFunction.js","webpack:///../commons/js/isTypeObject.js","webpack:///../commons/js/isBoolean.js","webpack:///../commons/js/isNumeric.js","webpack:///../commons/obj/each.js","webpack:///../commons/obj/compareCallback.js","webpack:///../commons/obj/even.js","webpack:///../jsen/src/ExprInterface.js","webpack:///../jsen/src/Expr/AssignmentInterface.js","webpack:///../jsen/src/Expr/ReferenceInterface.js","webpack:///../jsen/src/Expr/DeletionInterface.js","webpack:///../jsen/src/Expr/CallInterface.js","webpack:///../jsen/src/Jsen.js","webpack:///../commons/js/isString.js","webpack:///../commons/js/isUndefined.js","webpack:///../commons/js/isNull.js","webpack:///../commons/js/isEmpty.js","webpack:///../commons/arr/from.js","webpack:///../commons/js/isTypeArray.js","webpack:///../commons/arr/flatten.js","webpack:///../commons/arr/first.js","webpack:///../commons/arr/last.js","webpack:///../commons/arr/pushUnique.js","webpack:///../commons/obj/getAllPropertyNames.js","webpack:///../commons/obj/getPrototypeChain.js","webpack:///../commons/obj/mergeCallback.js","webpack:///../commons/obj/merge.js","webpack:///../commons/obj/copyPlain.js","webpack:///../jsen/src/Lexer.js","webpack:///../commons/js/isObservable.js","webpack:///../commons/arr/all.js","webpack:///../commons/obj/get.js","webpack:///../jsen/src/Contexts.js","webpack:///../commons/str/wrapped.js","webpack:///../commons/str/after.js","webpack:///../commons/str/before.js","webpack:///../commons/str/beforeLast.js","webpack:///../commons/str/unwrap.js","webpack:///../jsen/src/Expr/AbstractionInterface.js","webpack:///../jsen/src/Expr/Abstraction.js","webpack:///../jsen/src/Expr/ArrInterface.js","webpack:///../jsen/src/Expr/Arr.js","webpack:///../jsen/src/Expr/ArgumentsInterface.js","webpack:///../jsen/src/Expr/Arguments.js","webpack:///../commons/arr/unique.js","webpack:///../jsen/src/Expr/AssertionInterface.js","webpack:///../jsen/src/Expr/Assertion.js","webpack:///../jsen/src/Expr/Assignment.js","webpack:///../jsen/src/Expr/BoolInterface.js","webpack:///../jsen/src/Expr/Bool.js","webpack:///../jsen/src/Expr/Call.js","webpack:///../jsen/src/Expr/CommentsInterface.js","webpack:///../jsen/src/Expr/Comments.js","webpack:///../jsen/src/Expr/ComparisonInterface.js","webpack:///../jsen/src/Expr/Comparison.js","webpack:///../commons/arr/difference.js","webpack:///../jsen/src/Expr/ConditionInterface.js","webpack:///../jsen/src/Expr/Condition.js","webpack:///../jsen/src/Expr/Deletion.js","webpack:///../commons/obj/copy.js","webpack:///../jsen/src/Expr/FuncInterface.js","webpack:///../jsen/src/Expr/Func.js","webpack:///../commons/arr/intersect.js","webpack:///../jsen/src/Expr/MathInterface.js","webpack:///../jsen/src/Expr/Math.js","webpack:///../jsen/src/Expr/NumInterface.js","webpack:///../jsen/src/Expr/Num.js","webpack:///../jsen/src/Expr/ObjInterface.js","webpack:///../jsen/src/Expr/Obj.js","webpack:///../jsen/src/Expr/Reference.js","webpack:///../jsen/src/Expr/ReturnInterface.js","webpack:///../jsen/src/Expr/Return.js","webpack:///../jsen/src/Expr/StatementsInterface.js","webpack:///../jsen/src/Expr/Statements.js","webpack:///../jsen/src/Expr/StrInterface.js","webpack:///../jsen/src/Expr/Str.js","webpack:///../jsen/src/index.js","webpack:///./src/Mql.js","webpack:///./src/ExprInterface.js","webpack:///../commons/arr/sum.js","webpack:///../commons/arr/rand.js","webpack:///../commons/js/mixin.js","webpack:///../commons/obj/find.js","webpack:///../commons/obj/from.js","webpack:///../commons/obj/inherit.js","webpack:///./src/Expr/Assertion.js","webpack:///./src/Expr/Reference.js","webpack:///./src/Expr/Assignment.js","webpack:///./src/Expr/Call.js","webpack:///./src/Expr/Comparison.js","webpack:///./src/Expr/Condition.js","webpack:///./src/Expr/AggrInterface.js","webpack:///./src/Expr/WindowInterface.js","webpack:///./src/Expr/OrderByInterface.js","webpack:///./src/Expr/OrderBy.js","webpack:///../commons/arr/sort.js","webpack:///./src/Expr/Window.js","webpack:///./src/Expr/Aggr.js","webpack:///./src/Expr/SelectInterface.js","webpack:///./src/Expr/TableInterface.js","webpack:///./src/Expr/UnionInterface.js","webpack:///./src/Base/Table.js","webpack:///./src/Base/FetchInterface.js","webpack:///./src/Base/DerivedTable.js","webpack:///./src/Expr/Table.js","webpack:///./src/Expr/Stmt.js","webpack:///./src/Expr/DeleteInterface.js","webpack:///./src/Base/Row.js","webpack:///../commons/arr/avg.js","webpack:///../commons/arr/max.js","webpack:///../commons/arr/min.js","webpack:///./src/Base/Base.js","webpack:///./src/Expr/Delete.js","webpack:///./src/Expr/FieldInterface.js","webpack:///./src/Expr/Field.js","webpack:///./src/Expr/GroupByInterface.js","webpack:///./src/Expr/GroupBy.js","webpack:///./src/Expr/InsertInterface.js","webpack:///./src/Expr/Val.js","webpack:///./src/Expr/Insert.js","webpack:///./src/Expr/JoinInterface.js","webpack:///./src/Expr/Join.js","webpack:///./src/Expr/Select.js","webpack:///./src/Expr/Union.js","webpack:///./src/Expr/UpdateInterface.js","webpack:///./src/Expr/Update.js","webpack:///./src/index.js","webpack:///./src/browser-entry.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","arr","indexOf","itm","limit","splice","Array","isArray","val","obj","classB","mixinTest","classA","Function","prototypes","reduce","prevAns","getPrototypeOf","constructor","toString","isNaN","returnValue","undefined","keys","forEach","k","callback","parseFloat","obj1","obj2","result","contn","v1","testPass","v2","netComparison","assertion","length","push","contrast","returnOnFirstFalse","depth","Expr","jsenType","this","Super","comments","meta","vars","Interface","ExprInterface","Jsen","expr","Parsers","params","Static","parsers","values","grammars","varsScope","parsed","parse","_expr","_Parsers","slice","ReferenceInterface","CallInterface","context","explain","console","log","AssignmentInterface","DeletionInterface","mutates","Error","assert","arguments","_flatten","withObjects","acc","concat","count","firsts","amount","reverse","items","keysAll","until","prototypalChain","getOwnPropertyNames","objs","shift","deepProps","valAtObj1","valAtObj2","isReplace","withSymbols","getOwnPropertyDescriptor","e","filter","Lexer","str","delims","options","instance","$cache","lex","tokens","matches","$str","$options","blocks","$blocks","quotes","$quotes","$comments","runtime","nesting","maxDepth","matchesi","cache","_evalCharsAt","join","charWidth","commentTest","quoteTest","nestingTest","openComment","_testQuotes","openQuote","_testComments","ending","_push","chars","starting","preserveComments","_testNesting","stopChar","_testChars","stopChars","stopCharForward","substr","matchedDelim","preserveDelims","quote","block","match","RegExp","Math","max","testList","test","useRegex","ci","toLowerCase","target","splitSeries","regParse","input","method","prevTest","detectObservables","path","_ctxt","ctxt","_key","isObsvble","reciever","exists","varName","bindThis","cntxt","subject","startsWith","openingTag","endsWith","closingTag","search","pos","afterLast","lastIndexOf","beforeLast","Abstraction","AbstractionInterface","super","eval","parseCallback","ArrInterface","exprs","newExprs","exprA","uniqueSoFar","exprB","even","map","trim","split","Arguments","ArgumentsInterface","list","arg","index","self","Assertion","AssertionInterface","logic","operators","toUpperCase","isOr","or","isNor","nor","isAnd","and","isNand","nand","lastResult","trues","Assignment","reference","operator","getEval","Bool","BoolInterface","state","Call","args","_contexts","func","_cntxts","handler","utils","Num","Str","Arr","Obj","unshift","pop","Comments","CommentsInterface","type","_comments","commentPlacement","splits","_beforeLast","line","replace","commenta","Comparison","ComparisonInterface","operand1","operand2","compare","oper","allItemsMatch","sort","entry1Keys","entry2Keys","arr2","val1","val2","allEntriesMatch","strict","exact","is","isNull","equalsTo","notEqualsTo","relative","lesserThan","greaterThan","lesserThanOrEqualsTo","greaterThanOrEqualsTo","between","partial","contains","any","in","Condition","ConditionInterface","onTrue","onFalse","Deletion","red","del","Func","FuncInterface","paramters","statements","arrowFunctionFormatting","parentParams","ownParams","nameInParent","nameInSelf","defaultValInParent","defaultValInSelf","sup","localContext","defaultVal","multipleContexts","headNoWrap","head","bodyNoWrap","body","b","funcHead","funcBody","param","paramSplit","MathInterface","currentTotal","sub","NumInterface","int","dec","parseInt","ObjInterface","entries","_entriesSplit","entry","Reference","backticks","sourceContext","parts","subjectContext","separator","nameSplit","isContext","Return","ReturnInterface","exprLc","Statements","StatementsInterface","stmts","delim","StrInterface","Mql","opts","total","v","rand","floor","random","Traps","classes","Base","supersMap","Mixin","_class","supers","supersReturnValues","supr","_find","deep","subKey","prev","curr","isPath","tempRow","searchWithoutContext","contexts","findContexts","_c","tableName","fields","row","evalWith","like","OrderBy","OrderByInterface","columns","withRollup","tempRows","order","rows","by","grouping","_for","_arr","a","localeCompare","ordering","message","Window","WindowInterface","dfn","definitions","uuid","exec","partitionBy","partitioning","partition","orderBy","WINDOWS","clauseType","Aggr","AggrInterface","window","AGGR","aggrMatch","aggrMatchRegex","funcs","funcName","funcCategory","normal","explicitOver","support","alias","iterateOnce","schema","uniqueKeys","_onfinish","cursor","next","rowObj","schemaColumns","unknownFields","col","schemaColumnName","keyColumnPosition","default","database","query","derivative","eof","fetch","TableInterface","claused","tableData","tableParse","SelectInterface","UnionInterface","strArray","clause","clauses","table","stmtClauses","_exprParse","tables","column","vals","COLUMN","min","onColumns","isRollup","cum","byStr","columnStr","where","joins","schemas","onfinish","initialized","rowBase","joinTable","conditionClause","condition","shouldJoin","remove","prevSuccess","delete","Delete","DeleteInterface","base","rowCount","getToString","stmtParse","getParse","Field","FieldInterface","getAlias","exprParse","GroupBy","GroupByInterface","having","groupBy","group","summaryRow","$","Insert","InsertInterface","insertType","onDuplicateKeyUpdate","tableBase","assignment","rowArr","duplicateKeyUpdateCount","comparisons","columnName","valueExpr","nameExpr","insert","tableColumnSplit","update","Join","JoinInterface","TableBase","Select","distinct","references","aggrExprs","aggr","win","pathExprs","x","applyFields","collectAggrs","field","aggrs","mainTable","aggrFields","windows","completed","_tempRow","_even","offset","functions","paramsObject","Relationist","paramsObject_immediateTarget","getImmediateTarget","actingKey","postTarget","uniqueTargetID","PathLexer","getSignature","smartJoins","apply","select","Expression","_array","blueprint","defaultFields","splitAlias","withUac","windowName","windowsByName","windowSplit","Union","queries","q","onDuplicate","paramsRegex","selects","lastStmtSplit","Update","UpdateInterface","assignments","OnePhrase"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\n/**\r\n * Removes instances of reference up to <limit> times.\r\n *\r\n * @param array \tarr\r\n * @param mixed\t \titm\r\n * @param int|bool \tlimit\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, itm, limit = false) {\r\n\tvar i = arr.indexOf(itm);\r\n\twhile (i > -1 && (limit || limit === false)) {\r\n\t\tarr.splice(i, 1);\r\n\t\tif (limit > 0) {\r\n\t\t\tlimit --;\r\n\t\t};\r\n\t\ti = arr.indexOf(itm);\r\n\t};\r\n\treturn arr;\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"array\".\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn Array.isArray(val);\r\n};\r\n","\r\n/**\r\n * Instanceof that supports our multi-inheritance implementstion.\r\n *\r\n * @param object\t \tobj1\r\n * @param object\t \tclassB\r\n *\r\n * @return bool\r\n */\r\nexport default function(obj, classB) {\r\n\tif (!obj) {\r\n\t\treturn false;\r\n\t}\r\n\tif (obj instanceof classB) {\r\n\t\treturn true;\r\n\t}\r\n\tvar mixinTest = classA => {\r\n\t\twhile (classA && classA !== Function.prototype) {\r\n\t\t\tif (classA === classB || (classA.prototypes && classA.prototypes.reduce((prevAns, prototype) => prevAns || (prototype === classB) || mixinTest(prototype), false))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tclassA = Object.getPrototypeOf(classA);\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\treturn mixinTest(obj.constructor);\r\n};\r\n","\r\n/**\r\n * Tells if val is pure object.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn !Array.isArray(val) && typeof val === 'object' && val;\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"function\".\r\n * This holds true for both regular functions and classes.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn typeof val === 'function';\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeFunction from './isTypeFunction.js';\r\n\r\n/**\r\n * Tells if val is of type \"function\".\r\n *\r\n * @param object \t\tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn _isTypeFunction(val) || (val && {}.toString.call(val) === '[object function]');\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"object\".\r\n * This holds true for anything object, including built-ins.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn Array.isArray(val) || typeof val === 'object';\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is of type \"boolean\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val === true || val === false;\r\n};\r\n","\r\n/**\r\n * Tells if val is of type \"string\" or a numeric string.\r\n * This holds true for both numbers and numeric strings.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val !== true && val !== false && val !== null && val !== '' && !isNaN(val * 1);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\n\r\n/**\r\n * Loops thru obj flatly with a callback function.\r\n * Stops when callback returns a non-undefined value.\r\n *\r\n * @param array|object \t\t\tobj \t\t\tThe array or object to iterate.\r\n * @param function \t\t\t\tcallback \t\tThe callback function.\r\n *\r\n * @return mixed|null\t\t\tAny non-null return from callback\r\n */\r\nexport default function(obj, callback) {\r\n\tvar returnValue = undefined;\r\n\tif (_isTypeObject(obj)) {\r\n\t\tObject.keys(obj).forEach(k => {\r\n\t\t\tif (returnValue !== false) {\r\n\t\t\t\treturnValue = callback(_isNumeric(k) ? parseFloat(k) : k, obj[k]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn returnValue;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isBoolean from '../js/isBoolean.js';\r\nimport _each from './each.js';\r\n\r\n/**\r\n * Gets the match(es) between (members of) two values;\r\n * assertion optionally custom.\r\n *\r\n * @param mixed \t\t\tob1\r\n * @param mixed \t\t\tobj2\r\n * @param string|function\tassertion\r\n * @param bool\t\t\t\tnetComparison\r\n * @param bool\t\t\t\tcontrast\r\n * @param bool\t\t\t\treturnOnFirstFalse\r\n *\r\n * @return bool|array|object\r\n */\r\nexport default function(obj1, obj2, assertion = true, netComparison = true, contrast = false, returnOnFirstFalse = false) {\r\n\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\tvar result = [];\r\n\t\tvar contn = true;\r\n\t\tobj1.forEach(v1 => {\r\n\t\t\tif (!contn) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar testPass = false;\r\n\t\t\t_each(obj2, (k, v2) => {\r\n\t\t\t\tif (!testPass || (netComparison && _isTypeObject(v1))) {\r\n\t\t\t\t\ttestPass = assertion(v1, v2);\r\n\t\t\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\r\n\t\t\t\t\t\ttestPass = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_isTypeObject(testPass) && netComparison) {\r\n\t\t\t\t\t\t// Further recursions should use this testPass as v1\r\n\t\t\t\t\t\tv1 = testPass;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (_isTypeObject(testPass)) {\r\n\t\t\t\tresult.push(netComparison ? testPass : v1);\r\n\t\t\t} else if (!_isBoolean(testPass)) {\r\n\t\t\t\tresult.push(testPass);\r\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\r\n\t\t\t\tresult.push(v1);\r\n\t\t\t} else if (returnOnFirstFalse) {\r\n\t\t\t\tcontn = false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\tif (_isObject(obj1) && _isObject(obj2)) {\r\n\t\tvar result = {};\r\n\t\tvar contn = true;\r\n\t\tObject.keys(obj1).forEach(k => {\r\n\t\t\tif (!contn) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar testPass = assertion(obj1[k], obj2[k]);;\r\n\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\r\n\t\t\t\ttestPass = false;\r\n\t\t\t}\r\n\t\t\tif (_isTypeObject(testPass)) {\r\n\t\t\t\tresult[k] = netComparison ? testPass : obj1[k];\r\n\t\t\t} else if (!_isBoolean(testPass)) {\r\n\t\t\t\tresult[k] = testPass;\r\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\r\n\t\t\t\tresult[k] = obj1[k];\r\n\t\t\t} else if (returnOnFirstFalse) {\r\n\t\t\t\tcontn = false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _compareCallback from './compareCallback.js';\r\n\r\n/**\r\n * Asserts (members of) the first value against (members of) subsequent values.\r\n * Assertion could be TRUE, FALSE, or custom.\r\n *\r\n * @param mixed \t\t\tobj1\r\n * @param mixed \t\t\tobj2\r\n * @param bool|function\t\tassertion\r\n * @param int\t\t\t\tdepth\r\n *\r\n * @return bool\r\n */\r\nconst _even = function(obj1, obj2, assertion = true, depth = 1) {\r\n\tif ((_isArray(obj1) && _isArray(obj2) && obj1.length !== obj2.length)\r\n\t|| (_isObject(obj1) && _isObject(obj2) && Object.keys(obj1).length !== Object.keys(obj2).length)) {\r\n\t\treturn false;\r\n\t}\r\n\tvar result = _compareCallback(obj1, obj2, (v1, v2) => {\r\n\t\tif (depth > 0 && ((_isArray(v1) && _isArray(v2)) || (_isObject(v1) && _isObject(v2)))) {\r\n\t\t\treturn _even(v1, v2, assertion, depth - 1);\r\n\t\t}\r\n\t\treturn _isFunction(assertion) ? assertion(v1, v2) : (v1 === v2) === assertion;\r\n\t}, false/*netComparison*/, false/*contrast*/, true/*returnOnFirstFalse*/);\r\n\treturn _isArray(result) ? result.length === obj1.length\r\n\t\t: (_isObject(result) ? Object.keys(result).length === Object.keys(obj1).length : result);\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default _even;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isObject from '@onephrase/commons/js/isObject.js';\r\nimport _even from '@onephrase/commons/obj/even.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ExprInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class {\r\n\t\r\n\t/**\r\n\t * Compares the current instance with another object.\r\n\t *\r\n\t * @param object Expr\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\teven(Expr) {\r\n\t\tif (_isObject(Expr) && Expr.jsenType === this.jsenType) {\r\n\t\t\treturn _even(Expr, this);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Inherits properties from a super Expr.\r\n\t *\r\n\t * @param ExprInterface Super\r\n\t *\r\n\t * @return this\r\n\t */\r\n\tinherit(Super) {\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds comments to the instance.\r\n\t *\r\n\t * @param string\t comments\r\n\t *\r\n\t * @return this\r\n\t */\r\n\twithComments(comments) {\r\n\t\tif (!this.meta) {\r\n\t\t\tthis.meta = {};\r\n\t\t}\r\n\t\tthis.meta.comments = comments;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds variables to the instance.\r\n\t *\r\n\t * @param array\t\t vars\r\n\t *\r\n\t * @return this\r\n\t */\r\n\twithVars(vars) {\r\n\t\tif (!this.meta) {\r\n\t\t\tthis.meta = {};\r\n\t\t}\r\n\t\tthis.meta.vars = vars;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Evaluates the expression instance for a result,\r\n\t * optionally in the context of an object.\r\n\t *\r\n\t * @param object context\r\n\t *\r\n\t * @return mixed\r\n\t */\r\n\t//eval(context = null, callback = null)\r\n\t\r\n\t/**\r\n\t * Serializes the expression instance back to a string,\r\n\t * optionally in the context of an object.\r\n\t *\r\n\t * @param object context\r\n\t *\r\n\t * @return string\r\n\t */\r\n\t//toString(context = null)\r\n\t\r\n\t/**\r\n\t * SAttempts to parse a string into the class instance.\r\n\t *\r\n\t * @param string expr\r\n\t * @param object params\r\n\t *\r\n\t * @return ExprInterface\r\n\t */\r\n\t//static parse(expr, params = {})\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AssignmentInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'AssignmentExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ReferenceInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Reference'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * DeletionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'DeleteExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * CallInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'CallExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _remove from '@onephrase/commons/arr/remove.js';\r\nimport _isArray from '@onephrase/commons/js/isArray.js';\r\nimport _instanceof from '@onephrase/commons/js/instanceof.js';\r\nimport AssignmentInterface from './Expr/AssignmentInterface.js';\r\nimport ReferenceInterface from './Expr/ReferenceInterface.js';\r\nimport DeletionInterface from './Expr/DeletionInterface.js';\r\nimport CallInterface from './Expr/CallInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Jsen (base) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Jsen = class {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, Parsers, params = {}, Static = Jsen) {\r\n\t\tif (!params.meta) {\r\n\t\t\tparams.meta = {vars: []};\r\n\t\t}\r\n\t\tif (expr.length) {\r\n\t\t\tvar parsers = Object.values(Parsers || Static.grammars);\r\n\t\t\tfor (var i = 0; i < parsers.length; i ++) {\r\n\t\t\t\t// From this point forward, all vars is within current scope\r\n\t\t\t\tvar varsScope = params.meta && _isArray(params.meta.vars) ? params.meta.vars.length : 0;\r\n\t\t\t\tvar parsed = parsers[i].parse(expr, (_expr, _Parsers) => Jsen.parse(_expr, _Parsers, params, Static));\r\n\t\t\t\t// Add/remove vars to scope\r\n\t\t\t\tif (parsed && params.meta) {\r\n\t\t\t\t\tif (!parsed.meta) {\r\n\t\t\t\t\t\tparsed.meta = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Reap vars into scope expr\r\n\t\t\t\t\tparsed.meta.vars = params.meta.vars.slice(varsScope);\r\n\t\t\t\t\t// Add vars to scope\r\n\t\t\t\t\tif (_instanceof(parsed, ReferenceInterface) || _instanceof(parsed, CallInterface)) {\r\n\t\t\t\t\t\t_remove(parsed.meta.vars, parsed.context);\r\n\t\t\t\t\t\t_remove(params.meta.vars, parsed.context);\r\n\t\t\t\t\t\tparams.meta.vars.push(parsed);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (parsed && params.explain) {\r\n\t\t\t\t\tconsole.log(expr, ' >>------------->> ', parsed.jsenType);\r\n\t\t\t\t}\r\n\t\t\t\tif ((parsed instanceof AssignmentInterface || parsed instanceof DeletionInterface) \r\n\t\t\t\t&& (!params || !params.mutates)) {\r\n\t\t\t\t\tthrow new Error('[Permission error:] ' + expr);\r\n\t\t\t\t}\r\n\t\t\t\tif (parsed) {\r\n\t\t\t\t\treturn parsed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (params.assert === false) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new Error('[Syntax error:] ' + expr);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Jsen;\r\n","\r\n/**\r\n * Tells if val is of type \"string\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn typeof val === 'string';\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is of type \"undefined\".\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn arguments.length && (val === undefined || typeof val === 'undefined');\r\n};\r\n","\r\n/**\r\n * Tells if val is undefined or is null.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn val === null || val === '';\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNull from './isNull.js';\r\nimport _isUndefined from './isUndefined.js';\r\nimport _isTypeObject from './isTypeObject.js';\r\n\r\n/**\r\n * Tells if val is empty in its own type.\r\n * This holds true for NULLs, UNDEFINED, FALSE, 0,\r\n * objects without keys, empty arrays.\r\n *\r\n * @param string \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn _isNull(val) || _isUndefined(val) || val === false || val === 0 \r\n\t\t|| (_isTypeObject(val) && !Object.keys(val).length);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isTypeArray from '../js/isTypeArray.js';\r\nimport _isEmpty from '../js/isEmpty.js';\r\nimport _isObject from '../js/isObject.js';\r\n\r\n/**\r\n * Casts an array-like object to an array.\r\n *\r\n * @param mixed \tval\r\n *\r\n * @return array\r\n */\r\nexport default function(val) {\r\n\tif (_isArray(val)) {\r\n\t\treturn val;\r\n\t};\r\n\tif (val !== false && val !== 0 && _isEmpty(val)) {\r\n\t\treturn [];\r\n\t};\r\n\tif (_isTypeArray(val)) {\r\n\t\treturn Array.prototype.slice.call(val);\r\n\t};\r\n\tif (_isObject(val)) {\r\n\t\treturn Object.values(val);\r\n\t};\r\n\treturn [val];\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isString from './isString.js';\r\nimport _isUndefined from './isUndefined.js';\r\n\r\n/**\r\n * Tells if val is \"array-like\".\r\n * This holds true for anything that has a length property.\r\n *\r\n * @param object\t \tval\r\n *\r\n * @return bool\r\n */\r\nexport default function(val) {\r\n\treturn !_isString(val) && !_isUndefined(val.length);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\n\r\n/**\r\n * Flattens a nested array to the given depth.\r\n *\r\n * @param array \tarr\r\n * @param int \t \tdepth\r\n * @param bool \t \twithObjects\r\n *\r\n * @return array\r\n */\r\nconst _flatten = function(arr, depth = 1, withObjects = true) {\r\n\tif (!_isNumeric(depth) || depth <= 0) {\r\n\t\treturn arr;\r\n\t};\r\n\tif (!_isArray(arr) && _isObject(arr) && withObjects) {\r\n\t\tarr = Object.values(arr);\r\n\t};\r\n\tif (!_isArray(arr)) {\r\n\t\treturn arr;\r\n\t};\r\n\treturn arr.reduce((acc, val) => _isArray(val) || (_isObject(val) && withObjects) \r\n\t\t? acc.concat(_flatten(!_isArray(val) ? Object.values(val) : val, depth - 1, withObjects)) \r\n\t\t: acc.concat(val), []);\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default _flatten;","\r\n/**\r\n * Returns THE FIRST ENTRY OR A NUMBER OF ENTRIES counting forward from the begining.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nexport default function(arr, amount = 1) {\r\n\tvar count = 0;\r\n\tarr.forEach(itm => {\r\n\t\tcount ++;\r\n\t});\r\n\tvar firsts = arr.slice(arr.length - count, amount);\r\n\treturn arguments.length > 1 ? firsts : firsts[0];\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _first from './first.js';\r\n\r\n/**\r\n * Returns THE LAST ENTRY OR A NUMBER OF ENTRIES counting forward to the end.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nexport default function(arr, amount = 1) {\r\n\treturn arguments.length > 1\r\n\t\t? _first(arr.slice().reverse(), amount).reverse()\r\n\t\t: _first(arr.slice().reverse());\r\n};\r\n","\r\n/**\r\n * Adds an item if not already exist.\r\n *\r\n * @param array \tarr\r\n * @param array\t \t...itms\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, ...items) {\r\n\titems.forEach(itm => {\r\n\t\tif (arr.indexOf(itm) < 0) {\r\n\t\t\tarr.push(itm);\r\n\t\t}\r\n\t});\r\n\treturn arr;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _pushUnique from '../arr/pushUnique.js';\r\nimport _getPrototypeChain from './getPrototypeChain.js';\r\n\r\n/**\r\n * Eagerly retrieves object members all down the prototype chain.\r\n *\r\n * @param object\t \tobj\r\n * @param object\t \tuntil\r\n *\r\n * @return array\r\n */\r\nexport default function(obj, until) {\r\n\tvar keysAll = [];\r\n\t_getPrototypeChain(obj, until).forEach(obj => {\r\n\t\t_pushUnique(keysAll, ...Object.getOwnPropertyNames(obj));\r\n\t});\r\n\treturn keysAll;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\n\r\n/**\r\n * Returns the prototype chain.\r\n *\r\n * @param object \t\tobj\r\n * @param object\t \tuntil\r\n *\r\n * @return bool\r\n */\r\nexport default function(obj, until) {\r\n\tuntil = until || Object.prototype;\r\n\tuntil = until && !_isArray(until) ? [until] : until;\r\n\t// We get the chain of inheritance\r\n\tvar prototypalChain = [];\r\n\tvar obj = obj;\r\n\twhile((obj && (!until || until.indexOf(obj) < 0) && obj.name !== 'default')) {\r\n\t\tprototypalChain.push(obj);\r\n\t\tobj = obj ? Object.getPrototypeOf(obj) : null;\r\n\t}\r\n\treturn prototypalChain;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _isObject from '../js/isObject.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\nimport _getAllPropertyNames from './getAllPropertyNames.js';\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects first array/object;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nexport default function(objs, callback, deepProps = false, isReplace = false, withSymbols = false) {\r\n\tvar depth = 0;\r\n\tvar obj1 = objs.shift();\r\n\tif (_isNumeric(obj1) || obj1 === true || obj1 === false) {\r\n\t\tdepth = obj1;\r\n\t\tobj1 = objs.shift();\r\n\t}\r\n\tif (!objs.length) {\r\n\t\tthrow new Error('_merge() requires two or more array/objects.');\r\n\t}\r\n\tobjs.forEach((obj2, i) => {\r\n\t\tif (!_isTypeObject(obj2) && !_isFunction(obj2)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t(deepProps ? _getAllPropertyNames(obj2) : Object.getOwnPropertyNames(obj2)).forEach(key => {\r\n\t\t\tvar valAtObj1 = obj1[key];\r\n\t\t\tvar valAtObj2 = obj2[key];\r\n\t\t\tif (((_isArray(valAtObj1) && _isArray(valAtObj2)) || (_isObject(valAtObj1) && _isObject(valAtObj2))) \r\n\t\t\t&& (depth === true || depth > 0)) {\r\n\t\t\t\t// RECURSE...\r\n\t\t\t\tobj1[key] = _isArray(valAtObj1) && _isArray(valAtObj2) ? [] : {};\r\n\t\t\t\t_mergeCallback([_isNumeric(depth) ? depth - 1 : depth, obj1[key], valAtObj1, valAtObj2], callback, deepProps, isReplace);\r\n\t\t\t} else if (callback(key, obj1, obj2, i)) {\r\n\t\t\t\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\t\t\t\tif (isReplace) {\r\n\t\t\t\t\t\tobj1[key] = valAtObj2;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tobj1.push(valAtObj2);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (withSymbols) {\r\n\t\t\t\t\tObject.defineProperty(obj1, key, Object.getOwnPropertyDescriptor(obj2, key));\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// In case we're setting a read-only property\r\n\t\t\t\t\t\tobj1[key] = obj2[key];\r\n\t\t\t\t\t} catch(e) {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\treturn obj1;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects first array/object;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nexport default function(...objs) {\r\n\treturn _mergeCallback(objs, (k, obj1, obj2) => {\r\n\t\treturn true;\r\n\t});\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n * Copies only properties of an object.\r\n *\r\n * @param object\t \tobj\r\n * @param array\t\t \tonly\r\n * @param array\t\t \texcept\r\n *\r\n * @return object\r\n */\r\nexport default function(obj, filter = []) {\r\n\treturn _mergeCallback([{}, obj], (key, obj1, obj2) => {\r\n\t\tif (!_isFunction(obj2[key])) {\r\n\t\t\treturn _isFunction(filter) ? filter(key) \r\n\t\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\r\n\t\t}\r\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isString from '@onephrase/commons/js/isString.js';\r\nimport _isUndefined from '@onephrase/commons/js/isUndefined.js';\r\nimport _arrFrom from '@onephrase/commons/arr/from.js';\r\nimport _flatten from '@onephrase/commons/arr/flatten.js';\r\nimport _first from '@onephrase/commons/arr/first.js';\r\nimport _last from '@onephrase/commons/arr/last.js';\r\nimport _merge from '@onephrase/commons/obj/merge.js';\r\nimport _even from '@onephrase/commons/obj/even.js';\r\nimport _copyPlain from '@onephrase/commons/obj/copyPlain.js';\r\n\r\n/**\r\n * --------------------------\r\n * TOKENIZER\r\n * --------------------------\r\n */\r\n\r\nconst Lexer = class {\r\n\r\n\t/**\r\n\t * Factory method.\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic lex(str, delims, options) {\r\n\t\tif (!_isString(str)) {\r\n\t\t\tthrow new Error('Argument1 must be a string!');\r\n\t\t}\r\n\t\t// CREATE NEW -----------------------------\r\n\t\tvar instance = new Lexer(str, options);\r\n\t\t// GIVE CACHE -----------------------------\r\n\t\tLexer.$cache[str] = Lexer.$cache[str] || [];\r\n\t\tLexer.$cache[str].push(instance);\r\n\t\t// RETURN NEW -----------------------------\r\n\t\treturn instance.lex(delims);\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for .split().\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic split(str, delims, options) {\r\n\t\treturn Lexer.lex(str, delims, options).tokens;\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for .match().\r\n\t *\r\n\t * Handles caching.\r\n\t *\r\n\t * @see constructor()\r\n\t */\r\n\tstatic match(str, delims, options) {\r\n\t\treturn Lexer.lex(str, delims, options).matches;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a lexer instance on a string with the given options.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions:\r\n\t * @param string \t\tblocks\t\t\t\tThe strings that begin and end a nested structure\r\n\t * @param number \t\tlimit\t\t\t\tMax results to return\r\n\t * @param string \t\tbackreference\t\tA character like (\\) that prefixes non-delim characters\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tconstructor(str, options) {\r\n\t\tif (!_isString(str)) {\r\n\t\t\tthrow new Error('Lexer requires the first argument to be a string.');\r\n\t\t}\r\n\t\tthis.$str = str;\r\n\t\tthis.$options = options || {};\r\n\t\tif (!this.$options.blocks) {\r\n\t\t\tthis.$options.blocks = Lexer.$blocks;\r\n\t\t}\r\n\t\tif (!this.$options.quotes) {\r\n\t\t\tthis.$options.quotes = Lexer.$quotes;\r\n\t\t}\r\n\t\tif (!this.$options.comments) {\r\n\t\t\tthis.$options.comments = Lexer.$comments;\r\n\t\t}\r\n\t\tthis.$cache = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the instance string on the given delimeters.\r\n\t *\r\n\t * This method supports static calling,\r\n\t * in which case a string is required as the first argument.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tlex(delims, options) {\r\n\t\tvar runtime = {\r\n\t\t\tdelims: _arrFrom(delims),\r\n\t\t\toptions: _merge(true, {}, this.$options, options || {}),\r\n\t\t\tnesting: [],\r\n\t\t\tmaxDepth: 0,\r\n\t\t\tcomments: [],\r\n\t\t\ttokens: [],\r\n\t\t\tmatches: [],\r\n\t\t\tmatchesi: {},\r\n\t\t};\r\n\t\t// ASK INSTANCE CACHE ---------------------------\r\n\t\tif (runtime.options.cache !== false) {\r\n\t\t\tfor (var i = 0; i < this.$cache.length; i ++) {\r\n\t\t\t\tif (_even(this.$cache[i].delims, runtime.delims) && _even(this.$cache[i].options, runtime.options)) {\r\n\t\t\t\t\treturn _copyPlain(this.$cache[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// EVALUATE NEW --------------------------------\r\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\r\n\t\tthis._evalCharsAt(runtime, 0);\r\n\t\tif (runtime.nesting.length) {\r\n\t\t\tthrow new Error('Error parsing the string: ' + this.$str + '. Unterminated blocks: ' + _flatten(runtime.nesting).join(', ') + '');\r\n\t\t}\r\n\t\t// GIVE CACHE ----------------------------------\r\n\t\tif (runtime.options.cache !== false) {\r\n\t\t\tthis.$cache.push(runtime);\r\n\t\t}\r\n\t\t// RETURN NEW ----------------------------------\r\n\t\treturn runtime;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: evaluates and handles the character on the current cursor.\r\n\t * Advances the cursor.\r\n\t *\r\n\t * @param object \truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return void\r\n\t */\r\n\t_evalCharsAt(runtime, i) {\r\n\t\tif (i >= this.$str.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar charWidth = 1;\r\n\t\tvar commentTest = {}, quoteTest = {}, nestingTest = {};\r\n\t\t// Quotes inside comments must be ignored\r\n\t\tif (!runtime.openComment) {\r\n\t\t\tquoteTest = this._testQuotes(runtime, i);\r\n\t\t}\r\n\t\t// Comments inside quotes must be ignored\r\n\t\tif (!runtime.openQuote) {\r\n\t\t\tcommentTest = this._testComments(runtime, i);\r\n\t\t}\r\n\t\t// Save comments\r\n\t\tif (runtime.openComment || commentTest.ending) {\r\n\t\t\t// Save only outer comments\r\n\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\r\n\t\t\t\tvar chars = commentTest.starting || commentTest.ending || this.$str[i];\r\n\t\t\t\tcharWidth = chars.length;\r\n\t\t\t\tthis._push(runtime, chars, 'comments');\r\n\t\t\t\tif (runtime.options.preserveComments) {\r\n\t\t\t\t\tthis._push(runtime, chars);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\t}\r\n\t\t} else if (runtime.openQuote || quoteTest.ending) {\r\n\t\t\t// Yes add quotes\r\n\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t} else if (runtime.options.limit && runtime.matches.length === runtime.options.limit) {\r\n\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\treturn this._evalCharsAt(runtime, i + 1);\r\n\t\t} else {\r\n\t\t\t// Nesting tags inside comments and quotes have been ignored\r\n\t\t\tnestingTest = this._testNesting(runtime, i);\r\n\t\t\t// ---------------------\r\n\t\t\t// STOP ON THIS CHARACTER...?\r\n\t\t\t// ---------------------\r\n\t\t\tvar nestingTest = this._testNesting(runtime, i);\r\n\t\t\t// STOP CHAR(S)? at top level?\r\n\t\t\tvar stopChar = this._testChars(runtime.options.stopChars || [], runtime, i);\r\n\t\t\tif (!runtime.nesting.length && stopChar !== false) {\r\n\t\t\t\truntime.options.stopChar = stopChar;\r\n\t\t\t\truntime.options.stopCharForward = this.$str.substr(i);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// ---------------------\r\n\t\t\t// Match and split now...\r\n\t\t\t// ---------------------\r\n\t\t\tif (!runtime.delims.length) {\r\n\t\t\t\t// BLOCK-BASED SPLITTING...\r\n\t\t\t\tif (runtime.nesting.length === 2 && nestingTest.starting) {\r\n\t\t\t\t\truntime.matches.push(null);\r\n\t\t\t\t\tthis._push(runtime, nestingTest.starting);\r\n\t\t\t\t\tcharWidth = nestingTest.starting.length;\r\n\t\t\t\t} else if (!runtime.nesting.length && nestingTest.ending) {\r\n\t\t\t\t\tthis._push(runtime, nestingTest.ending);\r\n\t\t\t\t\tcharWidth = nestingTest.ending.length;\r\n\t\t\t\t\truntime.matches.push(null);\r\n\t\t\t\t} else/*no-nesting flag*/ {\r\n\t\t\t\t\tthis._push(runtime, this.$str[i]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// ---------------------\r\n\t\t\t\t// DELIMS-BASED SPLITTING\r\n\t\t\t\t// ---------------------\r\n\t\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\r\n\t\t\t\t\t// In case the chars at index 0 is a delim,\r\n\t\t\t\t\t// the resulting split should first have an empty string, instead of undefined\r\n\t\t\t\t\tthis._push(runtime, '');\r\n\t\t\t\t\tvar matchedDelim = this._testChars(runtime.delims, runtime, i);\r\n\t\t\t\t\tif (matchedDelim !== false) {\r\n\t\t\t\t\t\truntime.matches.push(matchedDelim);\r\n\t\t\t\t\t\truntime.matchesi[i] = matchedDelim;\r\n\t\t\t\t\t\tcharWidth = matchedDelim.length || 1;\r\n\t\t\t\t\t\tif (!runtime.options.preserveDelims) {\r\n\t\t\t\t\t\t\t// The current character is a delimiter...\r\n\t\t\t\t\t\t\t// and should not get to appending to the split series down the line\r\n\t\t\t\t\t\t\treturn this._evalCharsAt(runtime, i + (matchedDelim.length || 1));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._push(runtime, matchedDelim || this.$str[i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar chars = nestingTest.starting || nestingTest.ending || this.$str[i];\r\n\t\t\t\t\tcharWidth = chars.length;\r\n\t\t\t\t\tthis._push(runtime, chars);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._evalCharsAt(runtime, i + charWidth);\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a quote start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testQuotes(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.quotes || []).forEach(quote => {\r\n\t\t\tif (this.$str.substr(i, 1) === quote) {\r\n\t\t\t\tif (!runtime.openQuote) {\r\n\t\t\t\t\truntime.openQuote = quote;\r\n\t\t\t\t\tresult.starting = quote;\r\n\t\t\t\t} else if (quote === runtime.openQuote) {\r\n\t\t\t\t\truntime.openQuote = false;\r\n\t\t\t\t\tresult.ending = quote;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a comment start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testComments(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.comments || []).forEach(block => {\r\n\t\t\tif (!runtime.openComment) {\r\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + _first(block)));\r\n\t\t\t\tif (m) {\r\n\t\t\t\t\truntime.openComment = block;\r\n\t\t\t\t\tresult.starting = m[0];\r\n\t\t\t\t}\r\n\t\t\t} else if (_last(block) === _last(runtime.openComment)) {\r\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + _last(block)));\r\n\t\t\t\tif (m) {\r\n\t\t\t\t\truntime.openComment = false;\r\n\t\t\t\t\tresult.ending = m[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a nesting start/end character on the current cursor.\r\n\t *\r\n\t * @param object\truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return object\r\n\t */\r\n\t_testNesting(runtime, i) {\r\n\t\tvar result = {};\r\n\t\t(runtime.options.blocks || []).forEach(block => {\r\n\t\t\tvar starting = this.$str.substr(i).match(new RegExp('^' + _first(block)));\r\n\t\t\tif (starting) {\r\n\t\t\t\truntime.nesting = runtime.nesting.concat([block]);\r\n\t\t\t\tresult.starting = starting[0];\r\n\t\t\t} else if (runtime.nesting.length && _last(block) === _last(_last(runtime.nesting))) {\r\n\t\t\t\tvar ending = this.$str.substr(i).match(new RegExp('^' + _last(block)));\r\n\t\t\t\tif (ending) {\r\n\t\t\t\t\truntime.nesting = runtime.nesting.slice(0, -1);\r\n\t\t\t\t\tresult.ending = ending[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\truntime.maxDepth = Math.max(runtime.maxDepth, runtime.nesting.length);\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Expr helper: tests for a delimiter or stop character on the current cursor.\r\n\t *\r\n\t * @param array\t\ttestList\r\n\t * @param object \truntime\r\n\t * @param int\t\ti\r\n\t *\r\n\t * @return mixed\r\n\t */\r\n\t_testChars(testList, runtime, i) {\r\n\t\tfor (var k = 0; k < testList.length; k ++) {\r\n\t\t\tvar test = testList[k];\r\n\t\t\tif (runtime.options.useRegex) {\r\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + test, runtime.options.useRegex !== true ? runtime.options.useRegex : ''));\r\n\t\t\t\tif (m) {\r\n\t\t\t\t\treturn m[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ((!runtime.options.ci && this.$str.substr(i, test.length) === test)\r\n\t\t\t|| (runtime.options.ci && this.$str.substr(i, test.length).toLowerCase() === test.toLowerCase())) {\r\n\t\t\t\treturn test;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Expr helper: pushes a character or set of characters into the current split series.\r\n\t *\r\n\t * @param object \truntime\r\n\t * @param string\tchars\r\n\t * @param string\ttarget\r\n\t *\r\n\t * @return void\r\n\t */\r\n\t_push(runtime, chars, target = 'tokens') {\r\n\t\tvar splitSeries = runtime.matches.length;\r\n\t\tif (_isUndefined(runtime[target][splitSeries])) {\r\n\t\t\truntime[target][splitSeries] = '';\r\n\t\t}\r\n\t\truntime[target][splitSeries] += chars;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Splits the instance string on the given delimeters and returns the tokens.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tsplit(str, delims, options) {\r\n\t\treturn this.lex(delims, options).tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Splits the instance string on the given delimeters and returns the matches.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions:\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tmatch(str, delims, options) {\r\n\t\treturn this.lex(delims, options).matches;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parses the instance string on the given delimeters using regex.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tregParse(delims, options) {\r\n\t\treturn this.lex(delims, _merge({useRegex: true}, options || {}));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Splits the instance string on the given delimeters using regex; returns the tokens.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tregSplit(delims, options) {\r\n\t\treturn this.regParse(delims, options).tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Matches the instance string on the given delimeters using regex; returns the matches.\r\n\t *\r\n\t * @param string \tstr\r\n\t * @param object\toptions\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tregMatch(delims, options) {\r\n\t\treturn this.regParse(delims, options).matches;\r\n\t}\r\n};\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$blocks = [['\\\\(', '\\\\)'], ['\\\\[', '\\\\]'], ['\\\\{', '\\\\}'],];\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$quotes = ['\"', \"'\", '`',];\r\n\r\n/**\r\n * @var array\r\n */\r\nLexer.$comments = [['\\\\/\\\\*', '\\\\*\\\\/'], ['\\\\/\\\\/', '(\\\\r)?\\\\n'],];\r\n\r\n/**\r\n * @var object\r\n */\r\nLexer.$cache = {};\r\n\r\n/**\r\n * @export\r\n */\r\nexport default Lexer;\r\n\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _all from '../arr/all.js';\r\nimport _isFunction from './isFunction.js';\r\nimport _isObject from './isObject.js';\r\n\r\n/**\r\n * Tells if a given object has observability methods.\r\n *\r\n * @param mixed\t\tinput\r\n *\r\n * @return bool\r\n */\r\nexport default function(input) {\r\n\treturn _isObject(input) && _all([\r\n\t\t'observe',\r\n\t\t'unobserve',\r\n\t\t'get',\r\n\t\t'set',\r\n\t\t'has',\r\n\t\t'del',\r\n\t], method => _isFunction(input[method]));\r\n};\r\n","\r\n/**\r\n * Tells if ALL items pass the test.\r\n *\r\n * @param array \tarr\r\n * @param function \tcallback\r\n *\r\n * @return bool\r\n */\r\nexport default function(arr, callback) {\r\n\treturn arr.reduce((prevTest, itm) => prevTest && callback(itm), true);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isObservable from '../js/isObservable.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _isUndefined from '../js/isUndefined.js';\r\nimport _isNull from '../js/isNull.js';\r\nimport _arrFrom from '../arr/from.js';\r\n\r\n/**\r\n * Retrieves the value at the given path.\r\n *\r\n * A return value of undefined is ambiguous, and can mean either that the\r\n * path does not exist, or that the path actually exists but with a value of undefined. If it is required to\r\n * know whether the path actually exists, pass an object as a third argument.\r\n * This object will have an \"exists\" key set to true/false.\r\n *\r\n * @param object \t\t\t\tctxt\r\n * @param array \t\t\t\tpath\r\n * @param object \t\t\t\treciever\r\n * @param bool\t \t\t\t\tdetectObservables\r\n *\r\n * @return mixed\r\n */\r\nexport default function(ctxt, path, reciever = {}, detectObservables = true) {\r\n\tpath = _arrFrom(path).slice();\r\n\tvar _ctxt = ctxt;\r\n\twhile(!_isUndefined(_ctxt) && !_isNull(_ctxt) && path.length) {\r\n\t\tvar _key = path.shift();\r\n\t\tvar isObsvble = detectObservables && _isObservable(_ctxt);\r\n\t\tif (!(isObsvble ? _ctxt.get(_key) : (_isTypeObject(_ctxt) ? _key in _ctxt : _ctxt[_key]))) {\r\n\t\t\treciever.exists = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t_ctxt = isObsvble ? _ctxt.get(_key) : _ctxt[_key];\r\n\t}\r\n\treciever.exists = true;\r\n\treturn _ctxt;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _get from '@onephrase/commons/obj/get.js';\r\nimport _isUndefined from '@onephrase/commons/js/isUndefined.js';\r\nimport _isFunction from '@onephrase/commons/js/isFunction.js';\r\n\r\n/**\r\n * @exports\r\n */\r\nclass Contexts extends Array {\r\n\t\r\n\t/**\r\n\t * Returns the first found \"undefined\" value of a reference from \r\n\t * from contexts.\r\n\t *\r\n\t * @param string|number varName\r\n\t * @param bool\t\t\tbindThis\r\n\t *\r\n\t * @return mixed\r\n\t */\r\n\tget(varName, bindThis = true) {\r\n\t\tfor(var i = 0; i < this.length; i ++) {\r\n\t\t\tvar val = _get(this[i], varName);\r\n\t\t\tif (_isFunction(val) && bindThis) {\r\n\t\t\t\treturn val.bind(this[i]);\r\n\t\t\t}\r\n\t\t\tif (!_isUndefined(val)) {\r\n\t\t\t\treturn val;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Factory method for making a Contexts instance.\r\n\t *\r\n\t * @param array|object \tcntxt\r\n\t *\r\n\t * @return Contexts\r\n\t */\r\n\tstatic create(cntxt) {\r\n\t\treturn cntxt instanceof Contexts ? cntxt \r\n\t\t\t: (cntxt ? new Contexts(cntxt) : new Contexts());\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Contexts;","\r\n/**\r\n * Tells if the string is warapped with the given opening and closing tags.\r\n *\r\n * @param  string  subject\r\n * @param  string  openingTag\r\n * @param  string  closingTag\r\n *\r\n * @return bool\r\n */\r\nexport default function(subject, openingTag, closingTag) {\r\n\treturn subject.startsWith(openingTag) && subject.endsWith(closingTag);\r\n};\r\n","\r\n/**\r\n * Return the remainder of a string after a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n * @param  bool\t   afterLast\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, search, afterLast = false) {\r\n\tif (search == '') {\r\n\t\treturn subject;\r\n\t}\r\n\tvar pos = afterLast ? subject.lastIndexOf(search) : subject.indexOf(search);\r\n\tif (pos === -1) {\r\n\t\treturn '';\r\n\t}\r\n\treturn subject.substr(pos + search.length);\r\n};\r\n","\r\n/**\r\n * Return the part of a string before a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n * @param  bool\t   beforeLast\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, search, beforeLast = false) {\r\n\tif (search == '') {\r\n\t\treturn subject;\r\n\t}\r\n\tvar pos = beforeLast ? subject.lastIndexOf(search) : subject.indexOf(search);\r\n\tif (pos === -1) {\r\n\t\treturn subject;\r\n\t}\r\n\treturn subject.substr(0, pos);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _before from './before.js';\r\n\r\n/**\r\n * Return the part of a string before last occurence of a given value.\r\n *\r\n * @param  string  subject\r\n * @param  string  search\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, search) {\r\n\treturn _before(subject, search, true);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _after from './after.js';\r\nimport _beforeLast from './beforeLast.js';\r\n\r\n/**\r\n * Returns the string without the given opening and closing tags.\r\n *\r\n * @param  string  subject\r\n * @param  string  openingTag\r\n * @param  string  closingTag\r\n *\r\n * @return string\r\n */\r\nexport default function(subject, openingTag, closingTag) {\r\n\treturn _beforeLast(_after(subject, openingTag), closingTag);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AbstractionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Abstraction'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/commons/str/wrapped.js';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\nimport AbstractionInterface from './AbstractionInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Abstraction class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Abstraction = class extends AbstractionInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.expr.eval(context, callback);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn '(' + this.expr.toString(context) + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Abstraction) {\r\n\t\tif (_wrapped(expr, '(', ')') && !Lexer.match(expr, [' ']).length) {\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(_unwrap(expr, '(', ')'))\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Abstraction;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ArrInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ArrayType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/commons/str/wrapped.js';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\nimport ArrInterface from './ArrInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Array utils\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Arr = class extends ArrInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs || [];\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinherit(Super) {\r\n\t\tif (Super instanceof ArrInterface) {\r\n\t\t\tvar newExprs = Super.exprs.filter(exprA => {\r\n\t\t\t\treturn this.exprs.reduce((uniqueSoFar, exprB) => uniqueSoFar && !exprA.even(exprB), true);\r\n\t\t\t});\r\n\t\t\tthis.exprs = newExprs.concat(this.exprs);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.exprs.map(expr => expr.eval(context, callback));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn '[' + this.exprs.map(expr => expr.toString(context)).join(', ') + ']';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Arr) {\r\n\t\tif (_wrapped(expr, '[', ']') && !Lexer.match(expr.trim(), [' ']).length) {\r\n\t\t\tvar splits = Lexer.split(_unwrap(expr, '[', ']'), [','])\r\n\t\t\t\t.map(n => n.trim()).filter(n => n).map(expr => parseCallback(expr));\r\n\t\t\treturn new Static(splits);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @export\r\n */\r\nexport default Arr;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ArgumentsInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Arguments'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/commons/str/wrapped.js';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\nimport ArgumentsInterface from './ArgumentsInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Arguments class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Arguments = class extends ArgumentsInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(list = []) {\r\n\t\tsuper();\r\n\t\tthis.list = list;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.list.map(arg => arg.eval(context, callback));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn '(' + this.list.map(arg => arg.toString(context)).join(', ') + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Arguments) {\r\n\t\tvar args; expr = expr.trim();\r\n\t\tif (_wrapped(expr, '(', ')') && !Lexer.match(expr, [' ']).length) {\r\n\t\t\treturn new Static(\r\n\t\t\t\tLexer.split(_unwrap(expr, '(', ')'), [',']).map(arg => parseCallback(arg.trim()))\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Arguments;\r\n","\r\n/**\r\n * Returns a list of unique items.\r\n *\r\n * @param array\t \t\t\t\tarr\r\n *\t *\r\n * @return array\r\n */\r\nexport default function(arr) {\r\n\tconst distinct = (value, index, self) => {\r\n\t\treturn self.indexOf(value) === index;\r\n\t};\r\n\treturn arr.filter(distinct);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AssertionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'AssertionExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _first from '@onephrase/commons/arr/first.js';\r\nimport _flatten from '@onephrase/commons/arr/flatten.js';\r\nimport _unique from '@onephrase/commons/arr/unique.js';\r\nimport AssertionInterface from './AssertionInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Assertion class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Assertion = class extends AssertionInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, logic) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.logic = logic;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\t eval(context = null, callback = null) {\r\n\t\tif (this.logic === '!') {\r\n\t\t\treturn !_first(this.exprs).eval(context, callback);\r\n\t\t}\r\n\t\tvar operators = _flatten(Assertion.operators);\r\n\t\tvar logic = (this.logic || '').trim().toUpperCase();\r\n\t\tvar isOr = logic === (Assertion.operators.or || '').trim().toUpperCase();\r\n\t\tvar isNor = logic === (Assertion.operators.nor || '').trim().toUpperCase();\r\n\t\tvar isAnd = logic === (Assertion.operators.and || '').trim().toUpperCase();\r\n\t\tvar isNand = logic === (Assertion.operators.nand || '').trim().toUpperCase();\r\n\t\tvar lastResult = true, trues = 0;\r\n\t\tfor(var i = 0; i < this.exprs.length; i ++) {\r\n\t\t\tif (isAnd && !lastResult) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (isNand && !lastResult) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tlastResult = this.exprs[i].eval(context, callback);\r\n\t\t\tif (isOr && lastResult) {\r\n\t\t\t\treturn lastResult;\r\n\t\t\t}\r\n\t\t\ttrues += lastResult ? 1 : 0;\r\n\t\t}\r\n\t\tif (isOr) {\r\n\t\t\t// Which is falsey,\r\n\t\t\t// by virtue of getting here\r\n\t\t\treturn lastResult;\r\n\t\t}\r\n\t\tif (isAnd || isNand) {\r\n\t\t\t// For AND and NAND, all entries must be true,\r\n\t\t\t// by virtue of getting here.\r\n\t\t\t// For AND, this means true; for NAND, false\r\n\t\t\treturn isAnd;\r\n\t\t}\r\n\t\t// For NOR, all entries need to be false\r\n\t\treturn isNor && trues === 0;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\t toString(context = null) {\r\n\t\tif (this.logic === '!') {\r\n\t\t\treturn '!' + _first(this.exprs).toString(context);\r\n\t\t}\r\n\t\treturn this.exprs.map(expr => expr.toString(context)).join(' ' + this.logic + ' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Assertion) {\r\n\t\tif (expr.startsWith('!')) {\r\n\t\t\treturn new Static(\r\n\t\t\t\t[parseCallback(expr.substr(1))],\r\n\t\t\t\t'!'\r\n\t\t\t);\r\n\t\t}\r\n\t\tvar parse = Lexer.lex(expr, _flatten(Static.operators));\r\n\t\tif (parse.tokens.length > 1) {\r\n\t\t\tvar logic = _unique(parse.matches);\r\n\t\t\tif (logic.length > 1) {\r\n\t\t\t\tthrow new Error('\"AND\" and \"OR\" logic cannot be asserted in the same expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\tparse.tokens.map(expr => parseCallback(expr.trim())),\r\n\t\t\t\t_first(logic)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nAssertion.operators = {\r\n\tand: '&&',\r\n\tor: '||',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Assertion;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _last from '@onephrase/commons/arr/last.js';\r\nimport _isUndefined from '@onephrase/commons/js/isUndefined.js';\r\nimport _isFunction from '@onephrase/commons/js/isFunction.js';\r\nimport AssignmentInterface from './AssignmentInterface.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport Contexts from '../Contexts.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Assignment class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Assignment = class extends AssignmentInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, val, operator = '=') {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.val = val;\r\n\t\tthis.operator = operator;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar reference = this.reference.getEval(context, callback);\r\n\t\tvar val = this.val.eval(context, callback);\r\n\t\tif (!_isUndefined(reference.context) && !_isUndefined(reference.name)) {\r\n\t\t\tif (_isFunction(callback)) {\r\n\t\t\t\treturn callback(this, reference.context, reference.name, val);\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tvar cntxt = reference.context instanceof Contexts \r\n\t\t\t\t? _last(reference.context) \r\n\t\t\t\t: reference.context;\r\n\t\t\t// -----------------------------\r\n\t\t\tcntxt[reference.name] = val;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [this.reference.toString(context), this.operator, this.val.toString(context)].join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Assignment) {\r\n\t\tvar parse = Lexer.lex(expr, Static.operators);\r\n\t\tif (parse.tokens.length === 2) {\r\n\t\t\tvar reference, val;\r\n\t\t\tif (!((reference = parseCallback(parse.tokens.shift().trim())) instanceof ReferenceInterface) \r\n\t\t\t|| !(val = parseCallback(parse.tokens.shift().trim()))) {\r\n\t\t\t\tthrow new Error('Invalid assignment directive: ' + expr);\r\n\t\t\t}\r\n\t\t\treturn new Static(reference, val, parse.matches[0].trim());\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @prop array\r\n */\r\nAssignment.operators = [' = '];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Assignment;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * BoolInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'BooleanType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '../Lexer.js';\r\nimport BoolInterface from './BoolInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Bool (boolean) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Bool = class extends BoolInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(state) {\r\n\t\tsuper();\r\n\t\tthis.state = state;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn this.state.toLowerCase().trim() === 'true';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.state;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Bool) {\r\n\t\tvar expr = expr.toLowerCase().trim();\r\n\t\tif (expr === 'true' || expr === 'false') {\r\n\t\t\treturn new Static(expr);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Bool;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '@onephrase/commons/js/isArray.js';\r\nimport _isFunction from '@onephrase/commons/js/isFunction.js';\r\nimport _isUndefined from '@onephrase/commons/js/isUndefined.js';\r\nimport _isNumeric from '@onephrase/commons/js/isNumeric.js';\r\nimport _isObject from '@onephrase/commons/js/isObject.js';\r\nimport _isString from '@onephrase/commons/js/isString.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport CallInterface from './CallInterface.js';\r\nimport Arguments from './Arguments.js';\r\nimport Contexts from '../Contexts.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Call class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Call = class extends CallInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, args) {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.args = args;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar reference = this.reference.getEval(context, callback);\r\n\t\tvar args = this.args.eval(context, callback);\r\n\t\tif (!_isUndefined(reference.name)) {\r\n\t\t\tif (_isFunction(callback)) {\r\n\t\t\t\treturn callback(this, reference.context, reference.name, args);\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tvar _contexts = Contexts.create(reference.context).slice();\r\n\t\t\tvar func = _contexts.get(reference.name, true/*bindThis*/);\r\n\t\t\tif (_isFunction(func)) {\r\n\t\t\t\treturn func(...args);\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tvar handler, _cntxts = _contexts.slice();\r\n\t\t\twhile(_cntxts.length && !handler) {\r\n\t\t\t\tvar cntxt = _cntxts.shift();\r\n\t\t\t\tvar utils = Call.utils || {};\r\n\t\t\t\tvar handler = _isNumeric(cntxt) && utils.Num ? utils.Num\r\n\t\t\t\t\t: (_isString(cntxt) && utils.Str ? utils.Str\r\n\t\t\t\t\t\t: (_isArray(cntxt) && utils.Arr ? utils.Arr\r\n\t\t\t\t\t\t\t: (_isObject(cntxt) && utils.Obj ? utils.Obj : null)));\r\n\t\t\t\tif (handler && _isFunction(handler[reference.name])) {\r\n\t\t\t\t\targs.unshift(cntxt);\r\n\t\t\t\t\treturn handler[reference.name](...args);\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error('\"' + this + '\" is not a function. (Called on ' + _contexts.map(c => typeof c).join(', ') + ')');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.reference.toString(context) + this.args.toString(context);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Call) {\r\n\t\tif (!expr.startsWith('(') && expr.endsWith(')') && !Lexer.match(expr, [' ']).length) {\r\n\t\t\tvar tokens = Lexer.split(expr, []);\r\n\t\t\tvar reference, args = tokens.pop();\r\n\t\t\tif (!((reference = parseCallback(tokens.join(''))) instanceof ReferenceInterface) \r\n\t\t\t|| !(args = parseCallback(args, [Arguments]))) {\r\n\t\t\t\tthrow new Error('Invalid call directive: ' + expr);\r\n\t\t\t}\r\n\t\t\treturn new Static(reference, args);\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Call;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * CommentsInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Comments'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _after from '@onephrase/commons/str/after.js';\r\nimport _before from '@onephrase/commons/str/before.js';\r\nimport CommentsInterface from './CommentsInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Comments class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Comments = class extends CommentsInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(comments, type) {\r\n\t\tsuper();\r\n\t\tthis.comments = comments;\r\n\t\tthis.type = type;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn '';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Comments) {\r\n\t\tvar _comments = null;\r\n\t\tvar _expr = null;\r\n\t\tvar type = 0;\r\n\t\tvar commentPlacement = 'before';\r\n\t\t// Oneliner comments\r\n\t\tif (expr.startsWith('//')) {\r\n\t\t\tvar splits = Lexer.split(_after(expr, '//'), [\"\\r\\n\"]);\r\n\t\t\t_comments = splits.shift().trim();\r\n\t\t\t_expr = splits.shift().trim();\r\n\t\t\ttype = 1;\r\n\t\t} else if (expr.startsWith('/*')) {\r\n\t\t\tvar splits = Lexer.split(_after(expr, '/*'), [\"*/\"]);\r\n\t\t\t_comments = splits.shift().trim();\r\n\t\t\t_expr = splits.shift().trim();\r\n\t\t\ttype = 2;\r\n\t\t} else if (expr.endsWith('*/')) {\r\n\t\t\tvar splits = Lexer.split(_beforeLast(expr, '*/'), [\"/*\"]);\r\n\t\t\t_comments = splits.pop().trim();\r\n\t\t\t_expr = splits.pop().trim();\r\n\t\t\ttype = 2;\r\n\t\t\tvar commentPlacement = 'after';\r\n\t\t}\r\n\t\tif (type) {\r\n\t\t\tif (type === 2) {\r\n\t\t\t\t_comments = Lexer.split(_comments.trim(), [\"\\r\\n\"])\r\n\t\t\t\t\t.map(line => line.replace(/^[\\*]+/, ''))\r\n\t\t\t\t\t.filter(line => line.trim());\r\n\t\t\t}\r\n\t\t\tconsole.log(_comments, commentPlacement, expr);\r\n\t\t\t_comments = new Static(_comments, type);\r\n\t\t}\r\n\t\tif (_expr) {\r\n\t\t\t_expr = parseCallback(_expr);\r\n\t\t\t_expr.meta.commenta = _comments;\r\n\t\t\treturn _expr;\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Comments;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ComparisonInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ComparisonExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _flatten from '@onephrase/commons/arr/flatten.js';\r\nimport _first from '@onephrase/commons/arr/first.js';\r\nimport _last from '@onephrase/commons/arr/last.js';\r\nimport _difference from '@onephrase/commons/arr/difference.js';\r\nimport _isArray from '@onephrase/commons/js/isArray.js';\r\nimport _isObject from '@onephrase/commons/js/isObject.js';\r\nimport _isString from '@onephrase/commons/js/isString.js';\r\nimport _each from '@onephrase/commons/obj/each.js';\r\nimport ComparisonInterface from './ComparisonInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Comparison class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Comparison = class extends ComparisonInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(operand1, operand2, operator) {\r\n\t\tsuper();\r\n\t\tthis.operand1 = operand1;\r\n\t\tthis.operand2 = operand2;\r\n\t\tthis.operator = operator;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn Comparison.compare(\r\n\t\t\tthis.operand1.eval(context, callback), \r\n\t\t\tthis.operand2.eval(context, callback), \r\n\t\t\tthis.operator\r\n\t\t);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [\r\n\t\t\tthis.operand1.toString(context), \r\n\t\t\tthis.operator, \r\n\t\t\tthis.operand2.toString(context)\r\n\t\t].join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Comparison) {\r\n\t\tvar operators = _flatten(Static.operators).map(oper => ' ' + oper + ' ');\r\n\t\tvar parse = Lexer.lex(expr, operators);\r\n\t\tif (parse.tokens.length > 1) {\r\n\t\t\tif (parse.tokens.length > 2) {\r\n\t\t\t\tthrow new Error('Malformed \"Comparison\" expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(_first(parse.tokens).trim()),\r\n\t\t\t\tparseCallback(_last(parse.tokens).trim()),\r\n\t\t\t\tparse.matches[0].trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * -------------------------------------------------------\r\n\t */\r\n\t \r\n\t/**\r\n\t * Use the operator type to compare the two operands\r\n\t *\r\n\t * @param mixed\t\toperand1\t\t\r\n\t * @param mixed\t\toperand2\t\t\r\n\t * @param string \toperator\t\t\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tstatic compare(operand1, operand2, operator = '==') {\r\n\t\tif (_flatten(Comparison.operators).indexOf(operator) === -1) {\r\n\t\t\tthrow new Error('The operator \"' + operator + '\" is not recognized.');\r\n\t\t}\r\n\t\tif (_isArray(operand1) && _isArray(operand2) && operator !== '===') {\r\n\t\t\tif (operand1.length !== operand2.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar allItemsMatch = true;\r\n\t\t\toperand1.sort();\r\n\t\t\toperand2.sort();\r\n\t\t\tfor (var i = 0; i < operand1.length; i ++) {\r\n\t\t\t\tallItemsMatch = allItemsMatch && Comparison.compare(operand1[i], operand2[i], operator);\r\n\t\t\t}\r\n\t\t\treturn allItemsMatch;\r\n\t\t} else if (_isObject(operand1) && _isObject(operand2) && operator !== '===') {\r\n\t\t\tvar entry1Keys = Object.keys(operand1);\r\n\t\t\tvar entry2Keys = Object.keys(operand2);\r\n\t\t\tif (entry1Keys.length !== entry2Keys.length || _difference(entry1Keys, entry2Keys).length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar allEntriesMatch = true;\r\n\t\t\t_each(entry1Keys, (i, key) => {\r\n\t\t\t\tallEntriesMatch = allEntriesMatch && Comparison.compare(operand1[key], operand2[key], operator);\r\n\t\t\t});\r\n\t\t\treturn allEntriesMatch;\r\n\t\t}\r\n\t\tswitch(operator) {\r\n\t\t\tcase '===':\r\n\t\t\t\treturn operand1 === operand2;\r\n\t\t\tcase '==':\r\n\t\t\tcase '=':\r\n\t\t\t\treturn operand1 == operand2;\r\n\t\t\tcase '>':\r\n\t\t\t\treturn operand1 > operand2;\r\n\t\t\tcase '<':\r\n\t\t\t\treturn operand1 < operand2;\r\n\t\t\tcase '>=':\r\n\t\t\t\treturn operand1 >= operand2;\r\n\t\t\tcase '<=':\r\n\t\t\t\treturn operand1 <= operand2;\r\n\t\t\tcase '!=':\r\n\t\t\t\treturn operand1 != operand2;\r\n\t\t\tcase '!==':\r\n\t\t\t\treturn operand1 !== operand2;\r\n\t\t\tcase '^=':\r\n\t\t\t\treturn _isString(operand1) && operand1.startsWith(operand2);\r\n\t\t\tcase '$=':\r\n\t\t\t\treturn _isString(operand1) && operand1.endsWith(operand2);\r\n\t\t\tcase '*=':\r\n\t\t\t\t// Contains\r\n\t\t\t\treturn _isArray(operand2) || _isString(operand2) ? operand1.indexOf(operand2) > -1 : false;\r\n\t\t\tcase '~=':\r\n\t\t\t\t// Contains word\r\n\t\t\t\treturn _isString(operand1) && _isString(operand2) && (' ' + operand1 + ' ').indexOf(' ' + operand2 + ' ') > -1;\r\n\t\t\tcase '>=<': // Between\r\n\t\t\t\t if (!(_isArray(operand2) && operand2.length === 2)) {\r\n\t\t\t\t\t throw new Error('A \\'Between\\' comparison requires argument 2 to be an array of exactly 2 values.');\r\n\t\t\t\t }\r\n\t\t\t\t return operand1 >= operand2[0] && operand1 <= operand2[1];\r\n\t\r\n\t\t\tcase '/**/': // Regex\r\n\t\t\t\treturn operand2.match(new RegExp(operand1));\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * Compares two operands for differences\r\n\t *\r\n\t * @param mixed\t\toperand1\t\t\r\n\t * @param mixed\t\toperand2\t\t\r\n\t * @param bool\t \tstrict\t\t\r\n\t *\r\n\t * @return bool\r\n\t */\r\n\tstatic diff(operand1, operand2, strict) {\r\n\t\treturn !Comparison.compare(operand1, operand2, strict ? '===' : '==');\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nComparison.operators = {\r\n\texact: {\r\n\t\tis: '===',\r\n\t\tisNull: '===',\r\n\t\tequalsTo: '==',\r\n\t\tnotEqualsTo: '!=',\r\n\t},\r\n\trelative: {\r\n\t\tlesserThan: '<',\r\n\t\tgreaterThan: '>',\r\n\t\tlesserThanOrEqualsTo: '<=',\r\n\t\tgreaterThanOrEqualsTo: '>=',\r\n\t\tbetween: '>=<',\r\n\t},\r\n\tpartial: {\r\n\t\tstartsWith: '^=',\r\n\t\tendsWith: '$=',\r\n\t\tcontains: '*=',\r\n\t\tany: '~=',\r\n\t\tin: '~=',\r\n\t\tmatches: '/**/',\r\n\t},\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Comparison;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\n\r\n/**\r\n * Returns the difference of two arrays;\r\n * optionally using a custom matching function.\r\n *\r\n * @param array \tarr\r\n * @param array\t \tarr2\r\n * @param function \tcallback\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, arr2, callback = null) {\r\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \r\n\t\t? arr2.filter(val2 => callback(val1, val2)).length \r\n\t\t: arr2.indexOf(val1) === -1\r\n\t);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ConditionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ConditionExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '../Lexer.js';\r\nimport ConditionInterface from './ConditionInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Condition class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Condition = class extends ConditionInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(assertion, onTrue, onFalse) {\r\n\t\tsuper();\r\n\t\tthis.assertion = assertion;\r\n\t\tthis.onTrue = onTrue;\r\n\t\tthis.onFalse = onFalse;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.assertion.eval(context, callback) \r\n\t\t\t? this.onTrue.eval(context, callback) \r\n\t\t\t: this.onFalse.eval(context, callback);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [\r\n\t\t\tthis.assertion.toString(context), \r\n\t\t\tCondition.operators[0], \r\n\t\t\tthis.onTrue.toString(context),\r\n\t\t\tCondition.operators[1], \r\n\t\t\tthis.onFalse.toString(context)\r\n\t\t].join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Condition) {\r\n\t\tvar splits = Lexer.split(expr, Static.operators);\r\n\t\tif (splits.length > 1) {\r\n\t\t\tif (splits.length === 2) {\r\n\t\t\t\tthrow new Error('Malformed ternary expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(splits[0].trim()),\r\n\t\t\t\tparseCallback(splits[1].trim()),\r\n\t\t\t\tparseCallback(splits[2].trim())\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nCondition.operators = ['?', ':'];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Condition;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _last from '@onephrase/commons/arr/last.js';\r\nimport _isFunction from '@onephrase/commons/js/isFunction.js';\r\nimport _isUndefined from '@onephrase/commons/js/isUndefined.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport DeletionInterface from './DeletionInterface.js';\r\nimport Contexts from '../Contexts.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Deletion class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Deletion = class extends DeletionInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, operator = 'delete') {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.operator = operator;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar reference = this.reference.getEval(context, callback);\r\n\t\tif (!_isUndefined(reference.context) && !_isUndefined(reference.name)) {\r\n\t\t\tif (_isFunction(callback)) {\r\n\t\t\t\treturn callback(this, reference.context, reference.name);\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tvar cntxt = reference.context instanceof Contexts \r\n\t\t\t\t? _last(reference.context) \r\n\t\t\t\t: reference.context;\r\n\t\t\t// -----------------------------\r\n\t\t\tdelete cntxt[reference.name];\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.operator + ' ' + this.reference.toString(context);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Deletion) {\r\n\t\tvar parse = Lexer.lex(expr, Object.values(Static.operators));\r\n\t\tif (parse.matches.length === 1 && expr.startsWith(parse.matches[0] + ' ')) {\r\n\t\t\tvar reference;\r\n\t\t\tif (!((reference = parseCallback(parse.tokens.pop().trim())) instanceof ReferenceInterface)) {\r\n\t\t\t\tthrow new Error('Invalid delete directive: ' + expr);\r\n\t\t\t}\r\n\t\t\treturn new Static(reference, parse.matches[0].trim());\r\n\t\t}\r\n\t}\r\n};\t\r\n\r\n/**\r\n * @prop array\r\n */\r\nDeletion.operators = {\r\n\tred: 'reduce', \r\n\tdel: 'delete',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Deletion;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _isNumeric from '../js/isNumeric.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n * Copies an object.\r\n *\r\n * @param object\t \tobj\r\n * @param array\t\t \tfilter\r\n *\r\n * @return object\r\n */\r\nexport default function(obj, filter = []) {\r\n\tvar depth = 0;\r\n\tif (_isNumeric(arguments[0]) && _isTypeObject(arguments[1])) {\r\n\t\tdepth = arguments[0];\r\n\t\tobj = arguments[1];\r\n\t\tfilter = arguments[2] || [];\r\n\t}\r\n\treturn _mergeCallback([depth, {}, obj], (key, obj1, obj2) => {\r\n\t\treturn _isFunction(filter) ? filter(key) \r\n\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\r\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * FuncInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'FunctionType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _copy from '@onephrase/commons/obj/copy.js';\r\nimport _each from '@onephrase/commons/obj/each.js';\r\nimport _flatten from '@onephrase/commons/arr/flatten.js';\r\nimport _wrapped from '@onephrase/commons/str/wrapped.js';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\nimport FuncInterface from './FuncInterface.js';\r\nimport Contexts from '../Contexts.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Func class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Func = class extends FuncInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(paramters, statements, arrowFunctionFormatting = {}) {\r\n\t\tsuper();\r\n\t\tthis.paramters = paramters || {};\r\n\t\tthis.statements = statements;\r\n\t\tthis.arrowFunctionFormatting = arrowFunctionFormatting;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinherit(Super) {\r\n\t\tif (Super instanceof FuncInterface) {\r\n\t\t\tvar parentParams = Object.keys(Super.paramters);\r\n\t\t\tvar ownParams = Object.keys(this.paramters);\r\n\t\t\tfor (var i = 0; i < Math.max(ownParams.length, parentParams.length); i ++) {\r\n\t\t\t\tvar nameInParent = parentParams[i];\r\n\t\t\t\tvar nameInSelf = ownParams[i];\r\n\t\t\t\tif (!nameInSelf && nameInParent) {\r\n\t\t\t\t\tthrow new Error('Parameter #' + i + ' (' + nameInParent + ') in parent function must be implemented.');\r\n\t\t\t\t}\r\n\t\t\t\tif (nameInSelf && nameInParent) {\r\n\t\t\t\t\tvar defaultValInParent = Super.paramters[nameInParent];\r\n\t\t\t\t\tvar defaultValInSelf = this.paramters[nameInSelf];\r\n\t\t\t\t\tif (defaultValInSelf && !defaultValInParent) {\r\n\t\t\t\t\t\tthrow new Error('Parameter #' + i + ' (' + nameInSelf + ') must not have a default value as established in parent function.');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (defaultValInSelf && defaultValInParent && defaultValInSelf.jsenType !== defaultValInParent.jsenType) {\r\n\t\t\t\t\t\tthrow new Error('Default value for parameter #' + i + ' (' + nameInSelf + ') must be of type ' + defaultValInParent.jsenType + ' as established in parent function.');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.sup = Super;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn (...args) => {\r\n\t\t\tvar localContext = {};\r\n\t\t\t_each(Object.keys(this.paramters), (i, name) => {\r\n\t\t\t\tvar defaultVal = this.paramters[name];\r\n\t\t\t\tif (args.length - 1 < i && !defaultVal) {\r\n\t\t\t\t\tthrow new Error('The parameter \"' + name + '\" is required.');\r\n\t\t\t\t}\r\n\t\t\t\tlocalContext[name] = args.length > i \r\n\t\t\t\t\t? args[i] \r\n\t\t\t\t\t: (this.paramters[name] \r\n\t\t\t\t\t\t? this.paramters[name].eval(context, callback) \r\n\t\t\t\t\t\t: null);\r\n\t\t\t});\r\n\t\t\t// But this newer context should come first\r\n\t\t\tvar multipleContexts = Contexts.create(localContext).concat(Contexts.create(context));\r\n\t\t\treturn this.statements.eval(multipleContexts, callback);\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar paramters = [];\r\n\t\t_each(this.paramters, (name, value) => {\r\n\t\t\tparamters.push(name + (value ? '=' + value.toString(context) : ''));\r\n\t\t});\r\n\t\tif (this.arrowFunctionFormatting) {\r\n\t\t\tvar headNoWrap = this.arrowFunctionFormatting.head === false || (paramters.length === 1 && paramters[0].indexOf('=') === -1);\r\n\t\t\tvar bodyNoWrap = this.arrowFunctionFormatting.body === false\r\n\t\t\treturn (headNoWrap ? paramters[0] : '(' + paramters.join(', ') + ')')\r\n\t\t\t+ ' => ' + (bodyNoWrap ? this.statements.toString(context) : '{' + this.statements.toString(context) + '}');\r\n\t\t}\r\n\t\treturn 'function (' + paramters.join(', ') + ') {' + this.statements.toString(context) + '}';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Func) {\r\n\t\texpr = expr.trim();\r\n\t\tvar splits;\r\n\t\tif (expr.startsWith('function') \r\n\t\t&& (splits = Lexer.split(expr, []).slice(1).filter(b => b.trim())) && splits.length === 2) {\r\n\t\t\tvar arrowFunctionFormatting = false;\r\n\t\t\tvar funcHead = _unwrap(splits.shift().trim(), '(', ')');\r\n\t\t\tvar funcBody = _unwrap(splits.shift().trim(), '{', '}');\r\n\t\t} else if (!expr.startsWith('function') \r\n\t\t&& (splits = Lexer.split(expr, ['=>'])) && splits.length === 2) {\r\n\t\t\tvar funcHead = splits.shift().trim();\r\n\t\t\tvar funcBody = splits.shift().trim();\r\n\t\t\tvar arrowFunctionFormatting = {};\r\n\t\t\tif (_wrapped(funcHead, '(', ')')) {\r\n\t\t\t\tfuncHead = _unwrap(funcHead, '(', ')');\r\n\t\t\t} else {\r\n\t\t\t\tarrowFunctionFormatting.head = false;\r\n\t\t\t}\r\n\t\t\tif (_wrapped(funcBody, '{', '}')) {\r\n\t\t\t\tfuncBody = _unwrap(funcBody, '{', '}');\r\n\t\t\t} else {\r\n\t\t\t\tarrowFunctionFormatting.body = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar paramters = {};\r\n\t\tLexer.split(funcHead, [',']).forEach(param => {\r\n\t\t\tvar paramSplit = param.split('=');\r\n\t\t\tif (paramSplit[1]) {\r\n\t\t\t\tparamters[paramSplit[0].trim()] = parseCallback(paramSplit[1].trim());\r\n\t\t\t} else {\r\n\t\t\t\tparamters[param.trim()] = null;\r\n\t\t\t}\r\n\t\t});\r\n\t\tvar statements = parseCallback(funcBody);\r\n\t\treturn new Static(paramters, statements, arrowFunctionFormatting);\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nFunc.operators = ['=>',];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Func;","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\n\r\n/**\r\n * Returns the intersection of two arrays;\r\n * optionally using a custom matching function.\r\n *\r\n * @param array \tarr\r\n * @param array\t \tarr2\r\n * @param function \tcallback\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, arr2, callback = null) {\r\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \r\n\t\t? arr2.filter(val2 => callback(val1, val2)).length \r\n\t\t: arr2.indexOf(val1) !== -1\r\n\t);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * MathInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'MathExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNumeric from '@onephrase/commons/js/isNumeric.js';\r\nimport _flatten from '@onephrase/commons/arr/flatten.js';\r\nimport _intersect from '@onephrase/commons/arr/intersect.js';\r\nimport _unique from '@onephrase/commons/arr/unique.js';\r\nimport MathInterface from './MathInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Math class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Math = class extends MathInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(val, exprs) {\r\n\t\tsuper();\r\n\t\tthis.val = val;\r\n\t\tthis.exprs = exprs;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.exprs.reduce((currentTotal, expr) => {\r\n\t\t\tvar val = expr.val.eval(context, callback);\r\n\t\t\tvar operator = expr.operator.trim();\r\n\t\t\tif ((!_isNumeric(currentTotal) || !_isNumeric(val)) && operator !== '+') {\r\n\t\t\t\tthrow new Error('Invalid Math expression: ' + this.toString() + '!');\r\n\t\t\t}\r\n\t\t\tswitch(operator) {\r\n\t\t\t\tcase '+':\r\n\t\t\t\t\treturn currentTotal + val;\r\n\t\t\t\tcase '-':\r\n\t\t\t\t\treturn currentTotal - val;\r\n\t\t\t\tcase '*':\r\n\t\t\t\t\treturn currentTotal * val;\r\n\t\t\t\tcase '/':\r\n\t\t\t\t\treturn currentTotal / val;\r\n\t\t\t}\r\n\t\t}, this.val.eval(context, callback));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [this.val.toString(context)].concat(\r\n\t\t\tthis.exprs.map(expr => expr.operator + ' ' + expr.val.toString(context))\r\n\t\t).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Math) {\r\n\t\tvar parse = Lexer.lex(expr, _flatten(Static.operators));\r\n\t\tif (parse.tokens.length > 1 && parse.matches.length === parse.tokens.length - 1) {\r\n\t\t\tvar operators = _unique(parse.matches);\r\n\t\t\tif (_intersect(operators, Math.operators.sup).length && _intersect(operators, Math.operators.sub).length) {\r\n\t\t\t\tthrow new Error('\"Addition/subtraction\" and \"multiplication/division\" operators cannot be used in the same expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(parse.tokens.shift().trim()),\r\n\t\t\t\tparse.tokens.map((expr, i) => {return {\r\n\t\t\t\t\toperator: parse.matches[i],\r\n\t\t\t\t\tval: parseCallback(expr.trim())\r\n\t\t\t\t};})\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nMath.operators = {\r\n\tsup: ['*', '/'],\r\n\tsub: [' + ', ' - '],\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Math;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * NumInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'NumberType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isNumeric from '@onephrase/commons/js/isNumeric.js';\r\nimport NumInterface from './NumInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Num (number) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Num = class extends NumInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(int, dec = 0) {\r\n\t\tsuper();\r\n\t\tthis.int = int;\r\n\t\tthis.dec = dec;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn parseFloat(this.int + (this.dec ? '.' + this.dec : null));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.int + (this.dec ? '.' + this.dec : null);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Num) {\r\n\t\tif (_isNumeric(expr)) {\r\n\t\t\tvar expr = expr.split('.');\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseInt(expr.shift()),\r\n\t\t\t\tparseInt(expr.shift())\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Num;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ObjInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ObjectType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/commons/str/wrapped.js';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\nimport _first from '@onephrase/commons/arr/first.js';\r\nimport _last from '@onephrase/commons/arr/last.js';\r\nimport _each from '@onephrase/commons/obj/each.js';\r\nimport ObjInterface from './ObjInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Object utils\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Obj = class extends ObjInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(entries) {\r\n\t\tsuper();\r\n\t\tthis.entries = entries || {};\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinherit(Super) {\r\n\t\tif (Super instanceof ObjInterface) {\r\n\t\t\t_each(Super.entries, (name, val) => {\r\n\t\t\t\tif (!(name in this.entries)) {\r\n\t\t\t\t\tthis.entries[name] = val;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar items = {};\r\n\t\t_each(this.entries, (key, expr) => {\r\n\t\t\titems[key] = expr.eval(context, callback);\r\n\t\t});\r\n\t\treturn items;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar str = [];\r\n\t\t_each(this.entries, (key, expr) => {\r\n\t\t\tstr.push(key + Obj.operators.sub + expr.toString(context));\r\n\t\t});\r\n\t\treturn '{' + str.join(Obj.operators.sup) + '}';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Obj) {\r\n\t\tif (_wrapped(expr, '{', '}') && !Lexer.match(expr.trim(), [' ']).length) {\r\n\t\t\tvar entries = {};\r\n\t\t\tvar _entriesSplit = Lexer.split(_unwrap(expr, '{', '}'), [Obj.operators.sup])\r\n\t\t\t\t.map(n => n.trim()).filter(n => n);\r\n\t\t\t_each(_entriesSplit, (key, expr) => {\r\n\t\t\t\tvar entry = Lexer.split(expr, [Obj.operators.sub], {limit:1}/*IMPORTANT*/);\r\n\t\t\t\tentries[_first(entry).trim()] = parseCallback(_last(entry).trim());\r\n\t\t\t});\r\n\t\t\treturn new Static(entries);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nObj.operators = {\r\n\tsup: ',',\r\n\tsub: ':',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Obj;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isUndefined from '@onephrase/commons/js/isUndefined.js';\r\nimport _isFunction from '@onephrase/commons/js/isFunction.js';\r\nimport _wrapped from '@onephrase/commons/str/wrapped.js';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\nimport ReferenceInterface from './ReferenceInterface.js';\r\nimport ExprInterface from '../ExprInterface.js';\r\nimport Contexts from '../Contexts.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Reference class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Reference = class extends ReferenceInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(context, name, backticks = false) {\r\n\t\tsuper();\r\n\t\tthis.context = context;\r\n\t\tthis.name = name;\r\n\t\tthis.backticks = backticks;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetEval(context = null, callback = null) {\r\n\t\tvar sourceContext = context, name = this.name;\r\n\t\tif (this.context) {\r\n\t\t\tif (name instanceof ExprInterface) {\r\n\t\t\t\tname = name.eval(context, callback);\r\n\t\t\t}\r\n\t\t\tsourceContext = this.context.eval(context, callback);\r\n\t\t}\r\n\t\treturn {context:sourceContext, name:name,};\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar parts = this.getEval(context, callback);\r\n\t\tif (!_isUndefined(parts.context) && !_isUndefined(parts.name)) {\r\n\t\t\tif (_isFunction(callback)) {\r\n\t\t\t\treturn callback(this, parts.context, parts.name);\r\n\t\t\t}\r\n\t\t\treturn Contexts.create(parts.context).get(parts.name);\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar name = this.name;\r\n\t\tif (this.context) {\r\n\t\t\tvar subjectContext = this.context.toString(context);\r\n\t\t\tif (name instanceof ExprInterface) {\r\n\t\t\t\tname = '[' + name.toString(context) + ']';\r\n\t\t\t} else if (this.backticks) {\r\n\t\t\t\tname = '`' + name + '`';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar subjectContext = context;\r\n\t\t\tif (this.backticks) {\r\n\t\t\t\tname = '`' + name + '`';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (subjectContext || '') + (subjectContext && !name.startsWith('[') ? Reference.separator : '') + name;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Reference) {\r\n\t\tif (!Lexer.match(expr.trim(), [' ']).length) {\r\n\t\t\tvar splits = Lexer.split(expr, []);\r\n\t\t\t// ------------------------\r\n\t\t\t// name, first\r\n\t\t\t// ------------------------\r\n\t\t\tvar context, name = splits.pop(), backticks;\r\n\t\t\tvar nameSplit = Lexer.split(name.trim(), [Static.separator], {preserveDelims:true});\r\n\t\t\tif (nameSplit.length > 1) {\r\n\t\t\t\tname = nameSplit.pop().substr(1);\r\n\t\t\t\tsplits = splits.concat(nameSplit);\r\n\t\t\t}\r\n\t\t\tif (_wrapped(name, '`', '`')) {\r\n\t\t\t\tname = _unwrap(name, '`', '`');\r\n\t\t\t\tbackticks = true;\r\n\t\t\t}\r\n\t\t\t// ------------------------\r\n\t\t\t// context, second\r\n\t\t\t// ------------------------\r\n\t\t\tif (splits.length) {\r\n\t\t\t\tcontext = parseCallback(splits.join(''));\r\n\t\t\t\tcontext.isContext = true;\r\n\t\t\t}\r\n\t\t\tif (_wrapped(name, '[', ']')) {\r\n\t\t\t\tif (!context) {\r\n\t\t\t\t\tthrow new Error('Invalid reference: ' + expr + '!');\r\n\t\t\t\t}\r\n\t\t\t\tname = parseCallback(_unwrap(name, '[', ']'));\r\n\t\t\t}\r\n\t\t\treturn new Static(context, name, backticks);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop string\r\n */\r\nReference.separator = '.';\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Reference;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * ReturnInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'ReturnDirective'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Lexer from '../Lexer.js';\r\nimport ReturnInterface from './ReturnInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Ret (return) class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Return = class extends ReturnInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.expr ? this.expr.eval(context, callback) : undefined;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.expr ? 'return ' + this.expr.toString(context) : 'return';\r\n\t}\r\n\t\r\n\t/**\r\n\t * -------------------------------------------------------\r\n\t */\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Return) {\r\n\t\tvar exprLc = expr.toLowerCase();\r\n\t\tif (exprLc.startsWith('return ') || exprLc === 'return') {\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(expr.substr(6).trim())\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Return;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * StatementsInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'Statements'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _flatten from '@onephrase/commons/arr/flatten.js';\r\nimport StatementsInterface from './StatementsInterface.js';\r\nimport ReturnInterface from './ReturnInterface.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Statements class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Statements = class extends StatementsInterface {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(stmts, delim) {\r\n\t\tsuper();\r\n\t\tthis.stmts = exprs;\r\n\t\tthis.delim = delim;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\tvar exprs = [];\r\n\t\tfor (var i = 0; i < this.stmts.length; i ++) {\r\n\t\t\tif (this.stmts[i] instanceof ReturnInterface) {\r\n\t\t\t\treturn this.stmts[i].eval(context, callback);\r\n\t\t\t} else {\r\n\t\t\t\texprs[i] = this.stmts[i].eval(context, callback);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn exprs;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.stmts.map(expr => expr.toString(context)).join(this.delim);\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Statements) {\r\n\t\tvar parse = Lexer.lex(expr, _flatten(Static.operators));\r\n\t\tif (parse.tokens.length > 1) {\r\n\t\t\treturn new Static(\r\n\t\t\t\tparse.tokens.map(expr => parseCallback(expr)),\r\n\t\t\t\tparse.matches[0].trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop array\r\n */\r\nStatements.operators = [\r\n\t';',\r\n\t\"\\r\\n\",\r\n];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Statements;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * StrInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'StringType'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _wrapped from '@onephrase/commons/str/wrapped.js';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\nimport StrInterface from './StrInterface.js';\r\nimport Lexer from '../Lexer.js';\r\nimport Bool from './Bool.js';\r\n\r\n/**\r\n * ---------------------------\r\n * String utils\r\n * ---------------------------\r\n */\r\n\r\nconst Str = class extends StrInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr, quote) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t\tthis.quote = quote;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn this.expr;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.quote + this.expr + this.quote;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Str) {\r\n\t\texpr = expr.trim();\r\n\t\tif ((_wrapped(expr, '\"', '\"') || _wrapped(expr, \"'\", \"'\")) \r\n\t\t&& !Lexer.match(expr, [' ']).length) {\r\n\t\t\tvar quote = _wrapped(expr, '\"', '\"') ? '\"' : \"'\";\r\n\t\t\treturn new Static(\r\n\t\t\t\t_unwrap(expr, quote, quote),\r\n\t\t\t\tquote\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Str;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Jsen from './Jsen.js';\r\nimport ExprInterface from './ExprInterface.js';\r\nimport Lexer from './Lexer.js';\r\nimport Contexts from './Contexts.js';\r\nimport Abstraction from './Expr/Abstraction.js';\r\nimport AbstractionInterface from './Expr/AbstractionInterface.js';\r\nimport Arr from './Expr/Arr.js';\r\nimport ArrInterface from './Expr/ArrInterface.js';\r\nimport Arguments from './Expr/Arguments.js';\r\nimport ArgumentsInterface from './Expr/ArgumentsInterface.js';\r\nimport Assertion from './Expr/Assertion.js';\r\nimport AssertionInterface from './Expr/AssertionInterface.js';\r\nimport Assignment from './Expr/Assignment.js';\r\nimport AssignmentInterface from './Expr/AssignmentInterface.js';\r\nimport Bool from './Expr/Bool.js';\r\nimport BoolInterface from './Expr/BoolInterface.js';\r\nimport Call from './Expr/Call.js';\r\nimport CallInterface from './Expr/CallInterface.js';\r\nimport Comments from './Expr/Comments.js';\r\nimport CommentsInterface from './Expr/CommentsInterface.js';\r\nimport Comparison from './Expr/Comparison.js';\r\nimport ComparisonInterface from './Expr/ComparisonInterface.js';\r\nimport Condition from './Expr/Condition.js';\r\nimport ConditionInterface from './Expr/ConditionInterface.js';\r\nimport Deletion from './Expr/Deletion.js';\r\nimport DeletionInterface from './Expr/DeletionInterface.js';\r\nimport Func from './Expr/Func.js';\r\nimport FuncInterface from './Expr/FuncInterface.js';\r\nimport Math from './Expr/Math.js';\r\nimport MathInterface from './Expr/MathInterface.js';\r\nimport Num from './Expr/Num.js';\r\nimport NumInterface from './Expr/NumInterface.js';\r\nimport Obj from './Expr/Obj.js';\r\nimport ObjInterface from './Expr/ObjInterface.js';\r\nimport Reference from './Expr/Reference.js';\r\nimport ReferenceInterface from './Expr/ReferenceInterface.js';\r\nimport Return from './Expr/Return.js';\r\nimport ReturnInterface from './Expr/ReturnInterface.js';\r\nimport Statements from './Expr/Statements.js';\r\nimport StatementsInterface from './Expr/StatementsInterface.js';\r\nimport Str from './Expr/Str.js';\r\nimport StrInterface from './Expr/StrInterface.js';\r\n\r\n/**\r\n * @var object\r\n */\r\nJsen.grammars = {\r\n\tComments: Comments,\t\t\t// // single-line | /* double-line */\r\n\tReturn: Return,\t\t\t\t// return field1\r\n\tStatements: Statements,\t\t// field1 = 3; field2 = val2\r\n\tDeletion: Deletion,\t\t\t// delete field1\r\n\tAssignment: Assignment,\t\t// field1[key1].key2 = k\r\n\tFunc: Func,\t\t\t\t\t// (field1, field2) => {}\r\n\tAbstraction: Abstraction,\t// (field1)\r\n\tCondition: Condition,\t\t// field1 > field2 ? val1 : val2\r\n\tAssertion: Assertion,\t\t// !field1 && field2\r\n\tComparison: Comparison,\t\t// field1 > field2\r\n\tMath: Math,\t\t\t\t\t// field1 + field2\r\n\tArr: Arr,\t\t\t\t\t// [field1, field2]\r\n\tObj: Obj,\t\t\t\t\t// {field1:val1, field2:val2}\r\n\tNum: Num,\t\t\t\t\t// [0-9]\r\n\tStr: Str,\t\t\t\t\t// \"\"\r\n\tBool: Bool,\t\t\t\t\t// true\r\n\tCall: Call,\t\t\t\t\t// field1()\r\n\tReference: Reference,\t\t\t\t// field1\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport {\r\n\tExprInterface,\r\n\tLexer,\r\n\tContexts\r\n};\r\nexport {\r\n\tAbstraction,\r\n\tArr,\r\n\tArguments,\r\n\tAssertion,\r\n\tAssignment,\r\n\tBool,\r\n\tCall,\r\n\tComments,\r\n\tComparison,\r\n\tCondition,\r\n\tDeletion,\r\n\tFunc,\r\n\tMath,\r\n\tNum,\r\n\tObj,\r\n\tReference,\r\n\tReturn,\r\n\tStr,\r\n\tStatements\r\n};\r\nexport {\r\n\tAbstractionInterface,\r\n\tArrInterface,\r\n\tArgumentsInterface,\r\n\tAssertionInterface,\r\n\tAssignmentInterface,\r\n\tBoolInterface,\r\n\tCallInterface,\r\n\tCommentsInterface,\r\n\tComparisonInterface,\r\n\tConditionInterface,\r\n\tDeletionInterface,\r\n\tFuncInterface,\r\n\tMathInterface,\r\n\tNumInterface,\r\n\tObjInterface,\r\n\tReferenceInterface,\r\n\tReturnInterface,\r\n\tStrInterface,\r\n\tStatementsInterface\r\n};\r\nexport default Jsen;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Jsen from '@onephrase/jsen';\r\n\r\n/**\r\n * ---------------------------\r\n * Mql (base) class\r\n *\r\n * TODO:\r\n *\t\tSELECT *\r\n *\t\tSELECT ... FROM (SELECT ...)\r\n *\t\tPREPARED STATEMENTS PLACEHOLDERS\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Mql = class extends Jsen {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, Parsers, params = {}, Static = Mql) {\r\n\t\tif (!('mutates' in params)) {\r\n\t\t\tparams.mutates = true;\r\n\t\t}\r\n\t\tif (!params.opts) {\r\n\t\t\tparams.opts = {};\r\n\t\t}\r\n\t\tif (!('ci' in params.opts)) {\r\n\t\t\tparams.opts.ci = true;\r\n\t\t}\r\n\t\treturn super.parse(expr, Parsers, params, Static);\r\n\t}\r\n};\r\n\r\n\r\nexport default Mql;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {ExprInterface} from '@onephrase/jsen';\r\n\r\n/**\r\n * ---------------------------\r\n * ExprInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nexport default class extends ExprInterface {};\r\n","\r\n/**\r\n * Sums an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nexport default function(arr) {\r\n\tarr = arr.slice();\r\n\treturn arr.reduce((total, v) => total + v, arr.shift());\r\n};\r\n","\r\n/**\r\n * Gets one or more random values from an array.\r\n *\r\n * @param array \tarr\r\n * @param int\t \tamount\r\n *\r\n * @return mixed|array\r\n */\r\nexport default function(arr, amount = 1) {\r\n\tvar result = [];\r\n\tvar rand = null;\r\n\twhile (result.length < amount && (rand = arr[Math.floor(Math.random() * arr.length)]) && result.indexOf(rand) === -1) {\r\n\t\tresult.push(rand);\r\n\t};\r\n\treturn arguments.length > 1 ? result : result[0];\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from './isArray.js';\r\nimport _isFunction from './isFunction.js';\r\nimport _arrLast from '../arr/last.js';\r\nimport _mergeCallback from '../obj/mergeCallback.js';\r\nimport _each from '../obj/each.js';\r\n\r\n/**\r\n * A multi-inheritance implementstion.\r\n *\r\n * @param array\t \t...classes\r\n *\r\n * @return object\r\n */\r\nexport default function(...classes) {\r\n\tvar Traps = {};\r\n\tvar RetrnDirective = 'last';\r\n\tif (_isArray(arguments[0])) {\r\n\t\tclasses = arguments[0];\r\n\t\tTraps = arguments[1];\r\n\t\tif (arguments[2]) {\r\n\t\t\tRetrnDirective = arguments[2];\r\n\t\t}\r\n\t}\r\n\tvar Base = _arrLast(classes);\r\n\tvar supersMap = {};\r\n\tvar Mixin = class extends Base {\r\n\t\tconstructor(...args) {\r\n\t\t\tsuper(...args);\r\n\t\t}\r\n\t};\r\n\t// A trap for _instanceof()\r\n\tMixin.prototypes = classes;\r\n\t// ---------------------\r\n\t// Extend (merge) properties but keep methods\r\n\tclasses.forEach(_class => {\r\n\t\t// Copy const members\r\n\t\t_mergeCallback([Mixin, _class], (key, obj1, obj2) => ['name', 'prototype', 'prototypes', 'length'].indexOf(key) === -1);\r\n\t\t_mergeCallback([Mixin.prototype, _class.prototype], (key, obj1, obj2) => {\r\n\t\t\tif (['prototype', 'prototypes'].indexOf(key) === -1) {\r\n\t\t\t\tif (_isFunction(obj2[key])) {\r\n\t\t\t\t\tif (_isArray(supersMap[key])) {\r\n\t\t\t\t\t\tsupersMap[key].push(obj2[key]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsupersMap[key] = [obj2[key]];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}, true/*deepProps*/);\r\n\t});\r\n\t// Extend (proxy) methods\r\n\t_each(supersMap, (name, supers) => {\r\n\t\tif (name === 'constructor') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// NOTE: this must not be defined as an arrow function\r\n\t\t// for the benefit of the \"this\".\r\n\t\tMixin.prototype[name] = function(...args) {\r\n\t\t\tif (Object.hasOwnProperty(Traps, name) && _isFunction(Traps[name])) {\r\n\t\t\t\t// Wrap a call to the trap...\r\n\t\t\t\t// So mixin supers are passed to traps\r\n\t\t\t\treturn Traps[name].call(this, supers, ...args);\r\n\t\t\t} else {\r\n\t\t\t\t// Call each super and return\r\n\t\t\t\t// the last one's return value\r\n\t\t\t\tvar supersReturnValues = [];\r\n\t\t\t\tsupers.forEach(supr => {\r\n\t\t\t\t\tsupersReturnValues.push(supr.call(this, ...args));\r\n\t\t\t\t})\r\n\t\t\t\treturn _arrLast(supersReturnValues);\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\treturn Mixin;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isFunction from '../js/isFunction.js';\r\nimport _isTypeObject from '../js/isTypeObject.js';\r\nimport _arrFrom from '../arr/from.js';\r\n\r\n/**\r\n * Finds a value in an array/object and returns the key (or path when found deep).\r\n *\r\n * @param array}object \tobj\r\n * @param function\t\tcallback\r\n * @param bool\t\t\tdeep\r\n *\r\n * @return number|string|array\r\n */\r\nconst _find = function(obj, callback, deep = false) {\r\n\tvar keys = null;\r\n\tvar values = obj;\r\n\tif (!_isArray(obj)) {\r\n\t\tkeys = Object.keys(obj);\r\n\t\tvalues = Object.values(obj);\r\n\t}\r\n\tvar subKey = undefined;\r\n\tvar value = values.reduce((prev, curr) => {\r\n\t\tif (subKey === undefined) {\r\n\t\t\tif (callback(curr, prev)) {\r\n\t\t\t\treturn curr;\r\n\t\t\t}\r\n\t\t\tif (deep && (_isTypeObject(curr) || _isFunction(curr)) && (subKey = _find(curr, callback, deep)) !== undefined) {\r\n\t\t\t\treturn curr;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn prev;\r\n\t}, undefined);\r\n\tif (value !== undefined) {\r\n\t\tvar key = keys ? keys[values.indexOf(value)] : values.indexOf(value);\r\n\t\treturn subKey !== undefined ? [key].concat(_arrFrom(subKey)) : key;\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default _find;","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _isString from '../js/isString.js';\r\n\r\n/**\r\n * Return an object for the given pair(s) of input.\r\n *\r\n * @param string|array \t\t\tkey\r\n * @param mixed|array\t\t\tval \r\n *\r\n * @return object\r\n */\r\nexport default function(key, val = null) {\r\n\tvar obj = {};\r\n\tif (arguments.length === 2) {\r\n\t\tif (_isString(key)) {\r\n\t\t\tobj[key] = val;\r\n\t\t} else if (_isArray(key) && _isArray(val)) {\r\n\t\t\tkey.forEach((k, i) => obj[k] = val[i]);\r\n\t\t}\r\n\t}\r\n\treturn obj;\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isArray from '../js/isArray.js';\r\nimport _mergeCallback from './mergeCallback.js';\r\n\r\n/**\r\n  * Merges values from subsequent arrays/objects into first array/object but only when not set;\r\n  * optionally recursive\r\n  *\r\n  * @param array ...objs\r\n  *\r\n  * @return void\r\n  */\r\nexport default function(...objs) {\r\n\treturn _mergeCallback(objs, (key, obj1, obj2) => {\r\n\t\tif (_isArray(obj1) && _isArray(obj2)) {\r\n\t\t\tif (obj1.indexOf(obj2[key]) === -1) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} else if (!(key in obj1)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t});\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAssertion\r\n} from '@onephrase/jsen';\r\n\r\n/**\r\n * @prop array\r\n */\r\nAssertion.operators = {and: ' and ', or: ' or '};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Assertion;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer,\r\n\tReference as _Reference\r\n} from '@onephrase/jsen';\r\nimport _each from '@onephrase/commons/obj/each.js';\r\nimport _isString from '@onephrase/commons/js/isString.js';\r\nimport _isEmpty from '@onephrase/commons/js/isEmpty.js';\r\nimport _isUndefined from '@onephrase/commons/js/isUndefined.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Reference class\r\n * ---------------------------\r\n */\t\t\t\t\r\nconst Reference = class extends _Reference {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(context, name, backticks = false) {\r\n\t\tvar isPath = _isString(name) && /(<-|->)/.test(name);\r\n\t\tif (isPath && !backticks) {\r\n\t\t\tbackticks = true;\r\n\t\t}\r\n\t\tsuper(context, name, backticks);\r\n\t\tthis.isPath = isPath;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRow) {\r\n\t\t// Lets find the table that contains the column\r\n\t\tif (!this.isContext && this.searchWithoutContext !== false) {\r\n\t\t\tvar contexts = Reference.findContexts(tempRow, this.name);\r\n\t\t\tif (!contexts.length) {\r\n\t\t\t\tthrow new Error('\"' + this.toString() + '\" is unknown!');\r\n\t\t\t}\r\n\t\t\tif (!this.context) {\r\n\t\t\t\tif (contexts.indexOf('$') === -1 && contexts.length > 1) {\r\n\t\t\t\t\tthrow new Error('\"' + this.name + '\" is ambiguous!');\r\n\t\t\t\t}\r\n\t\t\t\tif (contexts.length) {\r\n\t\t\t\t\treturn this.parseCallback(contexts.reduce((_c, c) => _c === '$' ? _c : c, '') + '.' + this.toString()/*full toString()*/).eval(tempRow);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar val = super.eval(tempRow);\r\n\t\t// Table unknown?\r\n\t\tif (this.isContext && _isUndefined(val)) {\r\n\t\t\tthrow new Error('Table \"' + this.name + '\" is unknown!');\r\n\t\t}\r\n\t\treturn val;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic findContexts(tempRow, name) {\r\n\t\tvar contexts = [];\r\n\t\t// We ask from schema first\r\n\t\tObject.keys(tempRow).forEach(tableName => {\r\n\t\t\tif (tableName !== '#') {\r\n\t\t\t\t// + this.name does not have any backticka problem\r\n\t\t\t\tif (tempRow['#'] && tempRow['#'][tableName] && !_isEmpty(tempRow['#'][tableName].fields)) {\r\n\t\t\t\t\tvar row = tempRow['#'][tableName].fields;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar row = tempRow[tableName];\r\n\t\t\t\t}\r\n\t\t\t\tif (!_isUndefined(row[name])) {\r\n\t\t\t\t\tcontexts.push(tableName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn contexts;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Reference) {\r\n\t\tvar instance = super.parse(expr, parseCallback, Static);\r\n\t\tif (instance) {\r\n\t\t\tinstance.parseCallback = parseCallback;\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Reference;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAssignment as _Assignment\r\n} from '@onephrase/jsen';\r\nimport Reference from './Reference.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Assignment class\r\n * ---------------------------\r\n */\t\t\t\t\r\nconst Assignment = class extends _Assignment {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRow) {\r\n\t\t// Lets find the table that contains the column\r\n\t\tif (!this.isContext && this.searchWithoutContext !== false) {\r\n\t\t\tvar contexts = Reference.findContexts(tempRow, this.reference.name);\r\n\t\t\tif (!contexts.length) {\r\n\t\t\t\tthrow new Error('\"' + this.toString() + '\" is unknown!');\r\n\t\t\t}\r\n\t\t\tif (!this.reference.context) {\r\n\t\t\t\tif (contexts.indexOf('$') === -1 && contexts.length > 1) {\r\n\t\t\t\t\tthrow new Error('\"' + this.reference.name + '\" is ambiguous!');\r\n\t\t\t\t}\r\n\t\t\t\tif (contexts.length) {\r\n\t\t\t\t\treturn this.parseCallback(contexts[0] + '.' + this.toString()/*full toString()*/, [this.Static], {mutates: true}).eval(tempRow);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn super.eval(tempRow);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Assignment) {\r\n\t\tvar instance = super.parse(expr, parseCallback, Static);\r\n\t\tif (instance) {\r\n\t\t\tinstance.parseCallback = parseCallback;\r\n\t\t\tinstance.Static = Static;\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Assignment;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tCall as _Call\r\n} from '@onephrase/jsen';\r\nimport _isFunction from '@onephrase/commons/js/isFunction.js';\r\nimport _isUndefined from '@onephrase/commons/js/isUndefined.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Call class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Call = class extends _Call {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context = null, callback = null) {\r\n\t\treturn this.evalWith(context, this.args.eval(context, callback));\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tevalWith(context, args, callback = null) {\r\n\t\tvar reference = this.reference.getEval(context, callback);\r\n\t\tif (!_isUndefined(reference.name)) {\r\n\t\t\t// -----------------------------\r\n\t\t\tif (_isFunction(callback)) {\r\n\t\t\t\treturn callback(this, reference.context, reference.name, args);\r\n\t\t\t}\r\n\t\t\t// -----------------------------\r\n\t\t\tif (_isFunction(reference.context[reference.name.toUpperCase()])) {\r\n\t\t\t\treturn reference.context[reference.name.toUpperCase()](...args);\r\n\t\t\t}\r\n\t\t\tthrow new Error('\"' + reference.name + '()\" called on ' + typeof reference.context + '!');\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Call) {\r\n\t\treturn super.parse(expr, parseCallback, Static);\r\n\t}\r\n}\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Call;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tComparison\r\n} from '@onephrase/jsen';\r\n\r\n/**\r\n * @prop array\r\n */\r\nComparison.operators = {\r\n\trelative: {\r\n\t\tlesserThan: '<',\r\n\t\tgreaterThan: '>',\r\n\t\tlesserThanOrEqualsTo: '<=',\r\n\t\tgreaterThanOrEqualsTo: '>=',\r\n\t},\r\n\tpartial: {\r\n\t\tany: 'any',\r\n\t\tin: 'in',\r\n\t\tlike: 'like',\r\n\t},\r\n\texact: {\r\n\t\tnotEqualsTo: '<>',\r\n\t\t// must be after all ocurrencies of \"=\"\r\n\t\tis: '=',\r\n\t},\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Comparison;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer,\r\n\tCondition as _Condition\r\n} from '@onephrase/jsen';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Condition class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Condition = class extends _Condition {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(assertion, onTrue, onFalse) {\r\n\t\tsuper();\r\n\t\tthis.assertion = assertion;\r\n\t\tthis.onTrue = onTrue;\r\n\t\tthis.onFalse = onFalse;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn 'IF (' + [\r\n\t\t\tthis.assertion.toString(context), \r\n\t\t\tthis.onTrue.toString(context),\r\n\t\t\tthis.onFalse.toString(context)\r\n\t\t].join(', ') + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Condition) {\r\n\t\tif (expr.match(/^if[ ]*?\\(/i)) {\r\n\t\t\tvar tokens = Lexer.split(_unwrap(expr.trim().substr(2).trim(), '(', ')'), [',']);\r\n\t\t\tif (tokens.length !== 3) {\r\n\t\t\t\tthrow new Error('Malformed condition expression: ' + expr + '!');\r\n\t\t\t}\r\n\t\t\treturn new Static(...tokens.map(expr => parseCallback(expr.trim())));\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Condition;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * AggrInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'AggregateExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * WindowInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'WindowConstruct'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * OrderByInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'OrderByExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport _sort from '@onephrase/commons/arr/sort.js';\r\nimport _before from '@onephrase/commons/str/before.js';\r\nimport _beforeLast from '@onephrase/commons/str/beforeLast.js';\r\nimport OrderByInterface from './OrderByInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * OrderBy class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst OrderBy = class extends OrderByInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(columns, withRollup = false) {\r\n\t\tsuper();\r\n\t\tthis.columns = columns;\r\n\t\tthis.withRollup = withRollup;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRows) {\r\n\t\tvar order = (rows, by) => {\r\n\t\t\t// Drilldown...\r\n\t\t\tvar grouping = {};\r\n\t\t\trows.forEach(row => {\r\n\t\t\t\tvar _for = by[0].expr.eval(row);\r\n\t\t\t\tgrouping[_for] = grouping[_for] || [];\r\n\t\t\t\tgrouping[_for].push(row);\r\n\t\t\t});\r\n\t\t\t// Get esults flattened\r\n\t\t\tvar result = [];\r\n\t\t\t_sort(Object.keys(grouping), by[0].order).forEach(_for => {\r\n\t\t\t\tresult = result.concat(by.length > 1 ? order(grouping[_for], by.slice(1)) : grouping[_for]);\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t};\r\n\t\ttry {\r\n\t\t\tvar ordering = order(tempRows, this.columns);\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error('[\"' + this.toString() + '\" in order by clause]: ' + e.message);\r\n\t\t}\r\n\t\treturn ordering;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar str = [this.columns.map(\r\n\t\t\tc => c.expr.toString(context) + (c.order ? ' ' + c.order : '')\r\n\t\t).join(', ')];\r\n\t\tif (this.withRollup) {\r\n\t\t\tstr.push('WITH ROLLUP');\r\n\t\t}\r\n\t\treturn str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = OrderBy) {\r\n\t\tvar columns = [];\r\n\t\tvar withRollup = false;\r\n\t\tvar parse = Lexer.lex(expr, ['WITH[ ]+ROLLUP'], {useRegex:'i'});\r\n\t\tcolumns = Lexer.split(parse.tokens.shift().trim(), [',']).map(c => {\r\n\t\t\tvar order = c.match(/ASC|DESC/, 'i');\r\n\t\t\tif (order) {\r\n\t\t\t\torder = order[0];\r\n\t\t\t\tc = _beforeLast(c, order).trim();\r\n\t\t\t}\r\n\t\t\treturn {expr:parseCallback(c), order:order};\r\n\t\t});\r\n\t\tif (parse.matches.length === 1) {\r\n\t\t\twithRollup = true;\r\n\t\t}\r\n\t\treturn new Static(columns, withRollup);\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default OrderBy;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isString from '../js/isString.js';\r\n\r\n/**\r\n * Sorts a list performantly.\r\n *\r\n * @param array\t \t\t\t\t\tarr\r\n * @param string\t \t\t\t\torder\t\t\tASC|DESC \r\n * @param function\t\t\t\t\tcallback\r\n *\r\n * @return array\r\n */\r\nexport default function(arr, order, callback = null) {\r\n\tvar _arr = [];\r\n\t// Make a shallow copy\r\n\tvar length = arr.length;\r\n\tfor (var i = 0; i < length; i ++) {\r\n\t\t_arr.push({index: i, value: callback ? callback(arr[i]) : arr[i]});\r\n\t};\r\n\t_arr.sort(function(a, b) {\r\n\t\t// Using localeCompare if possible\r\n\t\tif (_isString(a.value) && \"\".localeCompare) {\r\n\t\t\treturn a.value.localeCompare(b.value);\r\n\t\t};\r\n\t\treturn a.value === b.value ? 0 : a.value > b.value ? 1 : -1;\r\n\t});\r\n\tif ((order || '').trim().toLowerCase() === 'desc') {\r\n\t\t_arr = _arr.reverse();\r\n\t};\r\n\t// Fill the order with actual values\r\n\treturn _arr.map(itm => arr[itm.index]);\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport _inherit from '@onephrase/commons/obj/inherit.js';\r\nimport _wrapped from '@onephrase/commons/str/wrapped.js';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\nimport WindowInterface from './WindowInterface.js';\r\nimport OrderBy from './OrderBy.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Window class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Window = class extends WindowInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(dfn) {\r\n\t\tsuper();\r\n\t\tthis.dfn = dfn;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRows, definitions = {}) {\r\n\t\tvar dfn = this.dfn;\r\n\t\tvar uuid = this.toString();\r\n\t\tif (this.dfn.name) {\r\n\t\t\tif (!definitions || !definitions[this.dfn.name]) {\r\n\t\t\t\tthrow new Error('Window name \"' + this.dfn.name + '\" is undefined!');\r\n\t\t\t}\r\n\t\t\tdfn = _inherit({}, this.dfn, definitions[this.dfn.name]);\r\n\t\t}\r\n\t\tvar exec = (rows, partitionBy) => {\r\n\t\t\tif (partitionBy.length) {\r\n\t\t\t\t// Drilldown...\r\n\t\t\t\tvar partitioning = {};\r\n\t\t\t\trows.forEach(row => {\r\n\t\t\t\t\tvar _for = partitionBy[0].eval(row);\r\n\t\t\t\t\tpartitioning[_for] = partitioning[_for] || [];\r\n\t\t\t\t\tpartitioning[_for].push(row);\r\n\t\t\t\t});\r\n\t\t\t\tObject.values(partitioning).map(partition => exec(partition, partitionBy.slice(1)));\r\n\t\t\t} else {\r\n\t\t\t\tif (dfn.orderBy) {\r\n\t\t\t\t\trows = dfn.orderBy.eval(rows);\r\n\t\t\t\t}\r\n\t\t\t\trows.forEach(row => {\r\n\t\t\t\t\tif (!row.WINDOWS) {\r\n\t\t\t\t\t\trow.WINDOWS = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\trow.WINDOWS[uuid] = rows;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t\ttry {\r\n\t\t\texec(tempRows, dfn.partitionBy || []);\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error('[\"' + this.toString() + '\" in window definition]: ' + e.message);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar length = Object.keys(this.dfn).length;\r\n\t\tif (length === 1 && this.dfn.name) {\r\n\t\t\treturn this.dfn.name;\r\n\t\t}\r\n\t\tvar str = [this.dfn.name];\r\n\t\tif (this.dfn.partitionBy) {\r\n\t\t\tstr.push('PARTITION BY ' + this.dfn.partitionBy.map(expr => expr.toString(context)).join(', '));\r\n\t\t}\r\n\t\tif (this.dfn.orderBy) {\r\n\t\t\tstr.push('ORDER BY ' + this.dfn.orderBy.toString(context));\r\n\t\t}\r\n\t\treturn '(' + str.filter(a => a).join(' ') + ')';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Window) {\r\n\t\tvar dfn = {};\r\n\t\tif (_wrapped(expr, '(', ')')) {\r\n\t\t\tif (expr = _unwrap(expr, '(', ')')) {\r\n\t\t\t\tvar parse = Lexer.lex(expr, ['PARTITION[ ]+BY', 'ORDER[ ]+BY'], {useRegex:'i'});\r\n\t\t\t\tdfn.name = parse.tokens.shift().trim();\r\n\t\t\t\tparse.matches.forEach(clauseType => {\r\n\t\t\t\t\tif (clauseType.toLowerCase().startsWith('partition')) {\r\n\t\t\t\t\t\tdfn.partitionBy = Lexer.split(parse.tokens.shift().trim(), [','])\r\n\t\t\t\t\t\t\t.map(expr => parseCallback(expr));\r\n\t\t\t\t\t} else if (clauseType.toLowerCase().startsWith('order')) {\r\n\t\t\t\t\t\tdfn.orderBy = parseCallback(parse.tokens.shift().trim(), [OrderBy]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdfn.name = expr;\r\n\t\t}\r\n\t\treturn new Static(dfn);\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Window;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport _mixin from '@onephrase/commons/js/mixin.js';\r\nimport _flatten from '@onephrase/commons/arr/flatten.js';\r\nimport _find from '@onephrase/commons/obj/find.js';\r\nimport _before from '@onephrase/commons/str/before.js';\r\nimport AggrInterface from './AggrInterface.js';\r\nimport Window from './Window.js';\r\nimport Call from './Call.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Aggr class\r\n * ---------------------------\r\n */\t\t\t\t\r\nconst Aggr = class extends _mixin(Call, AggrInterface) {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(reference, args) {\r\n\t\tsuper();\r\n\t\tthis.reference = reference;\r\n\t\tthis.args = args;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(context, callback = null) {\r\n\t\tvar args = this.args.list.slice();\r\n\t\targs.unshift(this.window ? context.WINDOWS[this.window.toString()] : context.AGGR.rows);\r\n\t\treturn this.evalWith(context, args, callback);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn super.toString(context) + (this.window ? ' OVER ' + this.window.toString(context) : '');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Aggr) {\r\n\t\tvar aggrMatch = null;\r\n\t\tvar aggrMatchRegex = _flatten(Static.funcs).join(\"\\\\(|\") + \"\\\\(\";\r\n\t\tif (aggrMatch = expr.trim().match(new RegExp('^(' + aggrMatchRegex + ')', 'i'))) {\r\n\t\t\tvar funcName = _before(aggrMatch[0], '(').toUpperCase();\r\n\t\t\tvar funcCategory = _find(Static.funcs, val => val === funcName, true)[0];\r\n\t\t\tvar splits = Lexer.split(expr, ['OVER'], {ci:true});\r\n\t\t\tif (funcCategory === 'explicitOver' && splits.length === 1) {\r\n\t\t\t\tthrow new Error(aggrMatch[0] + '() requires an OVER clause!');\r\n\t\t\t}\r\n\t\t\tvar instance = super.parse(splits.shift().trim(), parseCallback, Static);\r\n\t\t\tinstance.funcCategory = funcCategory;\r\n\t\t\tif (splits.length) {\r\n\t\t\t\tinstance.window = parseCallback(splits.pop().trim(), [Window]);\r\n\t\t\t}\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nAggr.funcs = {\r\n\tnormal: [\r\n\t\t'AVG', \r\n\t\t'BIT_AND', \r\n\t\t'BIT_OR', \r\n\t\t'BIT_XOR', \r\n\t\t'COUNT', \r\n\t\t'JSON_ARRAYAGG', \r\n\t\t'JSON_OBJECTAGG', \r\n\t\t'MAX', \r\n\t\t'MIN',\r\n\t\t'STDDEV_POP',\r\n\t\t'STDDEV',\r\n\t\t'STD',\r\n\t\t'STDDEV_SAMP',\r\n\t\t'SUM',\r\n\t\t'VAR_POP',\r\n\t\t'VARIANCE',\r\n\t\t'VAR_SAMP',\r\n\t\t// May not apply to OVER()\r\n\t\t'GROUP_CONCAT',\r\n\t\t'GROUP_CONCAT_WS',\r\n\t],\r\n\texplicitOver: [\r\n\t\t'CUME_DIST', \r\n\t\t'DENSE_RANK', \r\n\t\t'FIRST_VALUE', \r\n\t\t'LAG', \r\n\t\t'LAST_VALUE', \r\n\t\t'LEAD', \r\n\t\t'NTH_VALUE', \r\n\t\t'NTLE',\r\n\t\t'PERCENT_RANK',\r\n\t\t'RANK',\r\n\t\t'ROW_NUMBER',\r\n\t],\r\n\tsupport: [\r\n\t\t'ANY_VALUE', \r\n\t\t'COLUMN', \r\n\t\t'COLUMNS', \r\n\t\t'GROUPING', \r\n\t],\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Aggr;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * SelectInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'SelectStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * TableInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'TableExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * UnionInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'UnionConstruct'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _isObject from '@onephrase/commons/js/isObject.js';\r\nimport FetchInterface from './FetchInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Table class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Table = class extends FetchInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(rows, alias, iterateOnce = false) {\r\n\t\tsuper();\r\n\t\tthis.rows = rows;\r\n\t\tthis.alias = alias;\r\n\t\tthis.iterateOnce = iterateOnce;\r\n\t\t// -----------------\r\n\t\tthis.schema = rows.schema;\r\n\t\tif (!rows.schema) {\r\n\t\t\tthis.schema = {fields:{}, uniqueKeys:[]};\r\n\t\t}\r\n\t\t// -----------------\r\n\t\tthis._onfinish = [];\r\n\t\tthis.cursor = -1;\r\n\t\tthis.next();\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tonfinish(callback) {this._onfinish.push(callback);}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tnext() {\r\n\t\tif (this.cursor === -1) {\r\n\t\t\tthis.cursor = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.cursor < this.rows.length - 1) {\r\n\t\t\tthis.cursor ++;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.rows.length || this.cursor === this.rows.length - 1) {\r\n\t\t\tthis._onfinish.forEach(callback => callback());\r\n\t\t\tif (!this.iterateOnce) {\r\n\t\t\t\tthis.cursor = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tfetch() {\r\n\t\tif (this.cursor < this.rows.length) {\r\n\t\t\treturn this.rows[this.cursor];\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tdelete() {\r\n\t\tif (this.cursor < this.rows.length) {\r\n\t\t\tdelete this.rows[this.cursor];\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tinsert(values, columns = []) {\r\n\t\tvar rowObj = {};\r\n\t\tif (this.schema.fields) {\r\n\t\t\tvar schemaColumns = Object.keys(this.schema.fields);\r\n\t\t\tif (columns.length) {\r\n\t\t\t\tvar unknownFields = columns.filter(col => schemaColumns.indexOf(col) === -1);\r\n\t\t\t\tif (unknownFields.length) {\r\n\t\t\t\t\tthrow new Error('Unknown column(s): ' + unknownFields.join(', '));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tcolumns = schemaColumns;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar schemaColumns = columns;\r\n\t\t}\r\n\t\tif (columns.length !== values.length) {\r\n\t\t\tthrow new Error('Column/values count mismatch!');\r\n\t\t}\r\n\t\tschemaColumns.forEach(schemaColumnName => {\r\n\t\t\tvar keyColumnPosition = columns.indexOf(schemaColumnName);\r\n\t\t\tif (keyColumnPosition === -1) {\r\n\t\t\t\trowObj[schemaColumnName] = this.schema.fields && _isObject(this.schema.fields[schemaColumnName]) \r\n\t\t\t\t\t? this.schema.fields[schemaColumnName].default : null;\r\n\t\t\t} else {\r\n\t\t\t\trowObj[schemaColumnName] = values[keyColumnPosition];\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.rows.push(rowObj);\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Table;\r\n","\r\n/**\r\n * ---------------------------\r\n * FetchInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default class {};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Table from './Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * DerivedTable class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst DerivedTable = class extends Table {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(database, query, alias, iterateOnce = false) {\r\n\t\tsuper([], alias, iterateOnce);\r\n\t\tthis.database = database;\r\n\t\tthis.query = query;\r\n\t\tthis.derivative = this.query.bind(this.database);\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tnext() {\r\n\t\tif (!this.eof) {\r\n\t\t\tvar row = this.derivative.fetch();\r\n\t\t\tif (row) {\r\n\t\t\t\tthis.rows.push(row);\r\n\t\t\t} else {\r\n\t\t\t\tthis.eof = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn super.next();\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default DerivedTable;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAbstractionInterface,\r\n\tReferenceInterface,\r\n\tLexer\r\n} from '../index.js';\r\nimport _isArray from '@onephrase/commons/js/isArray.js';\r\nimport _objFrom from '@onephrase/commons/obj/from.js';\r\nimport SelectInterface from './SelectInterface.js';\r\nimport TableInterface from './TableInterface.js';\r\nimport UnionInterface from './UnionInterface.js';\r\nimport DerivedTableBase from '../Base/DerivedTable.js';\r\nimport TableBase from '../Base/Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Table class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Table = class extends TableInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr, alias, claused = false) {\r\n\t\tsuper();\r\n\t\t// ReferenceInterface or AbstractionInterface\r\n\t\tthis.expr = expr;\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = claused;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database = null) {\r\n\t\t// Derived table???\r\n\t\tif (this.expr instanceof AbstractionInterface) {\r\n\t\t\treturn new DerivedTableBase(database, this.expr/*ABS*/.expr/*SELECT*/, this.alias);\r\n\t\t}\r\n\t\tif (this.expr instanceof ReferenceInterface) {\r\n\t\t\t// We must eval() without context...\r\n\t\t\tif (this.expr.context) {\r\n\t\t\t\tvar tableData = this.expr.eval(_objFrom(this.expr.context.name, database));\r\n\t\t\t} else {\r\n\t\t\t\tthis.expr.searchWithoutContext = false;\r\n\t\t\t\tvar tableData = this.expr.eval(database);\r\n\t\t\t}\r\n\t\t\tif (!_isArray(tableData)) {\r\n\t\t\t\tthrow new Error('Table \"' + this.expr.name + '\" could not be initialized!');\r\n\t\t\t}\r\n\t\t\t// + this.expr.name does not have any backticka problem\r\n\t\t\treturn new TableBase(tableData, this.alias || this.expr.name);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [this.expr.toString(context), this.claused ? 'AS' : '', this.alias].filter(a => a).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Table) {\r\n\t\tvar parse = Lexer.lex(expr, [' (as )?'], {useRegex:'i'});\r\n\t\tif (parse.tokens.length < 3) {\r\n\t\t\tvar tableParse = parseCallback(parse.tokens[0]);\r\n\t\t\tif (!(tableParse instanceof ReferenceInterface) \r\n\t\t\t&& !(tableParse instanceof AbstractionInterface && (tableParse.expr instanceof SelectInterface || tableParse.expr instanceof UnionInterface))) {\r\n\t\t\t\tthrow new Error('Table expression must be either a plain reference or a (derived) query!');\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\ttableParse, \r\n\t\t\t\t(parse.tokens[1] || '').trim(), \r\n\t\t\t\t(parse.matches[0] || '').trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * --------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tas(alias) {\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = true;\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Table;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport _isArray from '@onephrase/commons/js/isArray.js';\r\nimport _each from '@onephrase/commons/obj/each.js';\r\nimport _find from '@onephrase/commons/obj/find.js';\r\nimport Table from './Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Delete class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Stmt = class {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetToString(context, callback) {\r\n\t\tvar strArray = [];\r\n\t\t_each(this.exprs, (clauseType, expr) => {\r\n\t\t\tvar str = null;\r\n\t\t\tvar clause = this.clauses[clauseType];\r\n\t\t\tif (clauseType === 'joins') {\r\n\t\t\t\tstr = expr.map((join, i) => clause[i] + ' ' + join.toString(context)).join(' ');\r\n\t\t\t} else if (clauseType === 'table') {\r\n\t\t\t\tstr = clause + ' ' + (\r\n\t\t\t\t\t_isArray(expr) ? expr.map(table => table.toString(context)).join(', ') : expr.toString(context)\r\n\t\t\t\t);\r\n\t\t\t} else if (!callback || !(str = callback(clauseType, expr, clause))) {\r\n\t\t\t\tstr = clause + ' ' + expr.toString(context);\r\n\t\t\t}\r\n\t\t\tstrArray.push(str);\r\n\t\t});\r\n\t\treturn strArray.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic getParse(expr, stmtClauses, parseCallback, callback) {\r\n\t\t// Match clauses; case-insensitively\r\n\t\tvar useRegex = 'i';\r\n\t\tvar parse = Lexer.lex(expr, Object.values(stmtClauses), {useRegex:useRegex});\r\n\t\tif (parse.matches.length) {\r\n\t\t\tvar exprs = {};\r\n\t\t\tvar clauses = {};\r\n\t\t\tparse.matches.forEach((clause, i) => {\r\n\t\t\t\tvar clauseType = _find(stmtClauses, c => clause.match(new RegExp(c, useRegex)), true/*deep*/);\r\n\t\t\t\tvar _expr = parse.tokens[i + 1].trim();\r\n\t\t\t\tvar _exprParse = null;\r\n\t\t\t\tif (clauseType === 'joins') {\r\n\t\t\t\t\tvar _exprParse = parseCallback(_expr);\r\n\t\t\t\t\tif (_exprParse.type = clause.match(new RegExp('(INNER|CROSS|LEFT|RIGHT)', 'i'))) {\r\n\t\t\t\t\t\t_exprParse.type = _exprParse.type[0].toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!exprs[clauseType]) {\r\n\t\t\t\t\t\texprs[clauseType] = [_exprParse];\r\n\t\t\t\t\t\tclauses[clauseType] = [clause];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\texprs[clauseType].push(_exprParse);\r\n\t\t\t\t\t\tclauses[clauseType].push(clause);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (clauseType === 'table') {\r\n\t\t\t\t\t\tvar tables = Lexer.split(_expr, [',']).map(\r\n\t\t\t\t\t\t\ttable => parseCallback(table.trim(), [Table])\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tvar _exprParse = tables.length === 1 ? tables[0] : tables;\r\n\t\t\t\t\t} else if (!callback || !(_exprParse = callback(clauseType, _expr))) {\r\n\t\t\t\t\t\tvar _exprParse = parseCallback(_expr);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texprs[clauseType] = _exprParse;\r\n\t\t\t\t\tclauses[clauseType] = clause;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn {exprs:exprs, clauses:clauses};\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Stmt;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * DeleteInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'DeleteStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _avg from '@onephrase/commons/arr/avg.js';\r\nimport _unique from '@onephrase/commons/arr/unique.js';\r\nimport _max from '@onephrase/commons/arr/max.js';\r\nimport _min from '@onephrase/commons/arr/min.js';\r\nimport _sum from '@onephrase/commons/arr/sum.js';\r\nimport _rand from '@onephrase/commons/arr/rand.js';\r\nimport _isNull from '@onephrase/commons/js/isNull.js';\r\nimport _after from '@onephrase/commons/str/after.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Row class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Row = class {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCONCAT(...args) {\r\n\t\treturn args.join('');\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCONCAT_WS(...args) {\r\n\t\treturn args.join(args.shift());\r\n\t}\r\n\t\r\n\t/**\r\n\t * ----------------\r\n\t * AGGREGATE FUNCTIONS\r\n\t * ----------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCOUNT(rows, column) {\r\n\t\tif (column.toString() === '*') {\r\n\t\t\treturn rows.length;\r\n\t\t}\r\n\t\tif (arguments.length === 3 && column.toString().toUpperCase() === 'DISTINCT') {\r\n\t\t\tvar vals = _unique(this.COLUMN(rows, arguments[2]));\r\n\t\t} else {\r\n\t\t\tvar vals = this.COLUMN(rows, column);\r\n\t\t}\r\n\t\treturn vals.filter(v => !_isNull(v)).length;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tGROUP_CONCAT(rows, column) {\r\n\t\treturn this.COLUMN(rows, column).join('');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tGROUP_CONCAT_WS(rows, separator, column) {\r\n\t\treturn this.COLUMN(rows, column).join(separator.eval(this));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tAVG(rows, column) {\r\n\t\treturn _avg(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tMAX(rows, column) {\r\n\t\treturn _max(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tMIN(rows, column) {\r\n\t\treturn _min(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tSUM(rows, column) {\r\n\t\treturn _sum(this.COLUMN(rows, column));\r\n\t}\r\n\r\n\t/**\r\n\t * ----------------\r\n\t * AGGREGATE SUPPORT FUNCTIONS\r\n\t * ----------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tANY_VALUE(rows, column) {\r\n\t\treturn _rand(this.COLUMN(rows, column));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tGROUPING(rows, ...onColumns) {\r\n\t\tif (!this.AGGR || !this.AGGR.isRollup) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn onColumns.reduce((cum, column, i) => {\r\n\t\t\tvar match = this.AGGR.by.filter(by => {\r\n\t\t\t\tvar byStr = by.toString();\r\n\t\t\t\tvar columnStr = column.toString();\r\n\t\t\t\tif (columnStr.indexOf('.') === -1 && byStr.indexOf('.') > -1) {\r\n\t\t\t\t\tbyStr = _after(byStr, '.');\r\n\t\t\t\t}\r\n\t\t\t\treturn columnStr === byStr;\r\n\t\t\t});\r\n\t\t\treturn match.length ? i + 1 : cum;\r\n\t\t}, 0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCOLUMN(rows, arg) {\r\n\t\treturn rows.map(row => arg.eval(row));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tCOLUMNS(rows, args) {\r\n\t\treturn args.map(arg => this.COLUMN(rows, arg));\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Row;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _sum from './sum.js';\r\n\r\n/**\r\n * Gets the average of an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nexport default function(arr) {\r\n\treturn arr.length ? _sum(arr) / arr.length : 0;\r\n};","\r\n/**\r\n * Gets the maximum of an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nexport default function(arr) {\r\n\tarr = arr.slice();\r\n\treturn arr.reduce((v1, v2) => Math.max(v1, v2), arr.shift());\r\n};\r\n","\r\n/**\r\n * Gets the minimum of an array of numbers.\r\n *\r\n * @param array \tarr\r\n *\r\n * @return number\r\n */\r\nexport default function(arr) {\r\n\tarr = arr.slice();\r\n\treturn arr.reduce((v1, v2) => Math.min(v1, v2), arr.shift());\r\n};\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _merge from '@onephrase/commons/obj/merge.js';\r\nimport _objFrom from '@onephrase/commons/obj/from.js';\r\nimport Row from './Row.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Base class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Base = class {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(table, where, ...joins) {\r\n\t\tthis.table = table;\r\n\t\tthis.where = where;\r\n\t\tthis.joins = joins;\r\n\t\t// -------------------------\r\n\t\tthis.schemas = {};\r\n\t\t[this.table, ...this.joins].forEach(table => {\r\n\t\t\tthis.schemas[table.alias] = table.schema || {};\r\n\t\t});\r\n\t\t// -------------------------\r\n\t\tthis._onfinish = [];\r\n\t\tif (this.joins.length) {\r\n\t\t\tthis.joins.reduce((a, b) => {\r\n\t\t\t\ta.onfinish(b.next.bind(b)); return b;\r\n\t\t\t}, this.table).onfinish(() => {this.eof = true;});\r\n\t\t} else {\r\n\t\t\tthis.table.onfinish(() => {this.eof = true;});\r\n\t\t}\r\n\t\tthis.eof = false;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tonfinish(callback) {this._onfinish.push(callback);}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tnext() {\r\n\t\t// -----------------\r\n\t\t// Advance or initilaize?\r\n\t\t// -----------------\r\n\t\tif (this.initialized) {\r\n\t\t\tthis.table.next();\r\n\t\t} else {\r\n\t\t\tthis.initialized = true;\r\n\t\t}\r\n\t\tif (this.eof) {\r\n\t\t\tthis._onfinish.forEach(callback => callback());\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar tables = [this.table.alias];\r\n\t\tvar rowBase = new Row;\r\n\t\t_merge(0, rowBase, _objFrom(this.table.alias, this.table.fetch() || {}));\r\n\t\t// Add schema\r\n\t\tif (Object.keys(this.schemas).length) {\r\n\t\t\trowBase['#'] = this.schemas;\r\n\t\t}\r\n\t\tif (this.joins.length) {\r\n\t\t\tthis.joins.forEach(joinTable => {\r\n\t\t\t\ttables.push(joinTable.alias);\r\n\t\t\t\t_merge(0, rowBase, _objFrom(joinTable.alias, joinTable.fetch()));\r\n\t\t\t\tif (joinTable.join && joinTable.join.type && joinTable.join.type !== 'full') {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tif (joinTable.join.conditionClause.trim().toLowerCase() === 'using') {\r\n\t\t\t\t\t\t\t// Join using \"column name\"...\r\n\t\t\t\t\t\t\tvar column = joinTable.join.condition.toString();\r\n\t\t\t\t\t\t\tvar shouldJoin = rowBase[joinTable.alias][column] === rowBase[this.table.alias][column];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar shouldJoin = joinTable.join.condition.eval(rowBase);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\tthrow new Error('[\"' + joinTable.join.condition.toString() + '\" in JOIN clause]: ' + e.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!shouldJoin) {\r\n\t\t\t\t\t\tswitch(joinTable.join.type) {\r\n\t\t\t\t\t\t\tcase 'left':\r\n\t\t\t\t\t\t\t\t// Clear joined table\r\n\t\t\t\t\t\t\t\tArr.remove(tables, joinTable.alias);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'right':\r\n\t\t\t\t\t\t\t\t// Clear main table\r\n\t\t\t\t\t\t\t\tArr.remove(tables, this.table.alias);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'inner':\r\n\t\t\t\t\t\t\t\t// Clear both tables\r\n\t\t\t\t\t\t\t\tArr.remove(tables, joinTable.alias);\r\n\t\t\t\t\t\t\t\tArr.remove(tables, this.table.alias);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t// -----------------\r\n\t\t// Invalid joins?\r\n\t\t// -----------------\r\n\t\tif (!tables.length) {\r\n\t\t\treturn this.next();\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (this.where && !this.where.eval(rowBase)) {\r\n\t\t\t\treturn this.next();\r\n\t\t\t}\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error('[\"' + this.where.toString() + '\" in WHERE clause]: ' + e.message);\r\n\t\t}\r\n\t\treturn rowBase;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tfetch() {\r\n\t\tvar tempRow = new Row;\r\n\t\t[this.table, ...this.joins].forEach(table => {\r\n\t\t\ttempRow[table.alias] = table.fetch() || {};\r\n\t\t});\r\n\t\treturn tempRow;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tdelete() {\r\n\t\treturn [this.table, ...this.joins].reduce((prevSuccess, table) => prevSuccess + (table.delete() ? 1 : 0), 0) / (1 + this.joins.length);\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Base;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport _mixin from '@onephrase/commons/js/mixin.js';\r\nimport _isArray from '@onephrase/commons/js/isArray.js';\r\nimport Stmt from './Stmt.js';\r\nimport DeleteInterface from './DeleteInterface.js';\r\nimport Base from '../Base/Base.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Delete class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Delete = class extends _mixin(Stmt, DeleteInterface) {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, clauses) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.clauses = clauses;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database) {\r\n\t\t// ---------------------------\r\n\t\t// INITIALIZE DATASOURCES WITH JOIN ALGORITHIMS APPLIED\r\n\t\t// ---------------------------\r\n\t\tvar tables = (_isArray(this.exprs.table) ? this.exprs.table : [this.exprs.table]).concat(this.exprs.joins || []);\r\n\t\ttables = tables.map(table => table.eval(database))\r\n\t\tthis.base = new Base(tables.shift(), this.exprs.where, ...tables);\r\n\t\tvar rowCount = 0;\r\n\t\twhile (this.base.next()) {\r\n\t\t\trowCount += this.base.delete();\r\n\t\t}\r\n\t\treturn rowCount;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.getToString(context);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Delete) {\r\n\t\tif (expr.trim().match(/^DELETE[ ]+FROM/, 'i')) {\r\n\t\t\tvar stmtParse = super.getParse(expr, Static.clauses, parseCallback);\r\n\t\t\treturn new Static(stmtParse.exprs, stmtParse.clauses);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nDelete.clauses = {\r\n\ttable: 'DELETE[ ]+FROM',\r\n\twhere: 'WHERE',\r\n\t// inner join, cross join, {left|right} [outer] join\r\n\tjoins: '(INNER[ ]+|CROSS[ ]+|(LEFT|RIGHT)([ ]+OUTER)?[ ]+)?JOIN',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Delete;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * FieldInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'FieldExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tAbstractionInterface,\r\n\tReferenceInterface,\r\n\tLexer\r\n} from '../index.js';\r\nimport _wrapped from '@onephrase/commons/str/wrapped.js';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\nimport _objFrom from '@onephrase/commons/obj/from.js';\r\nimport FieldInterface from './FieldInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Field class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Field = class extends FieldInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(expr, alias, claused = false) {\r\n\t\tsuper();\r\n\t\tthis.expr = expr;\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = claused;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRow, database) {\r\n\t\tif (this.expr instanceof AbstractionInterface) {\r\n\t\t\tvar value = this.expr.eval(database);\r\n\t\t} else {\r\n\t\t\tvar value = this.expr.eval(tempRow);\r\n\t\t}\r\n\t\treturn _objFrom(this.getAlias(), value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(tempRow = null) {\r\n\t\treturn [this.expr.toString(tempRow), this.claused ? 'AS' : '', this.alias].filter(a => a).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Field) {\r\n\t\tvar splits = Lexer.split(expr, [' (as )?'], {useRegex:'i', preserveDelims:true});\r\n\t\tvar exprParse = null;\r\n\t\tvar alias = splits.pop().trim();\r\n\t\tvar claused = alias.substr(0, 3).toLowerCase() === 'as ';\r\n\t\tif (claused) {\r\n\t\t\t// With an \"AS\" clause, its easy to obtain the alias...\r\n\t\t\t// E.g: SELECT first_name fname, 4 + 5 result, 5 + 5\r\n\t\t\talias = alias.substr(3).trim();\r\n\t\t\texprParse = parseCallback(splits.join('').trim());\r\n\t\t} else if (splits.length && (!alias.match(/[^0-9a-zA-Z_]/) || _wrapped(alias, '`', '`'))) {\r\n\t\t\t// Without an \"AS\" clause, its hard to determine if an expression is actually aliased...\r\n\t\t\t// E.g: In the statement SELECT first_name fname, 4 + 5 result, 5 + 5 FROM ...,\r\n\t\t\t// we can only assume that the last space-separated expr is rhe alias.\r\n\t\t\t// When that fails, then it is most-likely there is no alias. \r\n\t\t\ttry {\r\n\t\t\t\texprParse = parseCallback(splits.join('').trim());\r\n\t\t\t} catch(e) {}\r\n\t\t}\r\n\t\tif (!exprParse) {\r\n\t\t\talias = null;\r\n\t\t\texprParse = parseCallback(expr);\r\n\t\t}\r\n\t\treturn new Static(exprParse, alias, claused);\r\n\t}\r\n\t\r\n\t/**\r\n\t * --------------\r\n\t */\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tas(alias) {\r\n\t\tthis.alias = alias;\r\n\t\tthis.claused = true;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetAlias() {\r\n\t\tvar alias = this.alias \r\n\t\tif (!alias) {\r\n\t\t\talias = Lexer.split(this.expr.toString(), ['.']).pop();\r\n\t\t\tif (_wrapped(alias, '`', '`')) {\r\n\t\t\t\talias = _unwrap(alias, '`', '`');\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn alias;\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Field;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * GroupByInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'GroupByExpression'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport _inherit from '@onephrase/commons/obj/inherit.js';\r\nimport _copy from '@onephrase/commons/obj/copy.js';\r\nimport _after from '@onephrase/commons/str/after.js';\r\nimport GroupByInterface from './GroupByInterface.js';\r\nimport Row from '../Base/Row.js';\r\n\r\n/**\r\n * ---------------------------\r\n * GroupBy class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst GroupBy = class extends GroupByInterface {\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(columns, having = null, withRollup = false) {\r\n\t\tsuper();\r\n\t\tthis.columns = columns;\r\n\t\tthis.having = having;\r\n\t\tthis.withRollup = withRollup;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(tempRows) {\r\n\t\tvar groupBy = (rows, by, result) => {\r\n\t\t\t// This will end up either as\r\n\t\t\t// regular summary or rollup {super summary}\r\n\t\t\tif (by.length) {\r\n\t\t\t\t// Drilldown...\r\n\t\t\t\tvar grouping = {};\r\n\t\t\t\trows.forEach(row => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tvar _for = by[0].eval(row);\r\n\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\tthrow new Error('[\"' + this.toString() + '\" in group by clause]: ' + e.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgrouping[_for] = grouping[_for] || [];\r\n\t\t\t\t\tgrouping[_for].push(row);\r\n\t\t\t\t});\r\n\t\t\t\tObject.values(grouping).map(group => groupBy(group, by.slice(1), result));\r\n\t\t\t}\r\n\t\t\tif (!by.length/*We're on end nodes*/ || this.withRollup) {\r\n\t\t\t\tvar summaryRow = new Row; _inherit(summaryRow, rows[0]);\r\n\t\t\t\tsummaryRow.$ = _copy(summaryRow.$);\r\n\t\t\t\tsummaryRow.AGGR = {rows: rows, by: by};\r\n\t\t\t\t// HOW WE'LL DETERMINE A SUPER AGGREGATE ROW...\r\n\t\t\t\tsummaryRow.AGGR.isRollup = by.length && this.withRollup;\r\n\t\t\t\tif (summaryRow.AGGR.isRollup) {\r\n\t\t\t\t\tby.forEach(b => {\r\n\t\t\t\t\t\tb = b.toString().indexOf('.') > -1 ? _after(b.toString(), '.') : b.toString();\r\n\t\t\t\t\t\tif (b in summaryRow.$) {\r\n\t\t\t\t\t\t\tsummaryRow.$[b] = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tresult.push(summaryRow);\r\n\t\t\t\treturn summaryRow;\r\n\t\t\t}\r\n\t\t};\r\n\t\tvar result = [];\r\n\t\tgroupBy(tempRows, this.columns.slice(), result);\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar str = [this.columns.map(c => c.toString(context)).join(', ')];\r\n\t\tif (this.withRollup) {\r\n\t\t\tstr.push('WITH ROLLUP');\r\n\t\t}\r\n\t\tif (this.having) {\r\n\t\t\tstr.push('HAVING ' + this.having.toString(context));\r\n\t\t}\r\n\t\treturn str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = GroupBy) {\r\n\t\tvar parse = Lexer.lex(expr, ['WITH[ ]+ROLLUP', 'HAVING'], {useRegex:'i'});\r\n\t\tvar columns = Lexer.split(parse.tokens.shift().trim(), [',']).map(\r\n\t\t\tc => parseCallback(c.trim())\r\n\t\t);\r\n\t\tvar having = null;\r\n\t\tvar withRollup = false;\r\n\t\tparse.matches.forEach(clauseType => {\r\n\t\t\tif (clauseType.toLowerCase().startsWith('with')) {\r\n\t\t\t\twithRollup = true;\r\n\t\t\t\tparse.tokens.shift();\r\n\t\t\t} else if (clauseType.toLowerCase().startsWith('having')) {\r\n\t\t\t\thaving = parseCallback(parse.tokens.shift().trim());\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn new Static(columns, having, withRollup);\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default GroupBy;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * InsertInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'InsertStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\n//import ValInterface from './ValInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Val class\r\n * ---------------------------\r\n */\t\t\t\t\r\nconst Val = class {\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(input) {\r\n\t\tthis.input = input;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval() {\r\n\t\treturn this.input;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn '?';\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Val;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport _wrapped from '@onephrase/commons/str/wrapped.js';\r\nimport _unwrap from '@onephrase/commons/str/unwrap.js';\r\nimport _intersect from '@onephrase/commons/arr/intersect.js';\r\nimport InsertInterface from './InsertInterface.js';\r\nimport Assignment from './Assignment.js';\r\nimport Reference from './Reference.js';\r\nimport Assertion from './Assertion.js';\r\nimport Comparison from './Comparison.js';\r\nimport Base from '../Base/Base.js';\r\nimport Table from './Table.js';\r\nimport Val from './Val.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Insert class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Insert = class extends InsertInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(table, columns, values, insertType, onDuplicateKeyUpdate) {\r\n\t\tsuper();\r\n\t\tthis.table = table;\r\n\t\tthis.columns = columns;\r\n\t\tthis.values = values;\r\n\t\tthis.insertType = insertType;\r\n\t\tthis.onDuplicateKeyUpdate = onDuplicateKeyUpdate;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database) {\r\n\t\tvar tableBase = this.table.eval(database);\r\n\t\t// ---------------------------\r\n\t\tvar values = this.values;\r\n\t\tvar insertType = this.insertType.toUpperCase();\r\n\t\tif (insertType === 'SET') {\r\n\t\t\tvar columns = values.map(assignment => assignment.reference.name);\r\n\t\t\tvalues = [values.map(assignment => assignment.val)];\r\n\t\t} else {\r\n\t\t\tif (insertType === 'SELECT') {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvalues = values.eval(database).map(row => Object.values(row));\r\n\t\t\t\t} catch(e) {\r\n\t\t\t\t\tthrow new Error('[\"' + values.toString() + '\" in SELECT clause]: ' + e.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar columns = this.columns || (tableBase.schema.fields ? Object.keys(tableBase.schema.fields) : []);\r\n\t\t}\r\n\t\tvar uniqueKeys = _intersect(tableBase.schema.uniqueKeys, columns);\r\n\t\tvar rowCount = 0;\r\n\t\tvar rowArr = null;\r\n\t\twhile (rowArr = values.shift()) {\r\n\t\t\t// ------------------------\r\n\t\t\t// HANDLE ON_DUPLICATE_KEY_UPDATE\r\n\t\t\t// ------------------------\r\n\t\t\tvar duplicateKeyUpdateCount = 0;\r\n\t\t\tif (uniqueKeys.length) {\r\n\t\t\t\t// Generate a comparisons list on values going into unique keys\r\n\t\t\t\tvar comparisons = uniqueKeys.map(columnName => {\r\n\t\t\t\t\tvar keyColumnPosition = columns.indexOf(columnName);\r\n\t\t\t\t\tvar valueExpr = insertType === 'SELECT' \r\n\t\t\t\t\t\t? new Val(rowArr[keyColumnPosition]) \r\n\t\t\t\t\t\t: rowArr[keyColumnPosition]/*Still a parse object*/;\r\n\t\t\t\t\tvar nameExpr = new Reference(null, columnName);\r\n\t\t\t\t\tnameExpr.parseCallback = this.parseCallback;\r\n\t\t\t\t\treturn new Comparison(nameExpr, valueExpr, '=');\r\n\t\t\t\t});\r\n\t\t\t\t// Generate the assertion\r\n\t\t\t\tvar where = new Assertion(comparisons, Assertion.operators.or);\r\n\t\t\t\tvar base = new Base(this.table.eval(database), where);\r\n\t\t\t\twhile (base.next()) {\r\n\t\t\t\t\tif (!this.onDuplicateKeyUpdate) {\r\n\t\t\t\t\t\tthrow new Error('Inserting duplicate values on unique keys: ' + uniqueKeys.join(', '));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar rowBase = base.fetch();\r\n\t\t\t\t\tthis.onDuplicateKeyUpdate.forEach(assignment => assignment.eval(rowBase));\r\n\t\t\t\t\tduplicateKeyUpdateCount ++;\r\n\t\t\t\t}\r\n\t\t\t\trowCount += duplicateKeyUpdateCount;\r\n\t\t\t}\r\n\t\t\t// ------------------------\r\n\t\t\t// HANDLE INSERT\r\n\t\t\t// ------------------------\r\n\t\t\tif (!duplicateKeyUpdateCount) {\r\n\t\t\t\tif (insertType !== 'SELECT') {\r\n\t\t\t\t\trowArr = rowArr.map(val => val.eval(database));\r\n\t\t\t\t}\r\n\t\t\t\ttableBase.insert(rowArr, columns);\r\n\t\t\t\trowCount ++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rowCount;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar str = [this.table.toString(context)];\r\n\t\tif (this.insertType.toUpperCase() === 'SET') {\r\n\t\t\tstr.push('SET ' + this.values.map(assignment => assignment.toString(context)).join(', '));\r\n\t\t} else {\r\n\t\t\tif (this.columns) {\r\n\t\t\t\tstr.push('(' + this.columns.join(', ') + ')');\r\n\t\t\t}\r\n\t\t\tif (this.insertType.toUpperCase() === 'SELECT') {\r\n\t\t\t\tstr.push(this.values.toString(context));\r\n\t\t\t} else {\r\n\t\t\t\tstr.push('VALUES (' + this.values.map(\r\n\t\t\t\t\trow => row.map(\r\n\t\t\t\t\t\tval => val.toString(context)\r\n\t\t\t\t\t).join(', ')\r\n\t\t\t\t).join('), (') + ')');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.onDuplicateKeyUpdate) {\r\n\t\t\tstr.push('ON DUPLICATE KEY UPDATE ' + this.onDuplicateKeyUpdate.map(assignment => assignment.toString(context)).join(', '));\r\n\t\t}\r\n\t\treturn 'INSERT INTO ' + str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Insert) {\r\n\t\tif (expr.trim().match(/^INSERT([ ]+INTO)?/, 'i')) {\r\n\t\t\tvar parse = Lexer.lex(expr, Object.values(Insert.clauses), {useRegex:'i'});\r\n\t\t\tparse.tokens.shift();\r\n\t\t\tvar table = parse.tokens.shift().trim();\r\n\t\t\tvar columns = [];\r\n\t\t\tvar values = parse.tokens.shift();\r\n\t\t\tvar insertType = parse.matches[1].toUpperCase();\r\n\t\t\tif (insertType === 'SET') {\r\n\t\t\t\ttable = parseCallback(table, [Table]);\r\n\t\t\t\tvalues = Lexer.split(values.trim(), [','])\r\n\t\t\t\t\t.map(e => parseCallback(e.trim(), [Assignment]));\r\n\t\t\t} else {\r\n\t\t\t\tvar tableColumnSplit = Lexer.split(table, [' ']);\r\n\t\t\t\ttable = parseCallback(tableColumnSplit.shift().trim(), [Table]);\r\n\t\t\t\tif (tableColumnSplit.length) {\r\n\t\t\t\t\tcolumns = tableColumnSplit[0].trim();\r\n\t\t\t\t\tcolumns = Lexer.split(_wrapped(columns, '(', ')') ? _unwrap(columns, '(', ')') : columns, [','])\r\n\t\t\t\t\t\t.map(c => c.trim());\r\n\t\t\t\t}\r\n\t\t\t\tif (insertType === 'SELECT') {\r\n\t\t\t\t\tvalues = parseCallback('SELECT ' + values.trim());\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// insertType === 'VALUES' || insertType === 'VALUE'\r\n\t\t\t\t\tvalues = Lexer.split(values.trim(), [','])\r\n\t\t\t\t\t\t.map(row => Lexer.split(_unwrap(row.trim(), '(', ')'), [','])\r\n\t\t\t\t\t\t\t.map(val => parseCallback(val.trim())));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar onDuplicateKeyUpdate = parse.tokens.shift();\r\n\t\t\tif (onDuplicateKeyUpdate) {\r\n\t\t\t\tonDuplicateKeyUpdate = Lexer.split(onDuplicateKeyUpdate.trim(), [','])\r\n\t\t\t\t\t.map(assignment => parseCallback(assignment.trim(), [Assignment]));\r\n\t\t\t}\r\n\t\t\tvar instance = new Static(table, columns, values, insertType, onDuplicateKeyUpdate);\r\n\t\t\tinstance.parseCallback = parseCallback;\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nInsert.clauses = {\r\n\ttable: 'INSERT([ ]+INTO)?',\r\n\tvalues: '(VALUES|VALUE|SET|SELECT)',\r\n\tupdate: 'ON[ ]+DUPLICATE[ ]+KEY[ ]+UPDATE',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Insert;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * JoinInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'JoinConstruct'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport JoinInterface from './JoinInterface.js';\r\nimport {Lexer} from '../index.js';\r\nimport Table from './Table.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Join class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Join = class extends JoinInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(table, condition, conditionClause) {\r\n\t\tsuper();\r\n\t\tthis.table = table;\r\n\t\tthis.condition = condition;\r\n\t\tthis.conditionClause = conditionClause;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database) {\r\n\t\tvar TableBase = this.table.eval(database);\r\n\t\tTableBase.join = {\r\n\t\t\ttype: this.type, // Expected to be added by context\r\n\t\t\tcondition: this.condition, \r\n\t\t\tconditionClause: this.conditionClause\r\n\t\t};\r\n\t\treturn TableBase;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn [\r\n\t\t\tthis.table.toString(context), \r\n\t\t\tthis.conditionClause, \r\n\t\t\tthis.condition.toString(context)\r\n\t\t].join('');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, params = {}, cntxt = null) {\r\n\t\tvar parse = Lexer.lex(expr, Join.clauses);\r\n\t\tif (parse.tokens.length === 2) {\r\n\t\t\treturn new /*static*/Join(\r\n\t\t\t\tparseCallback(parse.tokens[0], [Table]), \r\n\t\t\t\tparseCallback(parse.tokens[1]), \r\n\t\t\t\tparse.matches[0]\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nJoin.clauses = [' ON ', ' USING '];\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Join;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport _mixin from '@onephrase/commons/js/mixin.js';\r\nimport _isArray from '@onephrase/commons/js/isArray.js';\r\nimport _arrFrom from '@onephrase/commons/arr/from.js';\r\nimport _pushUnique from '@onephrase/commons/arr/pushUnique.js';\r\nimport _merge from '@onephrase/commons/obj/merge.js';\r\nimport _find from '@onephrase/commons/obj/find.js';\r\nimport SelectInterface from './SelectInterface.js';\r\nimport AggrInterface from './AggrInterface.js';\r\nimport Field from './Field.js';\r\nimport Stmt from './Stmt.js';\r\nimport Window from './Window.js';\r\nimport GroupBy from './GroupBy.js';\r\nimport OrderBy from './OrderBy.js';\r\nimport Base from '../Base/Base.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Select class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Select = class extends _mixin(Stmt, SelectInterface) {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, clauses, distinct = false, references = []) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.clauses = clauses;\r\n\t\tthis.distinct = distinct;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database) {\r\n\t\t// ---------------------------\r\n\t\t// UNDERSTAND AGGREGATIONS\r\n\t\t// ---------------------------\r\n\t\tvar aggrExprs = {aggr:[], win:[]};\r\n\t\tvar pathExprs = [];\r\n\t\tthis.meta.vars.forEach(x => {\r\n\t\t\tif (x instanceof AggrInterface) {\r\n\t\t\t\t_pushUnique(x.window ? aggrExprs.win : aggrExprs.aggr, x);\r\n\t\t\t}\r\n\t\t\tif (x.isPath) {\r\n\t\t\t\t_pushUnique(pathExprs, x);\r\n\t\t\t}\r\n\t\t});\r\n\t\t// ---------------------------\r\n\t\t// BUILD RESPONSE ROWS INTO THE \"$\" KEY\r\n\t\t// ---------------------------\r\n\t\tvar applyFields = (tempRows, fields, collectAggrs = null) => {\r\n\t\t\tif (collectAggrs) {\r\n\t\t\t\tcollectAggrs = {aggr:[], win:[]};\r\n\t\t\t}\r\n\t\t\ttempRows.forEach(tempRow => {\r\n\t\t\t\tif (!tempRow.$) {\r\n\t\t\t\t\ttempRow.$ = {};\r\n\t\t\t\t}\r\n\t\t\t\tfields.forEach(field => {\r\n\t\t\t\t\tif (collectAggrs) {\r\n\t\t\t\t\t\t// This build will ignore AGGR columns for nowthis.\r\n\t\t\t\t\t\tvar aggrs = field.expr.meta.vars.slice().concat([field.expr]).filter(x => x instanceof AggrInterface);\r\n\t\t\t\t\t\tif (aggrs.length) {\r\n\t\t\t\t\t\t\t_pushUnique(aggrs.filter(x => x.window).length ? collectAggrs.win : collectAggrs.aggr, field);\r\n\t\t\t\t\t\t\t// But we'll set it to UNDEFINED (not NULL), to secure slot\r\n\t\t\t\t\t\t\tif (!(field.getAlias() in tempRow.$)) {\r\n\t\t\t\t\t\t\t\ttempRow.$[field.getAlias()] = undefined;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t_merge(1, tempRow.$, field.eval(tempRow, database));\r\n\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\tthrow new Error('[\"' + field.toString() + '\" in field list]: ' + e.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn collectAggrs;\r\n\t\t};\r\n\t\t\r\n\t\t// ---------------------------\r\n\t\t// INITIALIZE DATASOURCES WITH JOIN ALGORITHIMS APPLIED\r\n\t\t// ---------------------------\r\n\t\tvar tables = (_isArray(this.exprs.table) ? this.exprs.table : [this.exprs.table]).concat(this.exprs.joins || [])\r\n\t\t\t.map(table => table.eval(database));\r\n\t\tvar mainTable = tables.shift();\r\n\t\t\r\n\t\t/**\r\n\t\tpathExprs.forEach(pathReference => {\r\n\t\t\tvar pathLexer = new PathLexer(pathReference.name);\r\n\t\t\tvar fields, fieldDef, match = pathLexer.match();\r\n\t\t\tif (mainTable.schema \r\n\t\t\t&& (fields = mainTable.schema.fields) \r\n\t\t\t&& (fieldDef = fields[match.subject]) \r\n\t\t\t&& (fieldDef.type || '').toLowerCase() === 'json') {\r\n\t\t\t\tthis.handleJsonAccess(match.subject, Lexer.finalOperand);\r\n\t\t\t} else {\r\n\t\t\t\tthis.handleSmartJoin(match);\r\n\t\t\t}\r\n\t\t});\r\n\t\t*/\r\n\t\t\r\n\t\tthis.base = new Base(mainTable, this.exprs.where, ...tables);\r\n\t\t// BUILD (TEMP) ROWS, WHERE\r\n\t\tvar tempRows = [];\r\n\t\twhile (this.base.next()) {\r\n\t\t\ttempRows.push(this.base.fetch());\r\n\t\t}\r\n\t\t// BUILD FIELDS\r\n\t\tvar aggrFields = applyFields(tempRows, this.exprs.fields, true/*collectAggrs*/);\r\n\t\t// ---------------------------\r\n\t\t// GROUP BY?\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.groupBy || aggrExprs.aggr.length) {\r\n\t\t\tvar groupBy = this.exprs.groupBy || new GroupBy([]);\r\n\t\t\ttempRows = groupBy.eval(tempRows);\r\n\t\t\t// REVISIT RESPONSE ROWS and apply AGGR columns\r\n\t\t\tapplyFields(tempRows, aggrFields.aggr);\r\n\t\t}\r\n\t\t// ---------------------------\r\n\t\t// WINDOWING\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.windows || aggrExprs.win.length) {\r\n\t\t\tvar completed = [];\r\n\t\t\taggrExprs.win.forEach(expr => {\r\n\t\t\t\tvar uuid = expr.window.toString();\r\n\t\t\t\tif (completed.indexOf(uuid) === -1) {\r\n\t\t\t\t\texpr.window.eval(tempRows, this.exprs.windows);\r\n\t\t\t\t\tcompleted.push(uuid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// REVISIT RESPONSE ROWS and apply AGGR OVER () columns\r\n\t\t\tapplyFields(tempRows, aggrFields.win);\r\n\t\t}\r\n\t\t// ---------------------------\r\n\t\t// ORDER BY\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.orderBy) {\r\n\t\t\ttempRows = this.exprs.orderBy.eval(tempRows);\r\n\t\t}\r\n\t\t// ---------------------------\r\n\t\t// DISTINCT\r\n\t\t// ---------------------------\r\n\t\tif (this.distinct) {\r\n\t\t\ttempRows = tempRows.filter((tempRow, i) => i === _find(tempRows, _tempRow => _even(_tempRow, tempRow)));\r\n\t\t}\r\n\t\t// ---------------------------\r\n\t\t// LIMIT\r\n\t\t// ---------------------------\r\n\t\tif (this.exprs.offset || this.exprs.limit) {\r\n\t\t\tvar limit = this.exprs.limit ? this.exprs.limit.slice() : [];\r\n\t\t\tvar offset = this.exprs.offset || (limit.length === 2 ? limit.shift() : 0);\r\n\t\t\ttempRows = limit.length \r\n\t\t\t\t? tempRows.slice(offset, offset + limit[0]) \r\n\t\t\t\t: tempRows.slice(offset);\r\n\t\t}\r\n\t\t// ---------------------------\r\n\t\t// SEND RESPONSE ROWS\r\n\t\t// ---------------------------\r\n\t\treturn tempRows.map(tempRow => tempRow.$);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates the necessary join to satisfy access field names with the \"->\" and/or \"<-\".\r\n\t *\r\n\t * @param object \tmatch\r\n\t *\r\n\t * @return void\r\n\t */\r\n\t_handleSmartJoin(match) {\r\n\t\tvar accessPath = match.subject;\r\n\t\tvar fields = null;\r\n\t\tmatch.functions.forEach((func, i) => {\r\n\t\t\tif (func.name.toLowerCase() === 'select') {\r\n\t\t\t\tfields = _arrFrom(fields).concat(func.args);\r\n\t\t\t\tmatch.functions.splice(i, 1);\r\n\t\t\t}\r\n\t\t});\r\n\t\t// -----------------------\r\n\t\tvar paramsObject = new Relationist(this.tableName, match.subject);\r\n\t\tvar paramsObject_immediateTarget = paramsObject.getImmediateTarget();\r\n\t\tvar actingKey = paramsObject_immediateTarget.actingKey;\r\n\t\tvar postTarget = paramsObject_immediateTarget.postTarget;\r\n\t\tvar uniqueTargetID = PathLexer.getSignature(paramsObject_immediateTarget.subject(), match.functions);\r\n\t\tif (!this.smartJoins[uniqueTargetID]) {\r\n\t\t\tthis.smartJoins[uniqueTargetID] = paramsObject;\r\n\t\t\tparamsObject_immediateTarget.query().apply(match.functions);\r\n\t\t} else {\r\n\t\t\tparamsObject_immediateTarget = this.smartJoins[uniqueTargetID].getImmediateTarget();\r\n\t\t}\r\n\t\t// -----------------------\r\n\t\t// The acting key needed on the join's \"on\" clause.\r\n\t\tparamsObject_immediateTarget.query().select(actingKey);\r\n\t\t// The select magic, with the backtick saviour\r\n\t\tif (postTarget) {\r\n\t\t\tparamsObject_immediateTarget.query().select(new Expression('`' + postTarget + '` AS `' + match.query + '`'));\r\n\t\t} else if (_array(fields) || _array(match.body) || match.functions) {\r\n\t\t\tfields = _array(fields) ? fields : match.body;\r\n\t\t\tif (_array(fields) && fields.length > 1 \r\n\t\t\t|| (_arrFrom(fields)[0] === '*' && (fields = paramsObject_immediateTarget.blueprint().fields.keys()))\r\n\t\t\t|| (fields = paramsObject_immediateTarget.blueprint().defaultFields)) {\r\n\t\t\t\tfields = fields.map(field => {\r\n\t\t\t\t\tvar {field, alias} = Static.splitAlias(field);\r\n\t\t\t\t\treturn 'JSON_OBJECT(\"' + (alias || field) + '\", ' + field + ')';\r\n\t\t\t\t});\r\n\t\t\t\tfields = fields.length > 1 ? 'JSON_MERGE(' + fields.join(', ') + ')' : fields[0];\r\n\t\t\t} else {\r\n\t\t\t\tfields = fields[0];\r\n\t\t\t}\r\n\t\t\tparamsObject_immediateTarget.query().select(new Expression(fields + ' AS `' + match.query + '`'));\r\n\t\t}\r\n\t\t// -----------------------\r\n\t\t// Use UAC?\r\n\t\tif (this.withUac) {\r\n\t\t\tparamsObject_immediateTarget.query().withUac();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.getToString(context, (clauseType, expr, clause) => {\r\n\t\t\tif (clauseType === 'fields') {\r\n\t\t\t\treturn clause + ' ' + expr.map(x => x.toString(context)).join(', ');\r\n\t\t\t} else if (clauseType === 'windows') {\r\n\t\t\t\treturn clause + ' ' + Object.keys(expr).map(\r\n\t\t\t\t\twindowName => windowName + ' AS ' + expr[windowName].toString(context)\r\n\t\t\t\t).join(', ');\r\n\t\t\t} else if (clauseType === 'groupBy' || clauseType === 'orderBy') {\r\n\t\t\t\treturn clause + ' ' + expr.toString(context);\r\n\t\t\t} else if (clauseType === 'limit') {\r\n\t\t\t\treturn clause + ' ' + expr.join(', ');\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Select) {\r\n\t\tif (expr.trim().substr(0, 6).toLowerCase() === 'select') {\r\n\t\t\tvar stmtParse = super.getParse(expr, Static.clauses, parseCallback, (clauseType, _expr) => {\r\n\t\t\t\tif (clauseType === 'fields') {\r\n\t\t\t\t\treturn Lexer.split(_expr, [',']).map(\r\n\t\t\t\t\t\tfield => parseCallback(field.trim(), [Field])\r\n\t\t\t\t\t);\r\n\t\t\t\t} else if (clauseType === 'windows') {\r\n\t\t\t\t\tvar windowsByName = {};\r\n\t\t\t\t\tLexer.split(_expr, [',']).forEach(window => {\r\n\t\t\t\t\t\t// WINDOW w AS (PARTITION BY country ORDER BY city ASC, state DESC), u AS (...)\r\n\t\t\t\t\t\t// NOTICE the space around \"as\", important in view of \"city ASC\"\r\n\t\t\t\t\t\tvar windowSplit = window.split(new RegExp(' as ', 'i'));\r\n\t\t\t\t\t\twindowsByName[windowSplit[0].trim()] = parseCallback(windowSplit[1].trim(), [Window]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn windowsByName;\r\n\t\t\t\t} else if (clauseType === 'groupBy') {\r\n\t\t\t\t\treturn parseCallback(_expr, [GroupBy]);\r\n\t\t\t\t} else if (clauseType === 'orderBy') {\r\n\t\t\t\t\treturn parseCallback(_expr, [OrderBy]);\r\n\t\t\t\t} else if (clauseType === 'limit') {\r\n\t\t\t\t\treturn _expr.split(',').map(n => parseInt(n));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn new Static(\r\n\t\t\t\tstmtParse.exprs, \r\n\t\t\t\tstmtParse.clauses, \r\n\t\t\t\t(stmtParse.clauses.fields.match(/DISTINCT/i) || [])[0],\r\n\t\t\t\tstmtParse.references,\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nSelect.clauses = {\r\n\tfields: 'SELECT([ ]+(ALL|DISTINCT))?',\r\n\ttable: 'FROM',\r\n\twhere: 'WHERE',\r\n\t// INNER JOIN, CROSS JOIN, {LEFT|RIGHT} [OUTER] JOIN\r\n\tjoins: '(INNER[ ]+|CROSS[ ]+|(LEFT|RIGHT)([ ]+OUTER)?[ ]+)?JOIN',\r\n\tgroupBy: 'GROUP[ ]+BY',\r\n\twindows: 'WINDOW',\r\n\torderBy: 'ORDER[ ]+BY',\r\n\toffset: 'OFFSET',\r\n\tlimit: 'LIMIT',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Select;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {Lexer} from '../index.js';\r\nimport OrderBy from './OrderBy.js';\r\nimport UnionInterface from './UnionInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Union class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Union = class extends UnionInterface {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(query, queries, orderBy = null, limit = null) {\r\n\t\tsuper();\r\n\t\tthis.query = query;\r\n\t\tthis.queries = queries;\r\n\t\tthis.orderBy = orderBy;\r\n\t\tthis.limit = limit;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\tvar str = [[this.query.toString(context)].concat(\r\n\t\t\tthis.queries.map(q => (q.onDuplicate ? q.onDuplicate.toUpperCase() + ' ' : '') + q.select.toString(context))\r\n\t\t).join(' UNION ')];\r\n\t\tif (this.orderBy) {\r\n\t\t\tstr.push('ORDER BY ' + this.orderBy.toString(context));\r\n\t\t}\r\n\t\tif (this.limit) {\r\n\t\t\tstr.push('LIMIT ' + this.limit.join(', '));\r\n\t\t}\r\n\t\treturn str.join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Union) {\r\n\t\tvar parse = null;\r\n\t\tvar paramsRegex = {useRegex: 'i'};\r\n\t\tif ((parse = Lexer.lex(expr, [' UNION([ ]+(ALL|DISTINCT))? '], paramsRegex)) && parse.matches.length) {\r\n\t\t\tvar selects = parse.tokens;\r\n\t\t\tvar clauses = parse.matches;\r\n\t\t\tvar orderBy = null;\r\n\t\t\tvar limit = null;\r\n\t\t\t// Are the selects parenthisized? Then there could be outer ORDER BY / LIMIT clauses\r\n\t\t\tif (selects[0].trim().startsWith('(')) {\r\n\t\t\t\tvar lastStmtSplit = Lexer.lex(selects.pop(), ['ORDER[ ]+BY', 'LIMIT'], paramsRegex);\r\n\t\t\t\tselects.push(lastStmtSplit.tokens.shift());\r\n\t\t\t\tlastStmtSplit.matches.forEach(clause => {\r\n\t\t\t\t\tvar _expr = lastStmtSplit.tokens.shift().trim();\r\n\t\t\t\t\tif (clause.toUpperCase().startsWith('ORDER')) {\r\n\t\t\t\t\t\torderBy = parseCallback(_expr, [OrderBy]);\r\n\t\t\t\t\t} else if (clause.toUpperCase().startsWith('LIMIT')) {\r\n\t\t\t\t\t\tlimit = _expr.split(',').map(n => parseInt(n));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn new Static(\r\n\t\t\t\tparseCallback(selects.shift().trim()),\r\n\t\t\t\tselects.map((select, i) => {return {\r\n\t\t\t\t\tselect: parseCallback(select.trim()),\r\n\t\t\t\t\tonDuplicate: (clauses[i].match(new RegExp('ALL|DISTINCT', 'i')) || [])[0]\r\n\t\t\t\t}}),\r\n\t\t\t\torderBy,\r\n\t\t\t\tlimit\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Union;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport ExprInterface from '../ExprInterface.js';\r\n\r\n/**\r\n * ---------------------------\r\n * UpdateInterface\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Interface = class extends ExprInterface {};\r\nObject.defineProperty(Interface.prototype, 'jsenType', {\r\n\tget() { return 'UpdateStatement'; },\r\n});\r\nexport default Interface;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '../index.js';\r\nimport _mixin from '@onephrase/commons/js/mixin.js';\r\nimport _isArray from '@onephrase/commons/js/isArray.js';\r\nimport UpdateInterface from './UpdateInterface.js';\r\nimport Assignment from './Assignment.js';\r\nimport Base from '../Base/Base.js';\r\nimport Stmt from './Stmt.js';\r\n\r\n/**\r\n * ---------------------------\r\n * Update class\r\n * ---------------------------\r\n */\t\t\t\t\r\n\r\nconst Update = class extends _mixin(Stmt, UpdateInterface) {\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tconstructor(exprs, clauses) {\r\n\t\tsuper();\r\n\t\tthis.exprs = exprs;\r\n\t\tthis.clauses = clauses;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\teval(database) {\r\n\t\t// ---------------------------\r\n\t\t// INITIALIZE DATASOURCES WITH JOIN ALGORITHIMS APPLIED\r\n\t\t// ---------------------------\r\n\t\tvar tables = (_isArray(this.exprs.table) ? this.exprs.table : [this.exprs.table]).concat(this.exprs.joins || []);\r\n\t\ttables = tables.map(table => table.eval(database))\r\n\t\tthis.base = new Base(tables.shift(), this.exprs.where, ...tables);\r\n\t\tvar rowCount = 0;\r\n\t\twhile (this.base.next()) {\r\n\t\t\tvar rowBase = this.base.fetch();\r\n\t\t\tthis.exprs.assignments.forEach(assignment => assignment.eval(rowBase));\r\n\t\t\trowCount ++;\r\n\t\t}\r\n\t\treturn rowCount;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoString(context = null) {\r\n\t\treturn this.getToString(context, (clauseType, expr, clause) => {\r\n\t\t\tif (clauseType === 'assignments') {\r\n\t\t\t\treturn clause + ' ' + expr.map(assignment => assignment.toString(context)).join(', ');\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(expr, parseCallback, Static = Update) {\r\n\t\tif (expr.trim().substr(0, 6).toLowerCase() === 'update') {\r\n\t\t\tvar stmtParse = super.getParse(expr, Static.clauses, parseCallback, (clauseType, _expr) => {\r\n\t\t\t\tif (clauseType === 'assignments') {\r\n\t\t\t\t\treturn Lexer.split(_expr, [','])\r\n\t\t\t\t\t\t.map(assignment => parseCallback(assignment.trim(), [Assignment]));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn new Static(stmtParse.exprs, stmtParse.clauses);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @prop object\r\n */\r\nUpdate.clauses = {\r\n\ttable: 'UPDATE',\r\n\tassignments: 'SET',\r\n\twhere: 'WHERE',\r\n\t// inner join, cross join, {left|right} [outer] join\r\n\tjoins: '(INNER[ ]+|CROSS[ ]+|(LEFT|RIGHT)([ ]+OUTER)?[ ]+)?JOIN',\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport default Update;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport {\r\n\tLexer\r\n} from '@onephrase/jsen';\r\nimport Mql from './Mql.js';\r\nimport ExprInterface from './ExprInterface.js';\r\n// Reuse\r\nimport {\r\n\tAbstraction,\r\n\tBool,\r\n\tComments,\r\n\tMath,\r\n\tNum,\r\n\tStr\r\n} from '@onephrase/jsen';\r\nimport {\r\n\tAbstractionInterface,\r\n\tBoolInterface,\r\n\tCommentsInterface,\r\n\tMathInterface,\r\n\tNumInterface,\r\n\tStrInterface\r\n} from '@onephrase/jsen';\r\nimport * as Commons from '@onephrase/commons';\r\n// Extended\r\nimport {\r\n\tAssertionInterface,\r\n\tAssignmentInterface,\r\n\tCallInterface,\r\n\tComparisonInterface,\r\n\tConditionInterface,\r\n\tReferenceInterface\r\n} from '@onephrase/jsen';\r\nimport Assertion from './Expr/Assertion.js';\r\nimport Assignment from './Expr/Assignment.js';\r\nimport Call from './Expr/Call.js';\r\nimport Comparison from './Expr/Comparison.js';\r\nimport Condition from './Expr/Condition.js';\r\nimport Reference from './Expr/Reference.js';\r\n// New types\r\nimport Aggr from './Expr/Aggr.js';\r\nimport AggrInterface from './Expr/AggrInterface.js';\r\nimport Delete from './Expr/Delete.js';\r\nimport DeleteInterface from './Expr/DeleteInterface.js';\r\nimport Field from './Expr/Field.js';\r\nimport FieldInterface from './Expr/FieldInterface.js';\r\nimport GroupBy from './Expr/GroupBy.js';\r\nimport GroupByInterface from './Expr/GroupByInterface.js';\r\nimport Insert from './Expr/Insert.js';\r\nimport InsertInterface from './Expr/InsertInterface.js';\r\nimport Join from './Expr/Join.js';\r\nimport JoinInterface from './Expr/JoinInterface.js';\r\nimport OrderBy from './Expr/OrderBy.js';\r\nimport OrderByInterface from './Expr/OrderByInterface.js';\r\nimport Select from './Expr/Select.js';\r\nimport SelectInterface from './Expr/SelectInterface.js';\r\nimport Table from './Expr/Table.js';\r\nimport TableInterface from './Expr/TableInterface.js';\r\nimport Union from './Expr/Union.js';\r\nimport UnionInterface from './Expr/UnionInterface.js';\r\nimport Update from './Expr/Update.js';\r\nimport UpdateInterface from './Expr/UpdateInterface.js';\r\nimport Window from './Expr/Window.js';\r\nimport WindowInterface from './Expr/WindowInterface.js';\r\n\r\n/**\r\n * @var object\r\n */\r\nMql.grammars = {\r\n\t// Statements and union\r\n\tComments: Comments,\t\t\t// // single-line | /* double-line */\r\n\tUnion: Union,\t\t\t\t// ... UNION ...\r\n\tSelect: Select,\t\t\t\t// SELECT ... FROM ...\r\n\tInsert: Insert,\t\t\t\t// INSERT INTO ...\r\n\tUpdate: Update,\t\t\t\t// UPDATE ...\r\n\tDelete: Delete,\t\t\t\t// DELETE FROM ...\r\n\t// Expressions\r\n\tJoin: Join,\t\t\t\t\t// table2 ON|USING ...\r\n\tAbstraction: Abstraction,\t// (...)\r\n\tCondition: Condition,\t\t// IF(..., ..., ...)\r\n\tAssertion: Assertion,\t\t// !field1 OR field2\r\n\tComparison: Comparison,\t\t// field1 > field2\r\n\tMath: Math,\t\t\t\t\t// field1 + field2\r\n\tNum: Num,\t\t\t\t\t// [0-9]\r\n\tStr: Str,\t\t\t\t\t// \"\"\r\n\tBool: Bool,\t\t\t\t\t// true\r\n\tAggr: Aggr,\t\t\t\t\t// MIN() OVER()\r\n\tCall: Call,\t\t\t\t\t// COUNT()\r\n\tReference: Reference,\t\t// field1\r\n};\r\n\r\n/**\r\n * @exports\r\n */\r\nexport {\r\n\tExprInterface,\r\n\tLexer\r\n};\r\nexport {\r\n\tAbstraction,\r\n\tAggr,\r\n\tAssertion,\r\n\tAssignment,\r\n\tBool,\r\n\tCall,\r\n\tComments,\r\n\tComparison,\r\n\tCondition,\r\n\tDelete,\r\n\tField,\r\n\tGroupBy,\r\n\tInsert,\r\n\tJoin,\r\n\tMath,\r\n\tNum,\r\n\tOrderBy,\r\n\tReference,\r\n\tSelect,\r\n\tStr,\r\n\tTable,\r\n\tUnion,\r\n\tUpdate,\r\n\tWindow\r\n};\r\nexport {\r\n\tAbstractionInterface,\r\n\tAggrInterface,\r\n\tAssertionInterface,\r\n\tAssignmentInterface,\r\n\tBoolInterface,\r\n\tCallInterface,\r\n\tCommentsInterface,\r\n\tComparisonInterface,\r\n\tConditionInterface,\r\n\tDeleteInterface,\r\n\tFieldInterface,\r\n\tGroupByInterface,\r\n\tInsertInterface,\r\n\tJoinInterface,\r\n\tMathInterface,\r\n\tNumInterface,\r\n\tOrderByInterface,\r\n\tReferenceInterface,\r\n\tSelectInterface,\r\n\tStrInterface,\r\n\tTableInterface,\r\n\tUnionInterface,\r\n\tUpdateInterface,\r\n\tWindowInterface\r\n};\r\nexport default Mql;\r\n","\r\n/**\r\n * @imports\r\n */\r\nimport Mql from './index.js';\r\n\r\n// As globals\r\nif (!window.OnePhrase) {\r\n\twindow.OnePhrase = {};\r\n}\r\nwindow.OnePhrase.Mql = Mql;"],"sourceRoot":""}